//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace DualDrill.Common.Nat;


public sealed partial class N1 : INat<N1>
{
	public static int Value => 1;
	public static N1 Instance { get; } = new();	

	public T Accept<T>(INatVisitor<T> visitor) => visitor.Visit<N1>();
}

public sealed partial class N2 : INat<N2>
{
	public static int Value => 2;
	public static N2 Instance { get; } = new();	

	public T Accept<T>(INatVisitor<T> visitor) => visitor.Visit<N2>();
}

public sealed partial class N3 : INat<N3>
{
	public static int Value => 3;
	public static N3 Instance { get; } = new();	

	public T Accept<T>(INatVisitor<T> visitor) => visitor.Visit<N3>();
}

public sealed partial class N4 : INat<N4>
{
	public static int Value => 4;
	public static N4 Instance { get; } = new();	

	public T Accept<T>(INatVisitor<T> visitor) => visitor.Visit<N4>();
}

public sealed partial class N8 : INat<N8>
{
	public static int Value => 8;
	public static N8 Instance { get; } = new();	

	public T Accept<T>(INatVisitor<T> visitor) => visitor.Visit<N8>();
}

public sealed partial class N16 : INat<N16>
{
	public static int Value => 16;
	public static N16 Instance { get; } = new();	

	public T Accept<T>(INatVisitor<T> visitor) => visitor.Visit<N16>();
}

public sealed partial class N32 : INat<N32>
{
	public static int Value => 32;
	public static N32 Instance { get; } = new();	

	public T Accept<T>(INatVisitor<T> visitor) => visitor.Visit<N32>();
}

public sealed partial class N64 : INat<N64>
{
	public static int Value => 64;
	public static N64 Instance { get; } = new();	

	public T Accept<T>(INatVisitor<T> visitor) => visitor.Visit<N64>();
}

public sealed partial class N128 : INat<N128>
{
	public static int Value => 128;
	public static N128 Instance { get; } = new();	

	public T Accept<T>(INatVisitor<T> visitor) => visitor.Visit<N128>();
}

public sealed partial class N256 : INat<N256>
{
	public static int Value => 256;
	public static N256 Instance { get; } = new();	

	public T Accept<T>(INatVisitor<T> visitor) => visitor.Visit<N256>();
}


public static partial class Nat {
	public static INat FromValue(int value) {
		return value switch {
			1 => N1.Instance,
			2 => N2.Instance,
			3 => N3.Instance,
			4 => N4.Instance,
			8 => N8.Instance,
			16 => N16.Instance,
			32 => N32.Instance,
			64 => N64.Instance,
			128 => N128.Instance,
			256 => N256.Instance,
			_ => throw new NotSupportedException($"Convert {value} to INat is not supported")
		};
	}
}
