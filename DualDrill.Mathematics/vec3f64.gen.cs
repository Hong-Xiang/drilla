//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Runtime.CompilerServices;
using System.Runtime.Intrinsics;
using System.Runtime.InteropServices;
namespace DualDrill.Mathematics;
using static DMath;

[StructLayout(LayoutKind.Sequential)]
public partial struct vec3f64{
    internal Vector256<System.Double> Data;
    
    public System.Double x {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => Data[0];
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set {
            Data = Vector256.Create(value, Data[1], Data[2], Data[3]);
        }
        
    }
    
    public System.Double y {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => Data[1];
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set {
            Data = Vector256.Create(Data[0], value, Data[2], Data[3]);
        }
        
    }
    
    public System.Double z {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => Data[2];
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set {
            Data = Vector256.Create(Data[0], Data[1], value, Data[3]);
        }
        
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3f64 operator -(vec3f64 v)
    {
        return new() { Data = - v.Data };
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3f64 operator +(vec3f64 left, vec3f64 right)
    {
        return new() { Data = left.Data + right.Data };
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3f64 operator -(vec3f64 left, vec3f64 right)
    {
        return new() { Data = left.Data - right.Data };
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3f64 operator *(vec3f64 left, vec3f64 right)
    {
        return new() { Data = left.Data * right.Data };
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3f64 operator /(vec3f64 left, vec3f64 right)
    {
        return new() { Data = left.Data / right.Data };
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3f64 operator %(vec3f64 left, vec3f64 right)
    {
        return vec3((System.Double)(left.x % right.x), (System.Double)(left.y % right.y), (System.Double)(left.z % right.z));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3f64 operator +(System.Double left, vec3f64 right)
    {
        return new() { Data = Vector256.Create(left) + right.Data };
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3f64 operator +(vec3f64 left, System.Double right)
    {
        return new() { Data = left.Data + Vector256.Create(right) };
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3f64 operator -(System.Double left, vec3f64 right)
    {
        return new() { Data = Vector256.Create(left) - right.Data };
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3f64 operator -(vec3f64 left, System.Double right)
    {
        return new() { Data = left.Data - Vector256.Create(right) };
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3f64 operator *(System.Double left, vec3f64 right)
    {
        return new() { Data = Vector256.Create(left) * right.Data };
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3f64 operator *(vec3f64 left, System.Double right)
    {
        return new() { Data = left.Data * Vector256.Create(right) };
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3f64 operator /(System.Double left, vec3f64 right)
    {
        return new() { Data = Vector256.Create(left) / right.Data };
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3f64 operator /(vec3f64 left, System.Double right)
    {
        return new() { Data = left.Data / Vector256.Create(right) };
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3f64 operator %(System.Double left, vec3f64 right)
    {
        return vec3((System.Double)(left % right.x), (System.Double)(left % right.y), (System.Double)(left % right.z));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3f64 operator %(vec3f64 left, System.Double right)
    {
        return vec3((System.Double)(left.x % right), (System.Double)(left.y % right), (System.Double)(left.z % right));
    }
    
    public vec2f64 xx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(x, x);
    }
    
    public vec2f64 yx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(y, x);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set 
        {
            y = value.x;
            x = value.y;
        }
        
    }
    
    public vec2f64 zx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(z, x);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set 
        {
            z = value.x;
            x = value.y;
        }
        
    }
    
    public vec2f64 xy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(x, y);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set 
        {
            x = value.x;
            y = value.y;
        }
        
    }
    
    public vec2f64 yy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(y, y);
    }
    
    public vec2f64 zy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(z, y);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set 
        {
            z = value.x;
            y = value.y;
        }
        
    }
    
    public vec2f64 xz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(x, z);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set 
        {
            x = value.x;
            z = value.y;
        }
        
    }
    
    public vec2f64 yz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(y, z);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set 
        {
            y = value.x;
            z = value.y;
        }
        
    }
    
    public vec2f64 zz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(z, z);
    }
    
    public vec3f64 xxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, x, x);
    }
    
    public vec3f64 yxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, x, x);
    }
    
    public vec3f64 zxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(z, x, x);
    }
    
    public vec3f64 xyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, y, x);
    }
    
    public vec3f64 yyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, y, x);
    }
    
    public vec3f64 zyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(z, y, x);
    }
    
    public vec3f64 xzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, z, x);
    }
    
    public vec3f64 yzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, z, x);
    }
    
    public vec3f64 zzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(z, z, x);
    }
    
    public vec3f64 xxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, x, y);
    }
    
    public vec3f64 yxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, x, y);
    }
    
    public vec3f64 zxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(z, x, y);
    }
    
    public vec3f64 xyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, y, y);
    }
    
    public vec3f64 yyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, y, y);
    }
    
    public vec3f64 zyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(z, y, y);
    }
    
    public vec3f64 xzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, z, y);
    }
    
    public vec3f64 yzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, z, y);
    }
    
    public vec3f64 zzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(z, z, y);
    }
    
    public vec3f64 xxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, x, z);
    }
    
    public vec3f64 yxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, x, z);
    }
    
    public vec3f64 zxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(z, x, z);
    }
    
    public vec3f64 xyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, y, z);
    }
    
    public vec3f64 yyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, y, z);
    }
    
    public vec3f64 zyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(z, y, z);
    }
    
    public vec3f64 xzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, z, z);
    }
    
    public vec3f64 yzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, z, z);
    }
    
    public vec3f64 zzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(z, z, z);
    }
    
    public vec4f64 xxxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, x, x);
    }
    
    public vec4f64 yxxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, x, x);
    }
    
    public vec4f64 zxxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, x, x, x);
    }
    
    public vec4f64 xyxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, x, x);
    }
    
    public vec4f64 yyxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, x, x);
    }
    
    public vec4f64 zyxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, y, x, x);
    }
    
    public vec4f64 xzxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, z, x, x);
    }
    
    public vec4f64 yzxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, z, x, x);
    }
    
    public vec4f64 zzxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, z, x, x);
    }
    
    public vec4f64 xxyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, y, x);
    }
    
    public vec4f64 yxyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, y, x);
    }
    
    public vec4f64 zxyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, x, y, x);
    }
    
    public vec4f64 xyyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, y, x);
    }
    
    public vec4f64 yyyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, y, x);
    }
    
    public vec4f64 zyyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, y, y, x);
    }
    
    public vec4f64 xzyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, z, y, x);
    }
    
    public vec4f64 yzyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, z, y, x);
    }
    
    public vec4f64 zzyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, z, y, x);
    }
    
    public vec4f64 xxzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, z, x);
    }
    
    public vec4f64 yxzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, z, x);
    }
    
    public vec4f64 zxzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, x, z, x);
    }
    
    public vec4f64 xyzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, z, x);
    }
    
    public vec4f64 yyzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, z, x);
    }
    
    public vec4f64 zyzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, y, z, x);
    }
    
    public vec4f64 xzzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, z, z, x);
    }
    
    public vec4f64 yzzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, z, z, x);
    }
    
    public vec4f64 zzzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, z, z, x);
    }
    
    public vec4f64 xxxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, x, y);
    }
    
    public vec4f64 yxxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, x, y);
    }
    
    public vec4f64 zxxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, x, x, y);
    }
    
    public vec4f64 xyxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, x, y);
    }
    
    public vec4f64 yyxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, x, y);
    }
    
    public vec4f64 zyxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, y, x, y);
    }
    
    public vec4f64 xzxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, z, x, y);
    }
    
    public vec4f64 yzxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, z, x, y);
    }
    
    public vec4f64 zzxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, z, x, y);
    }
    
    public vec4f64 xxyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, y, y);
    }
    
    public vec4f64 yxyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, y, y);
    }
    
    public vec4f64 zxyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, x, y, y);
    }
    
    public vec4f64 xyyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, y, y);
    }
    
    public vec4f64 yyyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, y, y);
    }
    
    public vec4f64 zyyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, y, y, y);
    }
    
    public vec4f64 xzyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, z, y, y);
    }
    
    public vec4f64 yzyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, z, y, y);
    }
    
    public vec4f64 zzyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, z, y, y);
    }
    
    public vec4f64 xxzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, z, y);
    }
    
    public vec4f64 yxzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, z, y);
    }
    
    public vec4f64 zxzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, x, z, y);
    }
    
    public vec4f64 xyzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, z, y);
    }
    
    public vec4f64 yyzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, z, y);
    }
    
    public vec4f64 zyzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, y, z, y);
    }
    
    public vec4f64 xzzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, z, z, y);
    }
    
    public vec4f64 yzzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, z, z, y);
    }
    
    public vec4f64 zzzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, z, z, y);
    }
    
    public vec4f64 xxxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, x, z);
    }
    
    public vec4f64 yxxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, x, z);
    }
    
    public vec4f64 zxxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, x, x, z);
    }
    
    public vec4f64 xyxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, x, z);
    }
    
    public vec4f64 yyxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, x, z);
    }
    
    public vec4f64 zyxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, y, x, z);
    }
    
    public vec4f64 xzxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, z, x, z);
    }
    
    public vec4f64 yzxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, z, x, z);
    }
    
    public vec4f64 zzxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, z, x, z);
    }
    
    public vec4f64 xxyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, y, z);
    }
    
    public vec4f64 yxyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, y, z);
    }
    
    public vec4f64 zxyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, x, y, z);
    }
    
    public vec4f64 xyyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, y, z);
    }
    
    public vec4f64 yyyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, y, z);
    }
    
    public vec4f64 zyyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, y, y, z);
    }
    
    public vec4f64 xzyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, z, y, z);
    }
    
    public vec4f64 yzyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, z, y, z);
    }
    
    public vec4f64 zzyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, z, y, z);
    }
    
    public vec4f64 xxzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, z, z);
    }
    
    public vec4f64 yxzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, z, z);
    }
    
    public vec4f64 zxzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, x, z, z);
    }
    
    public vec4f64 xyzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, z, z);
    }
    
    public vec4f64 yyzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, z, z);
    }
    
    public vec4f64 zyzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, y, z, z);
    }
    
    public vec4f64 xzzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, z, z, z);
    }
    
    public vec4f64 yzzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, z, z, z);
    }
    
    public vec4f64 zzzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, z, z, z);
    }
    
}

public static partial class DMath{
    public static vec3f64 vec3(System.Double x, System.Double y, System.Double z){
        return new vec3f64() { Data = Vector256.Create(x, y, z, default) };
    }
    
    public static vec3f64 vec3(System.Double e) => vec3(e, e, e);
    public static vec3f64 vec3(System.Double e0, vec2f64 e1) => vec3(e0, e1.x, e1.y);
    public static vec3f64 vec3(vec2f64 e0, System.Double e1) => vec3(e0.x, e0.y, e1);
}

