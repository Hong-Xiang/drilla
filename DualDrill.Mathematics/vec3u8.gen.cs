//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Runtime.CompilerServices;
using System.Runtime.Intrinsics;
using System.Runtime.InteropServices;
namespace DualDrill.Mathematics;
using static DMath;

[StructLayout(LayoutKind.Sequential)]
public partial struct vec3u8{
    public System.Byte x { get; set; }
    public System.Byte y { get; set; }
    public System.Byte z { get; set; }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3u8 operator -(vec3u8 v)
    {
        return vec3((System.Byte)(-v.x), (System.Byte)(-v.y), (System.Byte)(-v.z));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3u8 operator +(vec3u8 left, vec3u8 right)
    {
        return vec3((System.Byte)(left.x + right.x), (System.Byte)(left.y + right.y), (System.Byte)(left.z + right.z));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3u8 operator -(vec3u8 left, vec3u8 right)
    {
        return vec3((System.Byte)(left.x - right.x), (System.Byte)(left.y - right.y), (System.Byte)(left.z - right.z));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3u8 operator *(vec3u8 left, vec3u8 right)
    {
        return vec3((System.Byte)(left.x * right.x), (System.Byte)(left.y * right.y), (System.Byte)(left.z * right.z));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3u8 operator /(vec3u8 left, vec3u8 right)
    {
        return vec3((System.Byte)(left.x / right.x), (System.Byte)(left.y / right.y), (System.Byte)(left.z / right.z));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3u8 operator %(vec3u8 left, vec3u8 right)
    {
        return vec3((System.Byte)(left.x % right.x), (System.Byte)(left.y % right.y), (System.Byte)(left.z % right.z));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3u8 operator +(System.Byte left, vec3u8 right)
    {
        return vec3((System.Byte)(left + right.x), (System.Byte)(left + right.y), (System.Byte)(left + right.z));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3u8 operator +(vec3u8 left, System.Byte right)
    {
        return vec3((System.Byte)(left.x + right), (System.Byte)(left.y + right), (System.Byte)(left.z + right));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3u8 operator -(System.Byte left, vec3u8 right)
    {
        return vec3((System.Byte)(left - right.x), (System.Byte)(left - right.y), (System.Byte)(left - right.z));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3u8 operator -(vec3u8 left, System.Byte right)
    {
        return vec3((System.Byte)(left.x - right), (System.Byte)(left.y - right), (System.Byte)(left.z - right));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3u8 operator *(System.Byte left, vec3u8 right)
    {
        return vec3((System.Byte)(left * right.x), (System.Byte)(left * right.y), (System.Byte)(left * right.z));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3u8 operator *(vec3u8 left, System.Byte right)
    {
        return vec3((System.Byte)(left.x * right), (System.Byte)(left.y * right), (System.Byte)(left.z * right));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3u8 operator /(System.Byte left, vec3u8 right)
    {
        return vec3((System.Byte)(left / right.x), (System.Byte)(left / right.y), (System.Byte)(left / right.z));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3u8 operator /(vec3u8 left, System.Byte right)
    {
        return vec3((System.Byte)(left.x / right), (System.Byte)(left.y / right), (System.Byte)(left.z / right));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3u8 operator %(System.Byte left, vec3u8 right)
    {
        return vec3((System.Byte)(left % right.x), (System.Byte)(left % right.y), (System.Byte)(left % right.z));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec3u8 operator %(vec3u8 left, System.Byte right)
    {
        return vec3((System.Byte)(left.x % right), (System.Byte)(left.y % right), (System.Byte)(left.z % right));
    }
    
    public vec2u8 xx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(x, x);
    }
    
    public vec2u8 yx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(y, x);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set 
        {
            y = value.x;
            x = value.y;
        }
        
    }
    
    public vec2u8 zx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(z, x);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set 
        {
            z = value.x;
            x = value.y;
        }
        
    }
    
    public vec2u8 xy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(x, y);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set 
        {
            x = value.x;
            y = value.y;
        }
        
    }
    
    public vec2u8 yy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(y, y);
    }
    
    public vec2u8 zy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(z, y);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set 
        {
            z = value.x;
            y = value.y;
        }
        
    }
    
    public vec2u8 xz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(x, z);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set 
        {
            x = value.x;
            z = value.y;
        }
        
    }
    
    public vec2u8 yz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(y, z);
        
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        set 
        {
            y = value.x;
            z = value.y;
        }
        
    }
    
    public vec2u8 zz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(z, z);
    }
    
    public vec3u8 xxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, x, x);
    }
    
    public vec3u8 yxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, x, x);
    }
    
    public vec3u8 zxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(z, x, x);
    }
    
    public vec3u8 xyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, y, x);
    }
    
    public vec3u8 yyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, y, x);
    }
    
    public vec3u8 zyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(z, y, x);
    }
    
    public vec3u8 xzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, z, x);
    }
    
    public vec3u8 yzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, z, x);
    }
    
    public vec3u8 zzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(z, z, x);
    }
    
    public vec3u8 xxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, x, y);
    }
    
    public vec3u8 yxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, x, y);
    }
    
    public vec3u8 zxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(z, x, y);
    }
    
    public vec3u8 xyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, y, y);
    }
    
    public vec3u8 yyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, y, y);
    }
    
    public vec3u8 zyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(z, y, y);
    }
    
    public vec3u8 xzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, z, y);
    }
    
    public vec3u8 yzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, z, y);
    }
    
    public vec3u8 zzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(z, z, y);
    }
    
    public vec3u8 xxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, x, z);
    }
    
    public vec3u8 yxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, x, z);
    }
    
    public vec3u8 zxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(z, x, z);
    }
    
    public vec3u8 xyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, y, z);
    }
    
    public vec3u8 yyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, y, z);
    }
    
    public vec3u8 zyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(z, y, z);
    }
    
    public vec3u8 xzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, z, z);
    }
    
    public vec3u8 yzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, z, z);
    }
    
    public vec3u8 zzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(z, z, z);
    }
    
    public vec4u8 xxxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, x, x);
    }
    
    public vec4u8 yxxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, x, x);
    }
    
    public vec4u8 zxxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, x, x, x);
    }
    
    public vec4u8 xyxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, x, x);
    }
    
    public vec4u8 yyxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, x, x);
    }
    
    public vec4u8 zyxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, y, x, x);
    }
    
    public vec4u8 xzxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, z, x, x);
    }
    
    public vec4u8 yzxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, z, x, x);
    }
    
    public vec4u8 zzxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, z, x, x);
    }
    
    public vec4u8 xxyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, y, x);
    }
    
    public vec4u8 yxyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, y, x);
    }
    
    public vec4u8 zxyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, x, y, x);
    }
    
    public vec4u8 xyyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, y, x);
    }
    
    public vec4u8 yyyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, y, x);
    }
    
    public vec4u8 zyyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, y, y, x);
    }
    
    public vec4u8 xzyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, z, y, x);
    }
    
    public vec4u8 yzyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, z, y, x);
    }
    
    public vec4u8 zzyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, z, y, x);
    }
    
    public vec4u8 xxzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, z, x);
    }
    
    public vec4u8 yxzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, z, x);
    }
    
    public vec4u8 zxzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, x, z, x);
    }
    
    public vec4u8 xyzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, z, x);
    }
    
    public vec4u8 yyzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, z, x);
    }
    
    public vec4u8 zyzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, y, z, x);
    }
    
    public vec4u8 xzzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, z, z, x);
    }
    
    public vec4u8 yzzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, z, z, x);
    }
    
    public vec4u8 zzzx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, z, z, x);
    }
    
    public vec4u8 xxxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, x, y);
    }
    
    public vec4u8 yxxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, x, y);
    }
    
    public vec4u8 zxxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, x, x, y);
    }
    
    public vec4u8 xyxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, x, y);
    }
    
    public vec4u8 yyxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, x, y);
    }
    
    public vec4u8 zyxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, y, x, y);
    }
    
    public vec4u8 xzxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, z, x, y);
    }
    
    public vec4u8 yzxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, z, x, y);
    }
    
    public vec4u8 zzxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, z, x, y);
    }
    
    public vec4u8 xxyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, y, y);
    }
    
    public vec4u8 yxyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, y, y);
    }
    
    public vec4u8 zxyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, x, y, y);
    }
    
    public vec4u8 xyyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, y, y);
    }
    
    public vec4u8 yyyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, y, y);
    }
    
    public vec4u8 zyyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, y, y, y);
    }
    
    public vec4u8 xzyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, z, y, y);
    }
    
    public vec4u8 yzyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, z, y, y);
    }
    
    public vec4u8 zzyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, z, y, y);
    }
    
    public vec4u8 xxzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, z, y);
    }
    
    public vec4u8 yxzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, z, y);
    }
    
    public vec4u8 zxzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, x, z, y);
    }
    
    public vec4u8 xyzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, z, y);
    }
    
    public vec4u8 yyzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, z, y);
    }
    
    public vec4u8 zyzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, y, z, y);
    }
    
    public vec4u8 xzzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, z, z, y);
    }
    
    public vec4u8 yzzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, z, z, y);
    }
    
    public vec4u8 zzzy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, z, z, y);
    }
    
    public vec4u8 xxxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, x, z);
    }
    
    public vec4u8 yxxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, x, z);
    }
    
    public vec4u8 zxxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, x, x, z);
    }
    
    public vec4u8 xyxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, x, z);
    }
    
    public vec4u8 yyxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, x, z);
    }
    
    public vec4u8 zyxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, y, x, z);
    }
    
    public vec4u8 xzxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, z, x, z);
    }
    
    public vec4u8 yzxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, z, x, z);
    }
    
    public vec4u8 zzxz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, z, x, z);
    }
    
    public vec4u8 xxyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, y, z);
    }
    
    public vec4u8 yxyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, y, z);
    }
    
    public vec4u8 zxyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, x, y, z);
    }
    
    public vec4u8 xyyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, y, z);
    }
    
    public vec4u8 yyyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, y, z);
    }
    
    public vec4u8 zyyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, y, y, z);
    }
    
    public vec4u8 xzyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, z, y, z);
    }
    
    public vec4u8 yzyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, z, y, z);
    }
    
    public vec4u8 zzyz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, z, y, z);
    }
    
    public vec4u8 xxzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, z, z);
    }
    
    public vec4u8 yxzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, z, z);
    }
    
    public vec4u8 zxzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, x, z, z);
    }
    
    public vec4u8 xyzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, z, z);
    }
    
    public vec4u8 yyzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, z, z);
    }
    
    public vec4u8 zyzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, y, z, z);
    }
    
    public vec4u8 xzzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, z, z, z);
    }
    
    public vec4u8 yzzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, z, z, z);
    }
    
    public vec4u8 zzzz {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(z, z, z, z);
    }
    
}

public static partial class DMath{
    public static vec3u8 vec3(System.Byte x, System.Byte y, System.Byte z){
        return new vec3u8 () {
            x = x,
            y = y,
            z = z
        };
    }
    
    public static vec3u8 vec3(System.Byte e) => vec3(e, e, e);
    public static vec3u8 vec3(System.Byte e0, vec2u8 e1) => vec3(e0, e1.x, e1.y);
    public static vec3u8 vec3(vec2u8 e0, System.Byte e1) => vec3(e0.x, e0.y, e1);
}

