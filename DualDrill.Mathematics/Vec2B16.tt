<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using static DualDrill.Mathematics.DMath;

namespace DualDrill.Mathematics;

<# (string, string)[] types = [("i", "short"), ("u", "ushort")]; #>
<# string[] cis = ["x", "y"]; #>

<# foreach(var (n, t) in types) { #>
[StructLayout(LayoutKind.Sequential)]
public partial struct vec2<#= n #>16 {
	public <#= t #> x;
	public <#= t #> y;

<# foreach(var c0 in cis) { #>
<# foreach(var c1 in cis) { #>
<# foreach(var c2 in cis) { #>
	public vec3<#= n #>16 <#= c0 #><#= c1 #><#= c2 #> {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(<#= c0 #>, <#= c1 #>, <#= c2 #>);
	}
<# } #>
<# } #>
<# } #>
<# foreach(var c0 in cis) { #>
<# foreach(var c1 in cis) { #>
<# foreach(var c2 in cis) { #>
<# foreach(var c3 in cis) { #>
	public vec4<#= n #>16 <#= c0 #><#= c1 #><#= c2 #><#= c3 #> {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(<#= c0 #>, <#= c1 #>, <#= c2 #>, <#= c3 #>);
	}
<# } #>
<# } #>
<# } #>
<# } #>


}

public partial class DMath {
	public static vec2<#= n#>16 vec2(<#= t #> e) {
		return new vec2<#= n#>16() {
			x = e,
			y = e
		};
	}
	public static vec2<#= n#>16 vec2(<#= t #> x, <#= t #> y) {
		return new vec2<#= n#>16() {
			x = x,
			y = y
		};
	}
}
<# } #>


