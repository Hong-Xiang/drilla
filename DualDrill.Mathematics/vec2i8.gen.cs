//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Runtime.CompilerServices;
using System.Runtime.Intrinsics;
using System.Runtime.InteropServices;
namespace DualDrill.Mathematics;
using static DMath;

[StructLayout(LayoutKind.Sequential)]
public partial struct vec2i8{
    public System.SByte x { get; set; }
    public System.SByte y { get; set; }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2i8 operator -(vec2i8 v)
    {
        return vec2((System.SByte)(-v.x), (System.SByte)(-v.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2i8 operator +(vec2i8 left, vec2i8 right)
    {
        return vec2((System.SByte)(left.x + right.x), (System.SByte)(left.y + right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2i8 operator -(vec2i8 left, vec2i8 right)
    {
        return vec2((System.SByte)(left.x - right.x), (System.SByte)(left.y - right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2i8 operator *(vec2i8 left, vec2i8 right)
    {
        return vec2((System.SByte)(left.x * right.x), (System.SByte)(left.y * right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2i8 operator /(vec2i8 left, vec2i8 right)
    {
        return vec2((System.SByte)(left.x / right.x), (System.SByte)(left.y / right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2i8 operator %(vec2i8 left, vec2i8 right)
    {
        return vec2((System.SByte)(left.x % right.x), (System.SByte)(left.y % right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2i8 operator +(System.SByte left, vec2i8 right)
    {
        return vec2((System.SByte)(left + right.x), (System.SByte)(left + right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2i8 operator +(vec2i8 left, System.SByte right)
    {
        return vec2((System.SByte)(left.x + right), (System.SByte)(left.y + right));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2i8 operator -(System.SByte left, vec2i8 right)
    {
        return vec2((System.SByte)(left - right.x), (System.SByte)(left - right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2i8 operator -(vec2i8 left, System.SByte right)
    {
        return vec2((System.SByte)(left.x - right), (System.SByte)(left.y - right));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2i8 operator *(System.SByte left, vec2i8 right)
    {
        return vec2((System.SByte)(left * right.x), (System.SByte)(left * right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2i8 operator *(vec2i8 left, System.SByte right)
    {
        return vec2((System.SByte)(left.x * right), (System.SByte)(left.y * right));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2i8 operator /(System.SByte left, vec2i8 right)
    {
        return vec2((System.SByte)(left / right.x), (System.SByte)(left / right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2i8 operator /(vec2i8 left, System.SByte right)
    {
        return vec2((System.SByte)(left.x / right), (System.SByte)(left.y / right));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2i8 operator %(System.SByte left, vec2i8 right)
    {
        return vec2((System.SByte)(left % right.x), (System.SByte)(left % right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2i8 operator %(vec2i8 left, System.SByte right)
    {
        return vec2((System.SByte)(left.x % right), (System.SByte)(left.y % right));
    }
    
    public vec2i8 xx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(x, x);
    }
    
    public vec2i8 yx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(y, x);
    }
    
    public vec2i8 xy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(x, y);
    }
    
    public vec2i8 yy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(y, y);
    }
    
    public vec3i8 xxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, x, x);
    }
    
    public vec3i8 yxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, x, x);
    }
    
    public vec3i8 xyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, y, x);
    }
    
    public vec3i8 yyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, y, x);
    }
    
    public vec3i8 xxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, x, y);
    }
    
    public vec3i8 yxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, x, y);
    }
    
    public vec3i8 xyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, y, y);
    }
    
    public vec3i8 yyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, y, y);
    }
    
    public vec4i8 xxxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, x, x);
    }
    
    public vec4i8 yxxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, x, x);
    }
    
    public vec4i8 xyxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, x, x);
    }
    
    public vec4i8 yyxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, x, x);
    }
    
    public vec4i8 xxyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, y, x);
    }
    
    public vec4i8 yxyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, y, x);
    }
    
    public vec4i8 xyyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, y, x);
    }
    
    public vec4i8 yyyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, y, x);
    }
    
    public vec4i8 xxxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, x, y);
    }
    
    public vec4i8 yxxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, x, y);
    }
    
    public vec4i8 xyxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, x, y);
    }
    
    public vec4i8 yyxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, x, y);
    }
    
    public vec4i8 xxyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, y, y);
    }
    
    public vec4i8 yxyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, y, y);
    }
    
    public vec4i8 xyyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, y, y);
    }
    
    public vec4i8 yyyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, y, y);
    }
    
}

public static partial class DMath{
    public static vec2i8 vec2(System.SByte x, System.SByte y){
        return new vec2i8 () {
            x = x,
            y = y
        };
    }
    
    public static vec2i8 vec2(System.SByte e) => vec2(e, e);
}

