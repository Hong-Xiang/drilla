
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using System.Runtime.Intrinsics;
using static DualDrill.Mathematics.DMath;

namespace DualDrill.Mathematics;

// 32-bit scalar vec types

public partial struct vec2i32 {
	internal Vector64<int> Data;

	public int x {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[0];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector64.Create(value, Data[1]);
		}
	}

	public int y {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[1];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector64.Create(Data[0], value);
		}
	}
} 

public partial class DMath {
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2i32 vec2(int x, int y) => new() { Data =  Vector64.Create(x, y) };

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2i32 vec2(int e) => vec2(e, e);

}


public partial struct vec2u32 {
	internal Vector64<uint> Data;

	public uint x {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[0];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector64.Create(value, Data[1]);
		}
	}

	public uint y {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[1];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector64.Create(Data[0], value);
		}
	}
} 

public partial class DMath {
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2u32 vec2(uint x, uint y) => new() { Data =  Vector64.Create(x, y) };

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2u32 vec2(uint e) => vec2(e, e);

}


public partial struct vec2f32 {
	internal Vector64<float> Data;

	public float x {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[0];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector64.Create(value, Data[1]);
		}
	}

	public float y {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[1];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector64.Create(Data[0], value);
		}
	}
} 

public partial class DMath {
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2f32 vec2(float x, float y) => new() { Data =  Vector64.Create(x, y) };

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2f32 vec2(float e) => vec2(e, e);

}

// 64-bit scalar vec types

public partial struct vec2i64 {
	internal Vector128<long> Data;

	public long x {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[0];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector128.Create(value, Data[1]);
		}
	}

	public long y {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[1];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector128.Create(Data[0], value);
		}
	}
} 

public partial class DMath {
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2i64 vec2(long x, long y) => new() { Data =  Vector128.Create(x, y) };

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2i64 vec2(long e) => vec2(e, e);

}


public partial struct vec2u64 {
	internal Vector128<ulong> Data;

	public ulong x {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[0];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector128.Create(value, Data[1]);
		}
	}

	public ulong y {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[1];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector128.Create(Data[0], value);
		}
	}
} 

public partial class DMath {
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2u64 vec2(ulong x, ulong y) => new() { Data =  Vector128.Create(x, y) };

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2u64 vec2(ulong e) => vec2(e, e);

}


public partial struct vec2f64 {
	internal Vector128<double> Data;

	public double x {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[0];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector128.Create(value, Data[1]);
		}
	}

	public double y {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[1];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector128.Create(Data[0], value);
		}
	}
} 

public partial class DMath {
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2f64 vec2(double x, double y) => new() { Data =  Vector128.Create(x, y) };

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2f64 vec2(double e) => vec2(e, e);

}

