














//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using System.Runtime.Intrinsics;
using static DualDrill.Mathematics.DMath;

namespace DualDrill.Mathematics;


// 32-bit scalar vec types


public partial struct vec2i32 {
	internal Vector64<int> Data;

	public int x {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[0];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector64.Create(value, Data[1]);
		}
	}

	public int y {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[1];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector64.Create(Data[0], value);
		}
	}




	public vec3i32 xxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, x, x);
	}

	public vec3i32 xxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, x, y);
	}



	public vec3i32 xyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, y, x);
	}

	public vec3i32 xyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, y, y);
	}





	public vec3i32 yxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, x, x);
	}

	public vec3i32 yxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, x, y);
	}



	public vec3i32 yyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, y, x);
	}

	public vec3i32 yyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, y, y);
	}








	public vec4i32 xxxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, x, x);
	}

	public vec4i32 xxxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, x, y);
	}



	public vec4i32 xxyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, y, x);
	}

	public vec4i32 xxyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, y, y);
	}





	public vec4i32 xyxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, x, x);
	}

	public vec4i32 xyxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, x, y);
	}



	public vec4i32 xyyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, y, x);
	}

	public vec4i32 xyyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, y, y);
	}







	public vec4i32 yxxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, x, x);
	}

	public vec4i32 yxxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, x, y);
	}



	public vec4i32 yxyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, y, x);
	}

	public vec4i32 yxyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, y, y);
	}





	public vec4i32 yyxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, x, x);
	}

	public vec4i32 yyxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, x, y);
	}



	public vec4i32 yyyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, y, x);
	}

	public vec4i32 yyyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, y, y);
	}




} 

public partial class DMath {
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2i32 vec2(int x, int y) => new() { Data =  Vector64.Create(x, y) };

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2i32 vec2(int e) => vec2(e, e);

}



public partial struct vec2u32 {
	internal Vector64<uint> Data;

	public uint x {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[0];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector64.Create(value, Data[1]);
		}
	}

	public uint y {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[1];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector64.Create(Data[0], value);
		}
	}




	public vec3u32 xxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, x, x);
	}

	public vec3u32 xxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, x, y);
	}



	public vec3u32 xyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, y, x);
	}

	public vec3u32 xyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, y, y);
	}





	public vec3u32 yxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, x, x);
	}

	public vec3u32 yxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, x, y);
	}



	public vec3u32 yyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, y, x);
	}

	public vec3u32 yyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, y, y);
	}








	public vec4u32 xxxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, x, x);
	}

	public vec4u32 xxxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, x, y);
	}



	public vec4u32 xxyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, y, x);
	}

	public vec4u32 xxyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, y, y);
	}





	public vec4u32 xyxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, x, x);
	}

	public vec4u32 xyxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, x, y);
	}



	public vec4u32 xyyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, y, x);
	}

	public vec4u32 xyyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, y, y);
	}







	public vec4u32 yxxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, x, x);
	}

	public vec4u32 yxxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, x, y);
	}



	public vec4u32 yxyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, y, x);
	}

	public vec4u32 yxyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, y, y);
	}





	public vec4u32 yyxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, x, x);
	}

	public vec4u32 yyxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, x, y);
	}



	public vec4u32 yyyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, y, x);
	}

	public vec4u32 yyyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, y, y);
	}




} 

public partial class DMath {
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2u32 vec2(uint x, uint y) => new() { Data =  Vector64.Create(x, y) };

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2u32 vec2(uint e) => vec2(e, e);

}



public partial struct vec2f32 {
	internal Vector64<float> Data;

	public float x {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[0];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector64.Create(value, Data[1]);
		}
	}

	public float y {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[1];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector64.Create(Data[0], value);
		}
	}




	public vec3f32 xxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, x, x);
	}

	public vec3f32 xxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, x, y);
	}



	public vec3f32 xyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, y, x);
	}

	public vec3f32 xyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, y, y);
	}





	public vec3f32 yxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, x, x);
	}

	public vec3f32 yxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, x, y);
	}



	public vec3f32 yyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, y, x);
	}

	public vec3f32 yyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, y, y);
	}








	public vec4f32 xxxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, x, x);
	}

	public vec4f32 xxxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, x, y);
	}



	public vec4f32 xxyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, y, x);
	}

	public vec4f32 xxyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, y, y);
	}





	public vec4f32 xyxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, x, x);
	}

	public vec4f32 xyxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, x, y);
	}



	public vec4f32 xyyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, y, x);
	}

	public vec4f32 xyyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, y, y);
	}







	public vec4f32 yxxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, x, x);
	}

	public vec4f32 yxxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, x, y);
	}



	public vec4f32 yxyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, y, x);
	}

	public vec4f32 yxyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, y, y);
	}





	public vec4f32 yyxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, x, x);
	}

	public vec4f32 yyxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, x, y);
	}



	public vec4f32 yyyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, y, x);
	}

	public vec4f32 yyyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, y, y);
	}




} 

public partial class DMath {
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2f32 vec2(float x, float y) => new() { Data =  Vector64.Create(x, y) };

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2f32 vec2(float e) => vec2(e, e);

}


// 64-bit scalar vec types


public partial struct vec2i64 {
	internal Vector128<long> Data;

	public long x {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[0];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector128.Create(value, Data[1]);
		}
	}

	public long y {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[1];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector128.Create(Data[0], value);
		}
	}




	public vec3i64 xxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, x, x);
	}

	public vec3i64 xxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, x, y);
	}



	public vec3i64 xyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, y, x);
	}

	public vec3i64 xyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, y, y);
	}





	public vec3i64 yxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, x, x);
	}

	public vec3i64 yxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, x, y);
	}



	public vec3i64 yyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, y, x);
	}

	public vec3i64 yyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, y, y);
	}








	public vec4i64 xxxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, x, x);
	}

	public vec4i64 xxxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, x, y);
	}



	public vec4i64 xxyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, y, x);
	}

	public vec4i64 xxyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, y, y);
	}





	public vec4i64 xyxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, x, x);
	}

	public vec4i64 xyxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, x, y);
	}



	public vec4i64 xyyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, y, x);
	}

	public vec4i64 xyyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, y, y);
	}







	public vec4i64 yxxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, x, x);
	}

	public vec4i64 yxxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, x, y);
	}



	public vec4i64 yxyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, y, x);
	}

	public vec4i64 yxyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, y, y);
	}





	public vec4i64 yyxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, x, x);
	}

	public vec4i64 yyxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, x, y);
	}



	public vec4i64 yyyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, y, x);
	}

	public vec4i64 yyyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, y, y);
	}




} 

public partial class DMath {
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2i64 vec2(long x, long y) => new() { Data =  Vector128.Create(x, y) };

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2i64 vec2(long e) => vec2(e, e);

}



public partial struct vec2u64 {
	internal Vector128<ulong> Data;

	public ulong x {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[0];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector128.Create(value, Data[1]);
		}
	}

	public ulong y {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[1];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector128.Create(Data[0], value);
		}
	}




	public vec3u64 xxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, x, x);
	}

	public vec3u64 xxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, x, y);
	}



	public vec3u64 xyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, y, x);
	}

	public vec3u64 xyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, y, y);
	}





	public vec3u64 yxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, x, x);
	}

	public vec3u64 yxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, x, y);
	}



	public vec3u64 yyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, y, x);
	}

	public vec3u64 yyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, y, y);
	}








	public vec4u64 xxxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, x, x);
	}

	public vec4u64 xxxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, x, y);
	}



	public vec4u64 xxyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, y, x);
	}

	public vec4u64 xxyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, y, y);
	}





	public vec4u64 xyxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, x, x);
	}

	public vec4u64 xyxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, x, y);
	}



	public vec4u64 xyyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, y, x);
	}

	public vec4u64 xyyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, y, y);
	}







	public vec4u64 yxxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, x, x);
	}

	public vec4u64 yxxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, x, y);
	}



	public vec4u64 yxyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, y, x);
	}

	public vec4u64 yxyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, y, y);
	}





	public vec4u64 yyxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, x, x);
	}

	public vec4u64 yyxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, x, y);
	}



	public vec4u64 yyyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, y, x);
	}

	public vec4u64 yyyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, y, y);
	}




} 

public partial class DMath {
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2u64 vec2(ulong x, ulong y) => new() { Data =  Vector128.Create(x, y) };

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2u64 vec2(ulong e) => vec2(e, e);

}



public partial struct vec2f64 {
	internal Vector128<double> Data;

	public double x {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[0];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector128.Create(value, Data[1]);
		}
	}

	public double y {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[1];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  Vector128.Create(Data[0], value);
		}
	}




	public vec3f64 xxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, x, x);
	}

	public vec3f64 xxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, x, y);
	}



	public vec3f64 xyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, y, x);
	}

	public vec3f64 xyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(x, y, y);
	}





	public vec3f64 yxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, x, x);
	}

	public vec3f64 yxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, x, y);
	}



	public vec3f64 yyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, y, x);
	}

	public vec3f64 yyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec3(y, y, y);
	}








	public vec4f64 xxxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, x, x);
	}

	public vec4f64 xxxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, x, y);
	}



	public vec4f64 xxyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, y, x);
	}

	public vec4f64 xxyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, x, y, y);
	}





	public vec4f64 xyxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, x, x);
	}

	public vec4f64 xyxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, x, y);
	}



	public vec4f64 xyyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, y, x);
	}

	public vec4f64 xyyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(x, y, y, y);
	}







	public vec4f64 yxxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, x, x);
	}

	public vec4f64 yxxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, x, y);
	}



	public vec4f64 yxyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, y, x);
	}

	public vec4f64 yxyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, x, y, y);
	}





	public vec4f64 yyxx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, x, x);
	}

	public vec4f64 yyxy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, x, y);
	}



	public vec4f64 yyyx {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, y, x);
	}

	public vec4f64 yyyy {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => vec4(y, y, y, y);
	}




} 

public partial class DMath {
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2f64 vec2(double x, double y) => new() { Data =  Vector128.Create(x, y) };

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static vec2f64 vec2(double e) => vec2(e, e);

}


