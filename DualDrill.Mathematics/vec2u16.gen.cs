//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Runtime.CompilerServices;
using System.Runtime.Intrinsics;
using System.Runtime.InteropServices;
namespace DualDrill.Mathematics;
using static DMath;

[StructLayout(LayoutKind.Sequential)]
public partial struct vec2u16{
    public System.UInt16 x { get; set; }
    public System.UInt16 y { get; set; }
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2u16 operator -(vec2u16 v)
    {
        return vec2((System.UInt16)(-v.x), (System.UInt16)(-v.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2u16 operator +(vec2u16 left, vec2u16 right)
    {
        return vec2((System.UInt16)(left.x + right.x), (System.UInt16)(left.y + right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2u16 operator -(vec2u16 left, vec2u16 right)
    {
        return vec2((System.UInt16)(left.x - right.x), (System.UInt16)(left.y - right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2u16 operator *(vec2u16 left, vec2u16 right)
    {
        return vec2((System.UInt16)(left.x * right.x), (System.UInt16)(left.y * right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2u16 operator /(vec2u16 left, vec2u16 right)
    {
        return vec2((System.UInt16)(left.x / right.x), (System.UInt16)(left.y / right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2u16 operator %(vec2u16 left, vec2u16 right)
    {
        return vec2((System.UInt16)(left.x % right.x), (System.UInt16)(left.y % right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2u16 operator +(System.UInt16 left, vec2u16 right)
    {
        return vec2((System.UInt16)(left + right.x), (System.UInt16)(left + right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2u16 operator +(vec2u16 left, System.UInt16 right)
    {
        return vec2((System.UInt16)(left.x + right), (System.UInt16)(left.y + right));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2u16 operator -(System.UInt16 left, vec2u16 right)
    {
        return vec2((System.UInt16)(left - right.x), (System.UInt16)(left - right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2u16 operator -(vec2u16 left, System.UInt16 right)
    {
        return vec2((System.UInt16)(left.x - right), (System.UInt16)(left.y - right));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2u16 operator *(System.UInt16 left, vec2u16 right)
    {
        return vec2((System.UInt16)(left * right.x), (System.UInt16)(left * right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2u16 operator *(vec2u16 left, System.UInt16 right)
    {
        return vec2((System.UInt16)(left.x * right), (System.UInt16)(left.y * right));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2u16 operator /(System.UInt16 left, vec2u16 right)
    {
        return vec2((System.UInt16)(left / right.x), (System.UInt16)(left / right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2u16 operator /(vec2u16 left, System.UInt16 right)
    {
        return vec2((System.UInt16)(left.x / right), (System.UInt16)(left.y / right));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2u16 operator %(System.UInt16 left, vec2u16 right)
    {
        return vec2((System.UInt16)(left % right.x), (System.UInt16)(left % right.y));
    }
    
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static vec2u16 operator %(vec2u16 left, System.UInt16 right)
    {
        return vec2((System.UInt16)(left.x % right), (System.UInt16)(left.y % right));
    }
    
    public vec2u16 xx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(x, x);
    }
    
    public vec2u16 yx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(y, x);
    }
    
    public vec2u16 xy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(x, y);
    }
    
    public vec2u16 yy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec2(y, y);
    }
    
    public vec3u16 xxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, x, x);
    }
    
    public vec3u16 yxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, x, x);
    }
    
    public vec3u16 xyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, y, x);
    }
    
    public vec3u16 yyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, y, x);
    }
    
    public vec3u16 xxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, x, y);
    }
    
    public vec3u16 yxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, x, y);
    }
    
    public vec3u16 xyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(x, y, y);
    }
    
    public vec3u16 yyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec3(y, y, y);
    }
    
    public vec4u16 xxxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, x, x);
    }
    
    public vec4u16 yxxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, x, x);
    }
    
    public vec4u16 xyxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, x, x);
    }
    
    public vec4u16 yyxx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, x, x);
    }
    
    public vec4u16 xxyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, y, x);
    }
    
    public vec4u16 yxyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, y, x);
    }
    
    public vec4u16 xyyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, y, x);
    }
    
    public vec4u16 yyyx {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, y, x);
    }
    
    public vec4u16 xxxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, x, y);
    }
    
    public vec4u16 yxxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, x, y);
    }
    
    public vec4u16 xyxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, x, y);
    }
    
    public vec4u16 yyxy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, x, y);
    }
    
    public vec4u16 xxyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, x, y, y);
    }
    
    public vec4u16 yxyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, x, y, y);
    }
    
    public vec4u16 xyyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(x, y, y, y);
    }
    
    public vec4u16 yyyy {
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        get => vec4(y, y, y, y);
    }
    
}

public static partial class DMath{
    public static vec2u16 vec2(System.UInt16 x, System.UInt16 y){
        return new vec2u16 () {
            x = x,
            y = y
        };
    }
    
    public static vec2u16 vec2(System.UInt16 e) => vec2(e, e);
}

