<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# var rank = 3;
   string[] tName = ["i", "u", "f"];
   string[] types32 = ["int", "uint", "float"];
   string[] types64 = ["long", "ulong", "double"];

   (int, string[])[] types = [(32, types32), (64, types64)];

   (int, string)[] cis = [(0, "x"), (1, "y")];
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Runtime.CompilerServices;
using System.Runtime.Intrinsics;
using static DualDrill.Mathematics.DMath;

namespace DualDrill.Mathematics;

<# foreach(var (bw, ts) in types) { #>
// <#= bw #>-bit scalar vec types
<#
	foreach(var (n, t) in tName.Zip(ts, (a, b) => (a, b))) 
	{
		var name = $"vec2{n}";
		var dataTypeName = $"Vector{2 * bw}";
#>

public partial struct <#= name #><#= bw #> {
	internal <#= dataTypeName #><<#= t #>> Data;

	public <#= t #> x {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[0];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  <#= dataTypeName #>.Create(value, Data[1]);
		}
	}

	public <#= t #> y {
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		get => Data[1];

		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		set {
			Data =  <#= dataTypeName #>.Create(Data[0], value);
		}
	}
} 

public partial class DMath {
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static <#= name #><#= bw #> vec2(<#= t #> x, <#= t #> y) => new() { Data =  <#= dataTypeName #>.Create(x, y) };

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
	public static <#= name #><#= bw #> vec2(<#= t #> e) => vec2(e, e);

}

<# 
}
}
#>
