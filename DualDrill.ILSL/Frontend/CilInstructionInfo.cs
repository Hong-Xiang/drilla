using System.Reflection;
using System.Reflection.Metadata;
using DualDrill.CLSL.Frontend.SymbolTable;
using DualDrill.CLSL.Language.Declaration;
using DualDrill.CLSL.Language.Literal;
using DualDrill.CLSL.Language.Operation;
using DualDrill.CLSL.Language.Types;
using DualDrill.Common.Nat;
using Lokad.ILPack.IL;

namespace DualDrill.CLSL.Frontend;

public sealed class ParameterNotResolvedException(int Index) : Exception($"Parameter #{Index} not resolved")
{
}

public sealed class VariableNotResolvedException(int Index) : Exception($"Variable #{Index} not resolved")
{
}

public readonly record struct CilInstructionInfo(int Index, int ByteOffset, int NextByteOffset, Instruction Instruction)
{
    public TResult Evaluate<TResult>(ICilInstructionVisitor<TResult> visitor,
        bool isStatic,
        ISymbolTableView table)
    {
        var instruction = Instruction;

        ParameterDeclaration GetParameterByInfo() => table[Symbol.Parameter((ParameterInfo)instruction.Operand)] ??
                                                     throw new KeyNotFoundException();

        ParameterDeclaration GetParameterByIndex(int index) =>
            table[Symbol.Parameter(index)] ??
            throw new ParameterNotResolvedException(index);

        VariableDeclaration GetVariableByInfo() => table[Symbol.Variable((LocalVariableInfo)instruction.Operand)] ??
                                                   throw new KeyNotFoundException();

        VariableDeclaration GetVariableByIndex(int index) =>
            table[Symbol.Variable(index)] ?? throw new VariableNotResolvedException(index);

        MemberDeclaration GetMemberByInfo() =>
            table[(FieldInfo)instruction.Operand] ?? throw new KeyNotFoundException();

        return Instruction.OpCode.ToILOpCode() switch
        {
            ILOpCode.Nop => visitor.VisitNop(this),
            ILOpCode.Break => visitor.VisitBreak(this),
            ILOpCode.Ldarg_0 => isStatic
                ? visitor.VisitLoadArgument(this, GetParameterByIndex(0))
                : visitor.VisitLdThis(this),
            ILOpCode.Ldarg_1 => visitor.VisitLoadArgument(this, GetParameterByIndex(1)),
            ILOpCode.Ldarg_2 => visitor.VisitLoadArgument(this, GetParameterByIndex(2)),
            ILOpCode.Ldarg_3 => visitor.VisitLoadArgument(this, GetParameterByIndex(3)),
            ILOpCode.Ldloc_0 => visitor.VisitLoadLocal(this, GetVariableByIndex(0)),
            ILOpCode.Ldloc_1 => visitor.VisitLoadLocal(this, GetVariableByIndex(1)),
            ILOpCode.Ldloc_2 => visitor.VisitLoadLocal(this, GetVariableByIndex(2)),
            ILOpCode.Ldloc_3 => visitor.VisitLoadLocal(this, GetVariableByIndex(3)),
            ILOpCode.Stloc_0 => visitor.VisitStoreLocal(this, GetVariableByIndex(0)),
            ILOpCode.Stloc_1 => visitor.VisitStoreLocal(this, GetVariableByIndex(1)),
            ILOpCode.Stloc_2 => visitor.VisitStoreLocal(this, GetVariableByIndex(2)),
            ILOpCode.Stloc_3 => visitor.VisitStoreLocal(this, GetVariableByIndex(3)),
            ILOpCode.Ldarg_s => visitor.VisitLoadArgument(this, GetParameterByInfo()),
            ILOpCode.Ldarga_s => visitor.VisitLoadArgumentAddress(this, GetParameterByInfo()),
            ILOpCode.Starg_s => visitor.VisitStoreArgument(this, GetParameterByInfo()),
            ILOpCode.Ldloc_s => visitor.VisitLoadLocal(this, GetVariableByInfo()),
            ILOpCode.Ldloca_s => visitor.VisitLoadLocalAddress(this, GetVariableByInfo()),
            ILOpCode.Stloc_s => visitor.VisitStoreLocal(this, GetVariableByInfo()),
            ILOpCode.Ldnull => visitor.VisitLoadNull(this),
            ILOpCode.Ldc_i4_m1 => visitor.VisitLiteral(this, Literal.Create(-1)),
            ILOpCode.Ldc_i4_0 => visitor.VisitLiteral(this, Literal.Create(0)),
            ILOpCode.Ldc_i4_1 => visitor.VisitLiteral(this, Literal.Create(1)),
            ILOpCode.Ldc_i4_2 => visitor.VisitLiteral(this, Literal.Create(2)),
            ILOpCode.Ldc_i4_3 => visitor.VisitLiteral(this, Literal.Create(3)),
            ILOpCode.Ldc_i4_4 => visitor.VisitLiteral(this, Literal.Create(4)),
            ILOpCode.Ldc_i4_5 => visitor.VisitLiteral(this, Literal.Create(5)),
            ILOpCode.Ldc_i4_6 => visitor.VisitLiteral(this, Literal.Create(6)),
            ILOpCode.Ldc_i4_7 => visitor.VisitLiteral(this, Literal.Create(7)),
            ILOpCode.Ldc_i4_8 => visitor.VisitLiteral(this, Literal.Create(8)),
            ILOpCode.Ldc_i4_s => visitor.VisitLiteral(this, Literal.Create((sbyte)instruction.Operand)),
            ILOpCode.Ldc_i4 => visitor.VisitLiteral(this, Literal.Create((int)instruction.Operand)),
            ILOpCode.Ldc_i8 => visitor.VisitLiteral(this, Literal.Create((long)instruction.Operand)),
            ILOpCode.Ldc_r4 => visitor.VisitLiteral(this, Literal.Create((float)instruction.Operand)),
            ILOpCode.Ldc_r8 => visitor.VisitLiteral(this, Literal.Create((double)instruction.Operand)),
            ILOpCode.Dup => visitor.VisitDup(this),
            ILOpCode.Pop => visitor.VisitPop(this),
            ILOpCode.Jmp => throw new NotImplementedException(),
            ILOpCode.Call => visitor.VisitCall(this,
                table[Symbol.Function((MethodInfo)instruction.Operand)] ??
                throw new KeyNotFoundException($"method {instruction.Operand} not found in symbol table")),
            ILOpCode.Calli => throw new NotSupportedException(),
            ILOpCode.Ret => visitor.VisitReturn(this),
            ILOpCode.Br_s => visitor.VisitBranch(this, (sbyte)instruction.Operand),
            ILOpCode.Brfalse_s => visitor.VisitBranchIf(this, (sbyte)instruction.Operand, false),
            ILOpCode.Brtrue_s => visitor.VisitBranchIf(this, (sbyte)instruction.Operand, true),
            ILOpCode.Beq_s => visitor.VisitBranchIf<BinaryRelational.Eq>(this, (sbyte)instruction.Operand),
            ILOpCode.Bge_s => visitor.VisitBranchIf<BinaryRelational.Ge>(this, (sbyte)instruction.Operand),
            ILOpCode.Bgt_s => visitor.VisitBranchIf<BinaryRelational.Gt>(this, (sbyte)instruction.Operand),
            ILOpCode.Ble_s => visitor.VisitBranchIf<BinaryRelational.Le>(this, (sbyte)instruction.Operand),
            ILOpCode.Blt_s => visitor.VisitBranchIf<BinaryRelational.Lt>(this, (sbyte)instruction.Operand),
            ILOpCode.Bne_un_s => visitor.VisitBranchIf<BinaryRelational.Ne>(this, (sbyte)instruction.Operand,
                true),
            ILOpCode.Bge_un_s => visitor.VisitBranchIf<BinaryRelational.Ge>(this, (sbyte)instruction.Operand,
                true),
            ILOpCode.Bgt_un_s => visitor.VisitBranchIf<BinaryRelational.Gt>(this, (sbyte)instruction.Operand,
                true),
            ILOpCode.Ble_un_s => visitor.VisitBranchIf<BinaryRelational.Le>(this, (sbyte)instruction.Operand,
                true),
            ILOpCode.Blt_un_s => visitor.VisitBranchIf<BinaryRelational.Lt>(this, (sbyte)instruction.Operand,
                true),
            ILOpCode.Br => visitor.VisitBranch(this, (int)instruction.Operand),
            ILOpCode.Brfalse => visitor.VisitBranchIf(this, (int)instruction.Operand, false),
            ILOpCode.Brtrue => visitor.VisitBranchIf(this, (int)instruction.Operand, true),
            ILOpCode.Beq => visitor.VisitBranchIf<BinaryRelational.Eq>(this, (int)instruction.Operand),
            ILOpCode.Bge => visitor.VisitBranchIf<BinaryRelational.Ge>(this, (int)instruction.Operand),
            ILOpCode.Bgt => visitor.VisitBranchIf<BinaryRelational.Gt>(this, (int)instruction.Operand),
            ILOpCode.Ble => visitor.VisitBranchIf<BinaryRelational.Le>(this, (int)instruction.Operand),
            ILOpCode.Blt => visitor.VisitBranchIf<BinaryRelational.Lt>(this, (int)instruction.Operand),
            ILOpCode.Bne_un => visitor.VisitBranchIf<BinaryRelational.Ne>(this, (int)instruction.Operand,
                true),
            ILOpCode.Bge_un => visitor.VisitBranchIf<BinaryRelational.Ge>(this, (int)instruction.Operand,
                true),
            ILOpCode.Bgt_un => visitor.VisitBranchIf<BinaryRelational.Gt>(this, (int)instruction.Operand,
                true),
            ILOpCode.Ble_un => visitor.VisitBranchIf<BinaryRelational.Le>(this, (int)instruction.Operand,
                true),
            ILOpCode.Blt_un => visitor.VisitBranchIf<BinaryRelational.Lt>(this, (int)instruction.Operand,
                true),
            ILOpCode.Switch => visitor.VisitSwitch(this),
            ILOpCode.Ldind_i1 => visitor.VisitLoadIndirect<IntType<N8>>(this),
            ILOpCode.Ldind_u1 => visitor.VisitLoadIndirect<UIntType<N8>>(this),
            ILOpCode.Ldind_i2 => throw new NotImplementedException(),
            ILOpCode.Ldind_u2 => throw new NotImplementedException(),
            ILOpCode.Ldind_i4 => throw new NotImplementedException(),
            ILOpCode.Ldind_u4 => throw new NotImplementedException(),
            ILOpCode.Ldind_i8 => throw new NotImplementedException(),
            ILOpCode.Ldind_i => visitor.VisitLoadIndirectNativeInt(this),
            ILOpCode.Ldind_r4 => visitor.VisitLoadIndirect<FloatType<N32>>(this),
            ILOpCode.Ldind_r8 => throw new NotImplementedException(),
            ILOpCode.Ldind_ref => visitor.VisitLoadIndirectRef(this),
            ILOpCode.Stind_ref => visitor.VisitStoreIndirectRef(this),
            ILOpCode.Stind_i1 => throw new NotImplementedException(),
            ILOpCode.Stind_i2 => throw new NotImplementedException(),
            ILOpCode.Stind_i4 => throw new NotImplementedException(),
            ILOpCode.Stind_i8 => throw new NotImplementedException(),
            ILOpCode.Stind_r4 => visitor.VisitStoreIndirect<FloatType<N32>>(this),
            ILOpCode.Stind_r8 => throw new NotImplementedException(),
            ILOpCode.Add => visitor.VisitBinaryArithmetic<BinaryArithmetic.Add>(this),
            ILOpCode.Sub => visitor.VisitBinaryArithmetic<BinaryArithmetic.Sub>(this),
            ILOpCode.Mul => visitor.VisitBinaryArithmetic<BinaryArithmetic.Mul>(this),
            ILOpCode.Div => visitor.VisitBinaryArithmetic<BinaryArithmetic.Div>(this),
            ILOpCode.Div_un => visitor.VisitBinaryArithmetic<BinaryArithmetic.Div>(this, true),
            ILOpCode.Rem => visitor.VisitBinaryArithmetic<BinaryArithmetic.Rem>(this),
            ILOpCode.Rem_un => visitor.VisitBinaryArithmetic<BinaryArithmetic.Rem>(this, true),
            ILOpCode.And => visitor.VisitBinaryLogical<LogicalAnd>(this),
            ILOpCode.Or => visitor.VisitBinaryLogical<LogicalOr>(this),
            ILOpCode.Xor => visitor.VisitBinaryLogical<LogicalXor>(this),
            ILOpCode.Shl => throw new NotImplementedException(),
            ILOpCode.Shr => throw new NotImplementedException(),
            ILOpCode.Shr_un => throw new NotImplementedException(),
            ILOpCode.Neg => visitor.VisitUnaryArithmetic<UnaryArithmetic.Negate>(this),
            ILOpCode.Not => visitor.VisitLogicalNot(this),
            ILOpCode.Conv_i1 => visitor.VisitConversion<IntType<N8>>(this),
            ILOpCode.Conv_i2 => visitor.VisitConversion<IntType<N16>>(this),
            ILOpCode.Conv_i4 => visitor.VisitConversion<IntType<N32>>(this),
            ILOpCode.Conv_i8 => visitor.VisitConversion<IntType<N64>>(this),
            ILOpCode.Conv_r4 => visitor.VisitConversion<FloatType<N32>>(this),
            ILOpCode.Conv_r8 => visitor.VisitConversion<FloatType<N64>>(this),
            ILOpCode.Conv_u4 => visitor.VisitConversion<UIntType<N32>>(this),
            ILOpCode.Conv_u8 => visitor.VisitConversion<UIntType<N64>>(this),
            ILOpCode.Callvirt => throw new NotImplementedException(),
            ILOpCode.Cpobj => throw new NotImplementedException(),
            ILOpCode.Ldobj => throw new NotImplementedException(),
            ILOpCode.Ldstr => throw new NotImplementedException(),
            ILOpCode.Newobj => visitor.VisitNewObject(this,
                table[Symbol.Function((ConstructorInfo)instruction.Operand)] ?? throw new NotSupportedException()),
            ILOpCode.Castclass => throw new NotImplementedException(),
            ILOpCode.Isinst => throw new NotImplementedException(),
            ILOpCode.Conv_r_un => throw new NotImplementedException(),
            ILOpCode.Unbox => throw new NotImplementedException(),
            ILOpCode.Throw => throw new NotImplementedException(),
            ILOpCode.Ldfld => visitor.VisitLoadField(this, GetMemberByInfo()),
            ILOpCode.Ldflda => visitor.VisitLoadFieldAddress(this, GetMemberByInfo()),
            ILOpCode.Stfld => visitor.VisitStoreField(this, GetMemberByInfo()),
            ILOpCode.Ldsfld => visitor.VisitLoadStaticField(this,
                table[Symbol.Variable((FieldInfo)instruction.Operand)] ?? throw new NotSupportedException()),
            ILOpCode.Ldsflda => visitor.VisitLoadStaticFieldAddress(this,
                table[Symbol.Variable((FieldInfo)instruction.Operand)] ?? throw new NotSupportedException()),
            ILOpCode.Stsfld => throw new NotImplementedException(),
            ILOpCode.Stobj => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_i1_un => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_i2_un => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_i4_un => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_i8_un => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_u1_un => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_u2_un => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_u4_un => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_u8_un => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_i_un => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_u_un => throw new NotImplementedException(),
            ILOpCode.Box => throw new NotImplementedException(),
            ILOpCode.Newarr => throw new NotImplementedException(),
            ILOpCode.Ldlen => throw new NotImplementedException(),
            ILOpCode.Ldelema => throw new NotImplementedException(),
            ILOpCode.Ldelem_i1 => throw new NotImplementedException(),
            ILOpCode.Ldelem_u1 => throw new NotImplementedException(),
            ILOpCode.Ldelem_i2 => throw new NotImplementedException(),
            ILOpCode.Ldelem_u2 => throw new NotImplementedException(),
            ILOpCode.Ldelem_i4 => throw new NotImplementedException(),
            ILOpCode.Ldelem_u4 => throw new NotImplementedException(),
            ILOpCode.Ldelem_i8 => throw new NotImplementedException(),
            ILOpCode.Ldelem_i => throw new NotImplementedException(),
            ILOpCode.Ldelem_r4 => throw new NotImplementedException(),
            ILOpCode.Ldelem_r8 => throw new NotImplementedException(),
            ILOpCode.Ldelem_ref => throw new NotImplementedException(),
            ILOpCode.Stelem_i => throw new NotImplementedException(),
            ILOpCode.Stelem_i1 => throw new NotImplementedException(),
            ILOpCode.Stelem_i2 => throw new NotImplementedException(),
            ILOpCode.Stelem_i4 => throw new NotImplementedException(),
            ILOpCode.Stelem_i8 => throw new NotImplementedException(),
            ILOpCode.Stelem_r4 => throw new NotImplementedException(),
            ILOpCode.Stelem_r8 => throw new NotImplementedException(),
            ILOpCode.Stelem_ref => throw new NotImplementedException(),
            ILOpCode.Ldelem => throw new NotImplementedException(),
            ILOpCode.Stelem => throw new NotImplementedException(),
            ILOpCode.Unbox_any => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_i1 => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_u1 => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_i2 => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_u2 => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_i4 => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_u4 => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_i8 => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_u8 => throw new NotImplementedException(),
            ILOpCode.Refanyval => throw new NotImplementedException(),
            ILOpCode.Ckfinite => throw new NotImplementedException(),
            ILOpCode.Mkrefany => throw new NotImplementedException(),
            ILOpCode.Ldtoken => throw new NotImplementedException(),
            ILOpCode.Conv_u2 => throw new NotImplementedException(),
            ILOpCode.Conv_u1 => throw new NotImplementedException(),
            ILOpCode.Conv_i => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_i => throw new NotImplementedException(),
            ILOpCode.Conv_ovf_u => throw new NotImplementedException(),
            ILOpCode.Add_ovf => throw new NotImplementedException(),
            ILOpCode.Add_ovf_un => throw new NotImplementedException(),
            ILOpCode.Mul_ovf => throw new NotImplementedException(),
            ILOpCode.Mul_ovf_un => throw new NotImplementedException(),
            ILOpCode.Sub_ovf => throw new NotImplementedException(),
            ILOpCode.Sub_ovf_un => throw new NotImplementedException(),
            ILOpCode.Endfinally => throw new NotImplementedException(),
            ILOpCode.Leave => throw new NotImplementedException(),
            ILOpCode.Leave_s => throw new NotImplementedException(),
            ILOpCode.Stind_i => throw new NotImplementedException(),
            ILOpCode.Conv_u => throw new NotImplementedException(),

            ILOpCode.Arglist => throw new NotImplementedException(),
            ILOpCode.Ceq => visitor.VisitBinaryRelation<BinaryRelational.Eq>(this),
            ILOpCode.Cgt => visitor.VisitBinaryRelation<BinaryRelational.Gt>(this),
            ILOpCode.Cgt_un => visitor.VisitBinaryRelation<BinaryRelational.Gt>(this, true),
            ILOpCode.Clt => visitor.VisitBinaryRelation<BinaryRelational.Lt>(this),
            ILOpCode.Clt_un => visitor.VisitBinaryRelation<BinaryRelational.Lt>(this, true),
            ILOpCode.Ldftn => throw new NotImplementedException(),
            ILOpCode.Ldvirtftn => throw new NotImplementedException(),
            ILOpCode.Ldarg => visitor.VisitLoadArgument(this, GetParameterByInfo()),
            ILOpCode.Ldarga => visitor.VisitLoadArgumentAddress(this, GetParameterByInfo()),
            ILOpCode.Starg => visitor.VisitStoreArgument(this, GetParameterByInfo()),
            ILOpCode.Ldloc => visitor.VisitLoadLocal(this, GetVariableByInfo()),
            ILOpCode.Ldloca => visitor.VisitLoadLocalAddress(this, GetVariableByInfo()),
            ILOpCode.Stloc => visitor.VisitStoreLocal(this, GetVariableByInfo()),
            ILOpCode.Localloc => throw new NotImplementedException(),
            ILOpCode.Endfilter => throw new NotImplementedException(),
            ILOpCode.Unaligned => throw new NotImplementedException(),
            ILOpCode.Volatile => throw new NotImplementedException(),
            ILOpCode.Tail => throw new NotImplementedException(),
            // TODO: properly handle init obj
            ILOpCode.Initobj => visitor.VisitPop(this),
            ILOpCode.Constrained => throw new NotImplementedException(),
            ILOpCode.Cpblk => throw new NotImplementedException(),
            ILOpCode.Initblk => throw new NotImplementedException(),
            ILOpCode.Rethrow => throw new NotImplementedException(),
            ILOpCode.Sizeof => throw new NotImplementedException(),
            ILOpCode.Refanytype => throw new NotImplementedException(),
            ILOpCode.Readonly => throw new NotImplementedException(),
            _ => throw new NotSupportedException($"Unsupported ILOpCode {Instruction.OpCode.ToILOpCode()}")
        };
    }
}