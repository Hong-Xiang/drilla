{
    "idl": [
        [
            "GPUObjectBase",
            [
                {
                    "type": "interface mixin",
                    "name": "GPUObjectBase",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "label",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "USVString"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUObjectDescriptorBase",
            [
                {
                    "type": "dictionary",
                    "name": "GPUObjectDescriptorBase",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "label",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "USVString"
                            },
                            "default": {
                                "type": "string",
                                "value": ""
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUSupportedLimits",
            [
                {
                    "type": "interface",
                    "name": "GPUSupportedLimits",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "maxTextureDimension1D",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxTextureDimension2D",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxTextureDimension3D",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxTextureArrayLayers",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxBindGroups",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxBindGroupsPlusVertexBuffers",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxBindingsPerBindGroup",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxDynamicUniformBuffersPerPipelineLayout",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxDynamicStorageBuffersPerPipelineLayout",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxSampledTexturesPerShaderStage",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxSamplersPerShaderStage",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxStorageBuffersPerShaderStage",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxStorageTexturesPerShaderStage",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxUniformBuffersPerShaderStage",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxUniformBufferBindingSize",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxStorageBufferBindingSize",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "minUniformBufferOffsetAlignment",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "minStorageBufferOffsetAlignment",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxVertexBuffers",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxBufferSize",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxVertexAttributes",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxVertexBufferArrayStride",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxInterStageShaderComponents",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxInterStageShaderVariables",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxColorAttachments",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxColorAttachmentBytesPerSample",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxComputeWorkgroupStorageSize",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxComputeInvocationsPerWorkgroup",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxComputeWorkgroupSizeX",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxComputeWorkgroupSizeY",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxComputeWorkgroupSizeZ",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "maxComputeWorkgroupsPerDimension",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUSupportedFeatures",
            [
                {
                    "type": "interface",
                    "name": "GPUSupportedFeatures",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "setlike",
                            "idlType": [
                                {
                                    "type": null,
                                    "extAttrs": [],
                                    "generic": "",
                                    "nullable": false,
                                    "union": false,
                                    "idlType": "DOMString"
                                }
                            ],
                            "arguments": [],
                            "extAttrs": [],
                            "readonly": true,
                            "async": false
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "WGSLLanguageFeatures",
            [
                {
                    "type": "interface",
                    "name": "WGSLLanguageFeatures",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "setlike",
                            "idlType": [
                                {
                                    "type": null,
                                    "extAttrs": [],
                                    "generic": "",
                                    "nullable": false,
                                    "union": false,
                                    "idlType": "DOMString"
                                }
                            ],
                            "arguments": [],
                            "extAttrs": [],
                            "readonly": true,
                            "async": false
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUAdapterInfo",
            [
                {
                    "type": "interface",
                    "name": "GPUAdapterInfo",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "vendor",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "DOMString"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "architecture",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "DOMString"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "device",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "DOMString"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "description",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "DOMString"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "NavigatorGPU",
            [
                {
                    "type": "interface mixin",
                    "name": "NavigatorGPU",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "gpu",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPU"
                            },
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "SameObject",
                                    "rhs": null,
                                    "arguments": []
                                },
                                {
                                    "type": "extended-attribute",
                                    "name": "SecureContext",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "Navigator",
            [
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "Navigator",
                    "includes": "NavigatorGPU"
                }
            ]
        ],
        [
            "WorkerNavigator",
            [
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "WorkerNavigator",
                    "includes": "NavigatorGPU"
                }
            ]
        ],
        [
            "GPU",
            [
                {
                    "type": "interface",
                    "name": "GPU",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "requestAdapter",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "return-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": true,
                                        "union": false,
                                        "idlType": "GPUAdapter"
                                    }
                                ]
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "options",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPURequestAdapterOptions"
                                    },
                                    "default": {
                                        "type": "dictionary"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "getPreferredCanvasFormat",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureFormat"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "attribute",
                            "name": "wgslLanguageFeatures",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "WGSLLanguageFeatures"
                            },
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "SameObject",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPURequestAdapterOptions",
            [
                {
                    "type": "dictionary",
                    "name": "GPURequestAdapterOptions",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "powerPreference",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUPowerPreference"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "forceFallbackAdapter",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUPowerPreference",
            [
                {
                    "type": "enum",
                    "name": "GPUPowerPreference",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "low-power"
                        },
                        {
                            "type": "enum-value",
                            "value": "high-performance"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUAdapter",
            [
                {
                    "type": "interface",
                    "name": "GPUAdapter",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "features",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSupportedFeatures"
                            },
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "SameObject",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "limits",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSupportedLimits"
                            },
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "SameObject",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "isFallbackAdapter",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "operation",
                            "name": "requestDevice",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "return-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUDevice"
                                    }
                                ]
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUDeviceDescriptor"
                                    },
                                    "default": {
                                        "type": "dictionary"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "requestAdapterInfo",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "return-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUAdapterInfo"
                                    }
                                ]
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUDeviceDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUDeviceDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "requiredFeatures",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUFeatureName"
                                    }
                                ]
                            },
                            "default": {
                                "type": "sequence",
                                "value": []
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "requiredLimits",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "record",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "DOMString"
                                    },
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    }
                                ]
                            },
                            "default": {
                                "type": "dictionary"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "defaultQueue",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUQueueDescriptor"
                            },
                            "default": {
                                "type": "dictionary"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUFeatureName",
            [
                {
                    "type": "enum",
                    "name": "GPUFeatureName",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "depth-clip-control"
                        },
                        {
                            "type": "enum-value",
                            "value": "depth32float-stencil8"
                        },
                        {
                            "type": "enum-value",
                            "value": "texture-compression-bc"
                        },
                        {
                            "type": "enum-value",
                            "value": "texture-compression-etc2"
                        },
                        {
                            "type": "enum-value",
                            "value": "texture-compression-astc"
                        },
                        {
                            "type": "enum-value",
                            "value": "timestamp-query"
                        },
                        {
                            "type": "enum-value",
                            "value": "indirect-first-instance"
                        },
                        {
                            "type": "enum-value",
                            "value": "shader-f16"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg11b10ufloat-renderable"
                        },
                        {
                            "type": "enum-value",
                            "value": "bgra8unorm-storage"
                        },
                        {
                            "type": "enum-value",
                            "value": "float32-filterable"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUDevice",
            [
                {
                    "type": "interface",
                    "name": "GPUDevice",
                    "inheritance": "EventTarget",
                    "members": [
                        {
                            "type": "attribute",
                            "name": "features",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSupportedFeatures"
                            },
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "SameObject",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "limits",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSupportedLimits"
                            },
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "SameObject",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "queue",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUQueue"
                            },
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "SameObject",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "operation",
                            "name": "destroy",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createBuffer",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBuffer"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBufferDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createTexture",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTexture"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUTextureDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createSampler",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSampler"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSamplerDescriptor"
                                    },
                                    "default": {
                                        "type": "dictionary"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "importExternalTexture",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUExternalTexture"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUExternalTextureDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createBindGroupLayout",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBindGroupLayout"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBindGroupLayoutDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createPipelineLayout",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUPipelineLayout"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUPipelineLayoutDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createBindGroup",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBindGroup"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBindGroupDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createShaderModule",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUShaderModule"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUShaderModuleDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createComputePipeline",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUComputePipeline"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUComputePipelineDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createRenderPipeline",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPURenderPipeline"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPURenderPipelineDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createComputePipelineAsync",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "return-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUComputePipeline"
                                    }
                                ]
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUComputePipelineDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createRenderPipelineAsync",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "return-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPURenderPipeline"
                                    }
                                ]
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPURenderPipelineDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createCommandEncoder",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUCommandEncoder"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUCommandEncoderDescriptor"
                                    },
                                    "default": {
                                        "type": "dictionary"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createRenderBundleEncoder",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPURenderBundleEncoder"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPURenderBundleEncoderDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "createQuerySet",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUQuerySet"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUQuerySetDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUDevice",
                    "includes": "GPUObjectBase"
                },
                {
                    "type": "interface",
                    "name": "GPUDevice",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "lost",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "attribute-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUDeviceLostInfo"
                                    }
                                ]
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": true
                },
                {
                    "type": "interface",
                    "name": "GPUDevice",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "pushErrorScope",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "filter",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUErrorFilter"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "popErrorScope",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "return-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": true,
                                        "union": false,
                                        "idlType": "GPUError"
                                    }
                                ]
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [],
                    "partial": true
                },
                {
                    "type": "interface",
                    "name": "GPUDevice",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "onuncapturederror",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "EventHandler"
                            },
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "Exposed",
                                    "rhs": {
                                        "type": "identifier-list",
                                        "value": [
                                            {
                                                "value": "Window"
                                            },
                                            {
                                                "value": "Worker"
                                            }
                                        ]
                                    },
                                    "arguments": []
                                }
                            ],
                            "special": "",
                            "readonly": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": true
                }
            ]
        ],
        [
            "GPUBuffer",
            [
                {
                    "type": "interface",
                    "name": "GPUBuffer",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "size",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize64Out"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "usage",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "mapState",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBufferMapState"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "operation",
                            "name": "mapAsync",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "return-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "undefined"
                                    }
                                ]
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "mode",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUMapModeFlags"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "offset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "size",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "getMappedRange",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "ArrayBuffer"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "offset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "size",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "unmap",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "destroy",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUBuffer",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUBufferMapState",
            [
                {
                    "type": "enum",
                    "name": "GPUBufferMapState",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "unmapped"
                        },
                        {
                            "type": "enum-value",
                            "value": "pending"
                        },
                        {
                            "type": "enum-value",
                            "value": "mapped"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUBufferDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUBufferDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "size",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize64"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "usage",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBufferUsageFlags"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "mappedAtCreation",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBufferUsageFlags",
            [
                {
                    "type": "typedef",
                    "name": "GPUBufferUsageFlags",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUBufferUsage",
            [
                {
                    "type": "namespace",
                    "name": "GPUBufferUsage",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "const",
                            "name": "MAP_READ",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0001"
                            }
                        },
                        {
                            "type": "const",
                            "name": "MAP_WRITE",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0002"
                            }
                        },
                        {
                            "type": "const",
                            "name": "COPY_SRC",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0004"
                            }
                        },
                        {
                            "type": "const",
                            "name": "COPY_DST",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0008"
                            }
                        },
                        {
                            "type": "const",
                            "name": "INDEX",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0010"
                            }
                        },
                        {
                            "type": "const",
                            "name": "VERTEX",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0020"
                            }
                        },
                        {
                            "type": "const",
                            "name": "UNIFORM",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0040"
                            }
                        },
                        {
                            "type": "const",
                            "name": "STORAGE",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0080"
                            }
                        },
                        {
                            "type": "const",
                            "name": "INDIRECT",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0100"
                            }
                        },
                        {
                            "type": "const",
                            "name": "QUERY_RESOLVE",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0200"
                            }
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUMapModeFlags",
            [
                {
                    "type": "typedef",
                    "name": "GPUMapModeFlags",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUMapMode",
            [
                {
                    "type": "namespace",
                    "name": "GPUMapMode",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "const",
                            "name": "READ",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0001"
                            }
                        },
                        {
                            "type": "const",
                            "name": "WRITE",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x0002"
                            }
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUTexture",
            [
                {
                    "type": "interface",
                    "name": "GPUTexture",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "createView",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureView"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUTextureViewDescriptor"
                                    },
                                    "default": {
                                        "type": "dictionary"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "destroy",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "attribute",
                            "name": "width",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinateOut"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "height",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinateOut"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "depthOrArrayLayers",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinateOut"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "mipLevelCount",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinateOut"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "sampleCount",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32Out"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "dimension",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureDimension"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "format",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureFormat"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "usage",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUTexture",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUTextureDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUTextureDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "size",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUExtent3D"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "mipLevelCount",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "1"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "sampleCount",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32"
                            },
                            "default": {
                                "type": "number",
                                "value": "1"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "dimension",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureDimension"
                            },
                            "default": {
                                "type": "string",
                                "value": "2d"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "format",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureFormat"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "usage",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureUsageFlags"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "viewFormats",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUTextureFormat"
                                    }
                                ]
                            },
                            "default": {
                                "type": "sequence",
                                "value": []
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUTextureDimension",
            [
                {
                    "type": "enum",
                    "name": "GPUTextureDimension",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "1d"
                        },
                        {
                            "type": "enum-value",
                            "value": "2d"
                        },
                        {
                            "type": "enum-value",
                            "value": "3d"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUTextureUsageFlags",
            [
                {
                    "type": "typedef",
                    "name": "GPUTextureUsageFlags",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUTextureUsage",
            [
                {
                    "type": "namespace",
                    "name": "GPUTextureUsage",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "const",
                            "name": "COPY_SRC",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x01"
                            }
                        },
                        {
                            "type": "const",
                            "name": "COPY_DST",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x02"
                            }
                        },
                        {
                            "type": "const",
                            "name": "TEXTURE_BINDING",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x04"
                            }
                        },
                        {
                            "type": "const",
                            "name": "STORAGE_BINDING",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x08"
                            }
                        },
                        {
                            "type": "const",
                            "name": "RENDER_ATTACHMENT",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x10"
                            }
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUTextureView",
            [
                {
                    "type": "interface",
                    "name": "GPUTextureView",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUTextureView",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUTextureViewDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUTextureViewDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "format",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureFormat"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "dimension",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureViewDimension"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "aspect",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureAspect"
                            },
                            "default": {
                                "type": "string",
                                "value": "all"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "baseMipLevel",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "mipLevelCount",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "baseArrayLayer",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "arrayLayerCount",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": null,
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUTextureViewDimension",
            [
                {
                    "type": "enum",
                    "name": "GPUTextureViewDimension",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "1d"
                        },
                        {
                            "type": "enum-value",
                            "value": "2d"
                        },
                        {
                            "type": "enum-value",
                            "value": "2d-array"
                        },
                        {
                            "type": "enum-value",
                            "value": "cube"
                        },
                        {
                            "type": "enum-value",
                            "value": "cube-array"
                        },
                        {
                            "type": "enum-value",
                            "value": "3d"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUTextureAspect",
            [
                {
                    "type": "enum",
                    "name": "GPUTextureAspect",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "all"
                        },
                        {
                            "type": "enum-value",
                            "value": "stencil-only"
                        },
                        {
                            "type": "enum-value",
                            "value": "depth-only"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUTextureFormat",
            [
                {
                    "type": "enum",
                    "name": "GPUTextureFormat",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "r8unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "r8snorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "r8uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "r8sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "r16uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "r16sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "r16float"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg8unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg8snorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg8uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg8sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "r32uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "r32sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "r32float"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg16uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg16sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg16float"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba8unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba8unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba8snorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba8uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba8sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "bgra8unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "bgra8unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgb9e5ufloat"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgb10a2uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgb10a2unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg11b10ufloat"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg32uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg32sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rg32float"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba16uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba16sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba16float"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba32uint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba32sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "rgba32float"
                        },
                        {
                            "type": "enum-value",
                            "value": "stencil8"
                        },
                        {
                            "type": "enum-value",
                            "value": "depth16unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "depth24plus"
                        },
                        {
                            "type": "enum-value",
                            "value": "depth24plus-stencil8"
                        },
                        {
                            "type": "enum-value",
                            "value": "depth32float"
                        },
                        {
                            "type": "enum-value",
                            "value": "depth32float-stencil8"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc1-rgba-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc1-rgba-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc2-rgba-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc2-rgba-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc3-rgba-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc3-rgba-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc4-r-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc4-r-snorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc5-rg-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc5-rg-snorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc6h-rgb-ufloat"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc6h-rgb-float"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc7-rgba-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "bc7-rgba-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "etc2-rgb8unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "etc2-rgb8unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "etc2-rgb8a1unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "etc2-rgb8a1unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "etc2-rgba8unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "etc2-rgba8unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "eac-r11unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "eac-r11snorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "eac-rg11unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "eac-rg11snorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-4x4-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-4x4-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-5x4-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-5x4-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-5x5-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-5x5-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-6x5-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-6x5-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-6x6-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-6x6-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-8x5-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-8x5-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-8x6-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-8x6-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-8x8-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-8x8-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-10x5-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-10x5-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-10x6-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-10x6-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-10x8-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-10x8-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-10x10-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-10x10-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-12x10-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-12x10-unorm-srgb"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-12x12-unorm"
                        },
                        {
                            "type": "enum-value",
                            "value": "astc-12x12-unorm-srgb"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUExternalTexture",
            [
                {
                    "type": "interface",
                    "name": "GPUExternalTexture",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUExternalTexture",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUExternalTextureDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUExternalTextureDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "source",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": true,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "HTMLVideoElement"
                                    },
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "VideoFrame"
                                    }
                                ]
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "colorSpace",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "PredefinedColorSpace"
                            },
                            "default": {
                                "type": "string",
                                "value": "srgb"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUSampler",
            [
                {
                    "type": "interface",
                    "name": "GPUSampler",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUSampler",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUSamplerDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUSamplerDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "addressModeU",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUAddressMode"
                            },
                            "default": {
                                "type": "string",
                                "value": "clamp-to-edge"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "addressModeV",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUAddressMode"
                            },
                            "default": {
                                "type": "string",
                                "value": "clamp-to-edge"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "addressModeW",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUAddressMode"
                            },
                            "default": {
                                "type": "string",
                                "value": "clamp-to-edge"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "magFilter",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFilterMode"
                            },
                            "default": {
                                "type": "string",
                                "value": "nearest"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "minFilter",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFilterMode"
                            },
                            "default": {
                                "type": "string",
                                "value": "nearest"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "mipmapFilter",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUMipmapFilterMode"
                            },
                            "default": {
                                "type": "string",
                                "value": "nearest"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "lodMinClamp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "float"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "lodMaxClamp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "float"
                            },
                            "default": {
                                "type": "number",
                                "value": "32"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "compare",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUCompareFunction"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "maxAnisotropy",
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "Clamp",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned short"
                            },
                            "default": {
                                "type": "number",
                                "value": "1"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUAddressMode",
            [
                {
                    "type": "enum",
                    "name": "GPUAddressMode",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "clamp-to-edge"
                        },
                        {
                            "type": "enum-value",
                            "value": "repeat"
                        },
                        {
                            "type": "enum-value",
                            "value": "mirror-repeat"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUFilterMode",
            [
                {
                    "type": "enum",
                    "name": "GPUFilterMode",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "nearest"
                        },
                        {
                            "type": "enum-value",
                            "value": "linear"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUMipmapFilterMode",
            [
                {
                    "type": "enum",
                    "name": "GPUMipmapFilterMode",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "nearest"
                        },
                        {
                            "type": "enum-value",
                            "value": "linear"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUCompareFunction",
            [
                {
                    "type": "enum",
                    "name": "GPUCompareFunction",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "never"
                        },
                        {
                            "type": "enum-value",
                            "value": "less"
                        },
                        {
                            "type": "enum-value",
                            "value": "equal"
                        },
                        {
                            "type": "enum-value",
                            "value": "less-equal"
                        },
                        {
                            "type": "enum-value",
                            "value": "greater"
                        },
                        {
                            "type": "enum-value",
                            "value": "not-equal"
                        },
                        {
                            "type": "enum-value",
                            "value": "greater-equal"
                        },
                        {
                            "type": "enum-value",
                            "value": "always"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUBindGroupLayout",
            [
                {
                    "type": "interface",
                    "name": "GPUBindGroupLayout",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUBindGroupLayout",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUBindGroupLayoutDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUBindGroupLayoutDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "entries",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBindGroupLayoutEntry"
                                    }
                                ]
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBindGroupLayoutEntry",
            [
                {
                    "type": "dictionary",
                    "name": "GPUBindGroupLayoutEntry",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "binding",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIndex32"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "visibility",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUShaderStageFlags"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "buffer",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBufferBindingLayout"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "sampler",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSamplerBindingLayout"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "texture",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureBindingLayout"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "storageTexture",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStorageTextureBindingLayout"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "externalTexture",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUExternalTextureBindingLayout"
                            },
                            "default": null,
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUShaderStageFlags",
            [
                {
                    "type": "typedef",
                    "name": "GPUShaderStageFlags",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUShaderStage",
            [
                {
                    "type": "namespace",
                    "name": "GPUShaderStage",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "const",
                            "name": "VERTEX",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x1"
                            }
                        },
                        {
                            "type": "const",
                            "name": "FRAGMENT",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x2"
                            }
                        },
                        {
                            "type": "const",
                            "name": "COMPUTE",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x4"
                            }
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBufferBindingType",
            [
                {
                    "type": "enum",
                    "name": "GPUBufferBindingType",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "uniform"
                        },
                        {
                            "type": "enum-value",
                            "value": "storage"
                        },
                        {
                            "type": "enum-value",
                            "value": "read-only-storage"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUBufferBindingLayout",
            [
                {
                    "type": "dictionary",
                    "name": "GPUBufferBindingLayout",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "type",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBufferBindingType"
                            },
                            "default": {
                                "type": "string",
                                "value": "uniform"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "hasDynamicOffset",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "minBindingSize",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize64"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUSamplerBindingType",
            [
                {
                    "type": "enum",
                    "name": "GPUSamplerBindingType",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "filtering"
                        },
                        {
                            "type": "enum-value",
                            "value": "non-filtering"
                        },
                        {
                            "type": "enum-value",
                            "value": "comparison"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUSamplerBindingLayout",
            [
                {
                    "type": "dictionary",
                    "name": "GPUSamplerBindingLayout",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "type",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSamplerBindingType"
                            },
                            "default": {
                                "type": "string",
                                "value": "filtering"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUTextureSampleType",
            [
                {
                    "type": "enum",
                    "name": "GPUTextureSampleType",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "float"
                        },
                        {
                            "type": "enum-value",
                            "value": "unfilterable-float"
                        },
                        {
                            "type": "enum-value",
                            "value": "depth"
                        },
                        {
                            "type": "enum-value",
                            "value": "sint"
                        },
                        {
                            "type": "enum-value",
                            "value": "uint"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUTextureBindingLayout",
            [
                {
                    "type": "dictionary",
                    "name": "GPUTextureBindingLayout",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "sampleType",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureSampleType"
                            },
                            "default": {
                                "type": "string",
                                "value": "float"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "viewDimension",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureViewDimension"
                            },
                            "default": {
                                "type": "string",
                                "value": "2d"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "multisampled",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUStorageTextureAccess",
            [
                {
                    "type": "enum",
                    "name": "GPUStorageTextureAccess",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "write-only"
                        },
                        {
                            "type": "enum-value",
                            "value": "read-only"
                        },
                        {
                            "type": "enum-value",
                            "value": "read-write"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUStorageTextureBindingLayout",
            [
                {
                    "type": "dictionary",
                    "name": "GPUStorageTextureBindingLayout",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "access",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStorageTextureAccess"
                            },
                            "default": {
                                "type": "string",
                                "value": "write-only"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "format",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureFormat"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "viewDimension",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureViewDimension"
                            },
                            "default": {
                                "type": "string",
                                "value": "2d"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUExternalTextureBindingLayout",
            [
                {
                    "type": "dictionary",
                    "name": "GPUExternalTextureBindingLayout",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBindGroup",
            [
                {
                    "type": "interface",
                    "name": "GPUBindGroup",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUBindGroup",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUBindGroupDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUBindGroupDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "layout",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBindGroupLayout"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "entries",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBindGroupEntry"
                                    }
                                ]
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBindingResource",
            [
                {
                    "type": "typedef",
                    "name": "GPUBindingResource",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": true,
                        "idlType": [
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSampler"
                            },
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureView"
                            },
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBufferBinding"
                            },
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUExternalTexture"
                            }
                        ]
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUBindGroupEntry",
            [
                {
                    "type": "dictionary",
                    "name": "GPUBindGroupEntry",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "binding",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIndex32"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "resource",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBindingResource"
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBufferBinding",
            [
                {
                    "type": "dictionary",
                    "name": "GPUBufferBinding",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "buffer",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBuffer"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "offset",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize64"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "size",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize64"
                            },
                            "default": null,
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUPipelineLayout",
            [
                {
                    "type": "interface",
                    "name": "GPUPipelineLayout",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUPipelineLayout",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUPipelineLayoutDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUPipelineLayoutDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "bindGroupLayouts",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBindGroupLayout"
                                    }
                                ]
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUShaderModule",
            [
                {
                    "type": "interface",
                    "name": "GPUShaderModule",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "getCompilationInfo",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "return-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUCompilationInfo"
                                    }
                                ]
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUShaderModule",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUShaderModuleDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUShaderModuleDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "code",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "USVString"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "sourceMap",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "object"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "compilationHints",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUShaderModuleCompilationHint"
                                    }
                                ]
                            },
                            "default": {
                                "type": "sequence",
                                "value": []
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUShaderModuleCompilationHint",
            [
                {
                    "type": "dictionary",
                    "name": "GPUShaderModuleCompilationHint",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "entryPoint",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "USVString"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "layout",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": true,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUPipelineLayout"
                                    },
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUAutoLayoutMode"
                                    }
                                ]
                            },
                            "default": null,
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUCompilationMessageType",
            [
                {
                    "type": "enum",
                    "name": "GPUCompilationMessageType",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "error"
                        },
                        {
                            "type": "enum-value",
                            "value": "warning"
                        },
                        {
                            "type": "enum-value",
                            "value": "info"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUCompilationMessage",
            [
                {
                    "type": "interface",
                    "name": "GPUCompilationMessage",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "message",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "DOMString"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "type",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUCompilationMessageType"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "lineNum",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "linePos",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "offset",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "length",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "unsigned long long"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "Serializable",
                            "rhs": null,
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUCompilationInfo",
            [
                {
                    "type": "interface",
                    "name": "GPUCompilationInfo",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "messages",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "FrozenArray",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "attribute-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUCompilationMessage"
                                    }
                                ]
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "Serializable",
                            "rhs": null,
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUPipelineError",
            [
                {
                    "type": "interface",
                    "name": "GPUPipelineError",
                    "inheritance": "DOMException",
                    "members": [
                        {
                            "type": "constructor",
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "message",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "DOMString"
                                    },
                                    "default": {
                                        "type": "string",
                                        "value": ""
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "options",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUPipelineErrorInit"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": []
                        },
                        {
                            "type": "attribute",
                            "name": "reason",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUPipelineErrorReason"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "Serializable",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUPipelineErrorInit",
            [
                {
                    "type": "dictionary",
                    "name": "GPUPipelineErrorInit",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "reason",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUPipelineErrorReason"
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUPipelineErrorReason",
            [
                {
                    "type": "enum",
                    "name": "GPUPipelineErrorReason",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "validation"
                        },
                        {
                            "type": "enum-value",
                            "value": "internal"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUAutoLayoutMode",
            [
                {
                    "type": "enum",
                    "name": "GPUAutoLayoutMode",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "auto"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUPipelineDescriptorBase",
            [
                {
                    "type": "dictionary",
                    "name": "GPUPipelineDescriptorBase",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "layout",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": true,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUPipelineLayout"
                                    },
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUAutoLayoutMode"
                                    }
                                ]
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUPipelineBase",
            [
                {
                    "type": "interface mixin",
                    "name": "GPUPipelineBase",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "getBindGroupLayout",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBindGroupLayout"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "index",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "unsigned long"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "NewObject",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "special": ""
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUProgrammableStage",
            [
                {
                    "type": "dictionary",
                    "name": "GPUProgrammableStage",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "module",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUShaderModule"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "entryPoint",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "USVString"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "constants",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "record",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "USVString"
                                    },
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUPipelineConstantValue"
                                    }
                                ]
                            },
                            "default": null,
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUPipelineConstantValue",
            [
                {
                    "type": "typedef",
                    "name": "GPUPipelineConstantValue",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "double"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUComputePipeline",
            [
                {
                    "type": "interface",
                    "name": "GPUComputePipeline",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUComputePipeline",
                    "includes": "GPUObjectBase"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUComputePipeline",
                    "includes": "GPUPipelineBase"
                }
            ]
        ],
        [
            "GPUComputePipelineDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUComputePipelineDescriptor",
                    "inheritance": "GPUPipelineDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "compute",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUProgrammableStage"
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPURenderPipeline",
            [
                {
                    "type": "interface",
                    "name": "GPURenderPipeline",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderPipeline",
                    "includes": "GPUObjectBase"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderPipeline",
                    "includes": "GPUPipelineBase"
                }
            ]
        ],
        [
            "GPURenderPipelineDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPURenderPipelineDescriptor",
                    "inheritance": "GPUPipelineDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "vertex",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUVertexState"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "primitive",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUPrimitiveState"
                            },
                            "default": {
                                "type": "dictionary"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthStencil",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUDepthStencilState"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "multisample",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUMultisampleState"
                            },
                            "default": {
                                "type": "dictionary"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "fragment",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFragmentState"
                            },
                            "default": null,
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUPrimitiveState",
            [
                {
                    "type": "dictionary",
                    "name": "GPUPrimitiveState",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "topology",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUPrimitiveTopology"
                            },
                            "default": {
                                "type": "string",
                                "value": "triangle-list"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stripIndexFormat",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIndexFormat"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "frontFace",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFrontFace"
                            },
                            "default": {
                                "type": "string",
                                "value": "ccw"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "cullMode",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUCullMode"
                            },
                            "default": {
                                "type": "string",
                                "value": "none"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "unclippedDepth",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUPrimitiveTopology",
            [
                {
                    "type": "enum",
                    "name": "GPUPrimitiveTopology",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "point-list"
                        },
                        {
                            "type": "enum-value",
                            "value": "line-list"
                        },
                        {
                            "type": "enum-value",
                            "value": "line-strip"
                        },
                        {
                            "type": "enum-value",
                            "value": "triangle-list"
                        },
                        {
                            "type": "enum-value",
                            "value": "triangle-strip"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUFrontFace",
            [
                {
                    "type": "enum",
                    "name": "GPUFrontFace",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "ccw"
                        },
                        {
                            "type": "enum-value",
                            "value": "cw"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUCullMode",
            [
                {
                    "type": "enum",
                    "name": "GPUCullMode",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "none"
                        },
                        {
                            "type": "enum-value",
                            "value": "front"
                        },
                        {
                            "type": "enum-value",
                            "value": "back"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUMultisampleState",
            [
                {
                    "type": "dictionary",
                    "name": "GPUMultisampleState",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "count",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32"
                            },
                            "default": {
                                "type": "number",
                                "value": "1"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "mask",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSampleMask"
                            },
                            "default": {
                                "type": "number",
                                "value": "0xFFFFFFFF"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "alphaToCoverageEnabled",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUFragmentState",
            [
                {
                    "type": "dictionary",
                    "name": "GPUFragmentState",
                    "inheritance": "GPUProgrammableStage",
                    "members": [
                        {
                            "type": "field",
                            "name": "targets",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": true,
                                        "union": false,
                                        "idlType": "GPUColorTargetState"
                                    }
                                ]
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUColorTargetState",
            [
                {
                    "type": "dictionary",
                    "name": "GPUColorTargetState",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "format",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureFormat"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "blend",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBlendState"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "writeMask",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUColorWriteFlags"
                            },
                            "default": {
                                "type": "number",
                                "value": "0xF"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBlendState",
            [
                {
                    "type": "dictionary",
                    "name": "GPUBlendState",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "color",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBlendComponent"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "alpha",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBlendComponent"
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUColorWriteFlags",
            [
                {
                    "type": "typedef",
                    "name": "GPUColorWriteFlags",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUColorWrite",
            [
                {
                    "type": "namespace",
                    "name": "GPUColorWrite",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "const",
                            "name": "RED",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x1"
                            }
                        },
                        {
                            "type": "const",
                            "name": "GREEN",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x2"
                            }
                        },
                        {
                            "type": "const",
                            "name": "BLUE",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x4"
                            }
                        },
                        {
                            "type": "const",
                            "name": "ALPHA",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0x8"
                            }
                        },
                        {
                            "type": "const",
                            "name": "ALL",
                            "idlType": {
                                "type": "const-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUFlagsConstant"
                            },
                            "extAttrs": [],
                            "value": {
                                "type": "number",
                                "value": "0xF"
                            }
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBlendComponent",
            [
                {
                    "type": "dictionary",
                    "name": "GPUBlendComponent",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "operation",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBlendOperation"
                            },
                            "default": {
                                "type": "string",
                                "value": "add"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "srcFactor",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBlendFactor"
                            },
                            "default": {
                                "type": "string",
                                "value": "one"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "dstFactor",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUBlendFactor"
                            },
                            "default": {
                                "type": "string",
                                "value": "zero"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBlendFactor",
            [
                {
                    "type": "enum",
                    "name": "GPUBlendFactor",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "zero"
                        },
                        {
                            "type": "enum-value",
                            "value": "one"
                        },
                        {
                            "type": "enum-value",
                            "value": "src"
                        },
                        {
                            "type": "enum-value",
                            "value": "one-minus-src"
                        },
                        {
                            "type": "enum-value",
                            "value": "src-alpha"
                        },
                        {
                            "type": "enum-value",
                            "value": "one-minus-src-alpha"
                        },
                        {
                            "type": "enum-value",
                            "value": "dst"
                        },
                        {
                            "type": "enum-value",
                            "value": "one-minus-dst"
                        },
                        {
                            "type": "enum-value",
                            "value": "dst-alpha"
                        },
                        {
                            "type": "enum-value",
                            "value": "one-minus-dst-alpha"
                        },
                        {
                            "type": "enum-value",
                            "value": "src-alpha-saturated"
                        },
                        {
                            "type": "enum-value",
                            "value": "constant"
                        },
                        {
                            "type": "enum-value",
                            "value": "one-minus-constant"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUBlendOperation",
            [
                {
                    "type": "enum",
                    "name": "GPUBlendOperation",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "add"
                        },
                        {
                            "type": "enum-value",
                            "value": "subtract"
                        },
                        {
                            "type": "enum-value",
                            "value": "reverse-subtract"
                        },
                        {
                            "type": "enum-value",
                            "value": "min"
                        },
                        {
                            "type": "enum-value",
                            "value": "max"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUDepthStencilState",
            [
                {
                    "type": "dictionary",
                    "name": "GPUDepthStencilState",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "format",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureFormat"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "depthWriteEnabled",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthCompare",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUCompareFunction"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stencilFront",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStencilFaceState"
                            },
                            "default": {
                                "type": "dictionary"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stencilBack",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStencilFaceState"
                            },
                            "default": {
                                "type": "dictionary"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stencilReadMask",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStencilValue"
                            },
                            "default": {
                                "type": "number",
                                "value": "0xFFFFFFFF"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stencilWriteMask",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStencilValue"
                            },
                            "default": {
                                "type": "number",
                                "value": "0xFFFFFFFF"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthBias",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUDepthBias"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthBiasSlopeScale",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "float"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthBiasClamp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "float"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUStencilFaceState",
            [
                {
                    "type": "dictionary",
                    "name": "GPUStencilFaceState",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "compare",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUCompareFunction"
                            },
                            "default": {
                                "type": "string",
                                "value": "always"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "failOp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStencilOperation"
                            },
                            "default": {
                                "type": "string",
                                "value": "keep"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthFailOp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStencilOperation"
                            },
                            "default": {
                                "type": "string",
                                "value": "keep"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "passOp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStencilOperation"
                            },
                            "default": {
                                "type": "string",
                                "value": "keep"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUStencilOperation",
            [
                {
                    "type": "enum",
                    "name": "GPUStencilOperation",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "keep"
                        },
                        {
                            "type": "enum-value",
                            "value": "zero"
                        },
                        {
                            "type": "enum-value",
                            "value": "replace"
                        },
                        {
                            "type": "enum-value",
                            "value": "invert"
                        },
                        {
                            "type": "enum-value",
                            "value": "increment-clamp"
                        },
                        {
                            "type": "enum-value",
                            "value": "decrement-clamp"
                        },
                        {
                            "type": "enum-value",
                            "value": "increment-wrap"
                        },
                        {
                            "type": "enum-value",
                            "value": "decrement-wrap"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUIndexFormat",
            [
                {
                    "type": "enum",
                    "name": "GPUIndexFormat",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "uint16"
                        },
                        {
                            "type": "enum-value",
                            "value": "uint32"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUVertexFormat",
            [
                {
                    "type": "enum",
                    "name": "GPUVertexFormat",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "uint8x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "uint8x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "sint8x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "sint8x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "unorm8x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "unorm8x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "snorm8x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "snorm8x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "uint16x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "uint16x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "sint16x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "sint16x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "unorm16x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "unorm16x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "snorm16x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "snorm16x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "float16x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "float16x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "float32"
                        },
                        {
                            "type": "enum-value",
                            "value": "float32x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "float32x3"
                        },
                        {
                            "type": "enum-value",
                            "value": "float32x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "uint32"
                        },
                        {
                            "type": "enum-value",
                            "value": "uint32x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "uint32x3"
                        },
                        {
                            "type": "enum-value",
                            "value": "uint32x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "sint32"
                        },
                        {
                            "type": "enum-value",
                            "value": "sint32x2"
                        },
                        {
                            "type": "enum-value",
                            "value": "sint32x3"
                        },
                        {
                            "type": "enum-value",
                            "value": "sint32x4"
                        },
                        {
                            "type": "enum-value",
                            "value": "unorm10-10-10-2"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUVertexStepMode",
            [
                {
                    "type": "enum",
                    "name": "GPUVertexStepMode",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "vertex"
                        },
                        {
                            "type": "enum-value",
                            "value": "instance"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUVertexState",
            [
                {
                    "type": "dictionary",
                    "name": "GPUVertexState",
                    "inheritance": "GPUProgrammableStage",
                    "members": [
                        {
                            "type": "field",
                            "name": "buffers",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": true,
                                        "union": false,
                                        "idlType": "GPUVertexBufferLayout"
                                    }
                                ]
                            },
                            "default": {
                                "type": "sequence",
                                "value": []
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUVertexBufferLayout",
            [
                {
                    "type": "dictionary",
                    "name": "GPUVertexBufferLayout",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "arrayStride",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize64"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "stepMode",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUVertexStepMode"
                            },
                            "default": {
                                "type": "string",
                                "value": "vertex"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "attributes",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUVertexAttribute"
                                    }
                                ]
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUVertexAttribute",
            [
                {
                    "type": "dictionary",
                    "name": "GPUVertexAttribute",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "format",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUVertexFormat"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "offset",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize64"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "shaderLocation",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIndex32"
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUCommandBuffer",
            [
                {
                    "type": "interface",
                    "name": "GPUCommandBuffer",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUCommandBuffer",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUCommandBufferDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUCommandBufferDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUCommandsMixin",
            [
                {
                    "type": "interface mixin",
                    "name": "GPUCommandsMixin",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUCommandEncoder",
            [
                {
                    "type": "interface",
                    "name": "GPUCommandEncoder",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "beginRenderPass",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPURenderPassEncoder"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPURenderPassDescriptor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "beginComputePass",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUComputePassEncoder"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUComputePassDescriptor"
                                    },
                                    "default": {
                                        "type": "dictionary"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "copyBufferToBuffer",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "source",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "sourceOffset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "destination",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "destinationOffset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "size",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "copyBufferToTexture",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "source",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageCopyBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "destination",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageCopyTexture"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "copySize",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUExtent3D"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "copyTextureToBuffer",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "source",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageCopyTexture"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "destination",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageCopyBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "copySize",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUExtent3D"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "copyTextureToTexture",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "source",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageCopyTexture"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "destination",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageCopyTexture"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "copySize",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUExtent3D"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "clearBuffer",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "buffer",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "offset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "size",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "resolveQuerySet",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "querySet",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUQuerySet"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "firstQuery",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "queryCount",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "destination",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "destinationOffset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "finish",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUCommandBuffer"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUCommandBufferDescriptor"
                                    },
                                    "default": {
                                        "type": "dictionary"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUCommandEncoder",
                    "includes": "GPUObjectBase"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUCommandEncoder",
                    "includes": "GPUCommandsMixin"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUCommandEncoder",
                    "includes": "GPUDebugCommandsMixin"
                }
            ]
        ],
        [
            "GPUCommandEncoderDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUCommandEncoderDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBindingCommandsMixin",
            [
                {
                    "type": "interface mixin",
                    "name": "GPUBindingCommandsMixin",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "setBindGroup",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "index",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIndex32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "bindGroup",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": true,
                                        "union": false,
                                        "idlType": "GPUBindGroup"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "dynamicOffsets",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "sequence",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": [
                                            {
                                                "type": "argument-type",
                                                "extAttrs": [],
                                                "generic": "",
                                                "nullable": false,
                                                "union": false,
                                                "idlType": "GPUBufferDynamicOffset"
                                            }
                                        ]
                                    },
                                    "default": {
                                        "type": "sequence",
                                        "value": []
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "setBindGroup",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "index",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIndex32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "bindGroup",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": true,
                                        "union": false,
                                        "idlType": "GPUBindGroup"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "dynamicOffsetsData",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "Uint32Array"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "dynamicOffsetsDataStart",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "dynamicOffsetsDataLength",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUDebugCommandsMixin",
            [
                {
                    "type": "interface mixin",
                    "name": "GPUDebugCommandsMixin",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "pushDebugGroup",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "groupLabel",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "USVString"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "popDebugGroup",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "insertDebugMarker",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "markerLabel",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "USVString"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUComputePassEncoder",
            [
                {
                    "type": "interface",
                    "name": "GPUComputePassEncoder",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "setPipeline",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "pipeline",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUComputePipeline"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "dispatchWorkgroups",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "workgroupCountX",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "workgroupCountY",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "1"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "workgroupCountZ",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "1"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "dispatchWorkgroupsIndirect",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "indirectBuffer",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "indirectOffset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "end",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUComputePassEncoder",
                    "includes": "GPUObjectBase"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUComputePassEncoder",
                    "includes": "GPUCommandsMixin"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUComputePassEncoder",
                    "includes": "GPUDebugCommandsMixin"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUComputePassEncoder",
                    "includes": "GPUBindingCommandsMixin"
                }
            ]
        ],
        [
            "GPUComputePassTimestampWrites",
            [
                {
                    "type": "dictionary",
                    "name": "GPUComputePassTimestampWrites",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "querySet",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUQuerySet"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "beginningOfPassWriteIndex",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "endOfPassWriteIndex",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32"
                            },
                            "default": null,
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUComputePassDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUComputePassDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "timestampWrites",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUComputePassTimestampWrites"
                            },
                            "default": null,
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPURenderPassEncoder",
            [
                {
                    "type": "interface",
                    "name": "GPURenderPassEncoder",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "setViewport",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "x",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "float"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "y",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "float"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "width",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "float"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "height",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "float"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "minDepth",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "float"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "maxDepth",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "float"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "setScissorRect",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "x",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIntegerCoordinate"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "y",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIntegerCoordinate"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "width",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIntegerCoordinate"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "height",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIntegerCoordinate"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "setBlendConstant",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "color",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUColor"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "setStencilReference",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "reference",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUStencilValue"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "beginOcclusionQuery",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "queryIndex",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "endOcclusionQuery",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "executeBundles",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "bundles",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "sequence",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": [
                                            {
                                                "type": "argument-type",
                                                "extAttrs": [],
                                                "generic": "",
                                                "nullable": false,
                                                "union": false,
                                                "idlType": "GPURenderBundle"
                                            }
                                        ]
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "end",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderPassEncoder",
                    "includes": "GPUObjectBase"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderPassEncoder",
                    "includes": "GPUCommandsMixin"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderPassEncoder",
                    "includes": "GPUDebugCommandsMixin"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderPassEncoder",
                    "includes": "GPUBindingCommandsMixin"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderPassEncoder",
                    "includes": "GPURenderCommandsMixin"
                }
            ]
        ],
        [
            "GPURenderPassTimestampWrites",
            [
                {
                    "type": "dictionary",
                    "name": "GPURenderPassTimestampWrites",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "querySet",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUQuerySet"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "beginningOfPassWriteIndex",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "endOfPassWriteIndex",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32"
                            },
                            "default": null,
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPURenderPassDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPURenderPassDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "colorAttachments",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": true,
                                        "union": false,
                                        "idlType": "GPURenderPassColorAttachment"
                                    }
                                ]
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "depthStencilAttachment",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPURenderPassDepthStencilAttachment"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "occlusionQuerySet",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUQuerySet"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "timestampWrites",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPURenderPassTimestampWrites"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "maxDrawCount",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize64"
                            },
                            "default": {
                                "type": "number",
                                "value": "50000000"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPURenderPassColorAttachment",
            [
                {
                    "type": "dictionary",
                    "name": "GPURenderPassColorAttachment",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "view",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureView"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "depthSlice",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "resolveTarget",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureView"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "clearValue",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUColor"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "loadOp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPULoadOp"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "storeOp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStoreOp"
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPURenderPassDepthStencilAttachment",
            [
                {
                    "type": "dictionary",
                    "name": "GPURenderPassDepthStencilAttachment",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "view",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureView"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "depthClearValue",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "float"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthLoadOp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPULoadOp"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthStoreOp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStoreOp"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthReadOnly",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stencilClearValue",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStencilValue"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stencilLoadOp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPULoadOp"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stencilStoreOp",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUStoreOp"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stencilReadOnly",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPULoadOp",
            [
                {
                    "type": "enum",
                    "name": "GPULoadOp",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "load"
                        },
                        {
                            "type": "enum-value",
                            "value": "clear"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUStoreOp",
            [
                {
                    "type": "enum",
                    "name": "GPUStoreOp",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "store"
                        },
                        {
                            "type": "enum-value",
                            "value": "discard"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPURenderPassLayout",
            [
                {
                    "type": "dictionary",
                    "name": "GPURenderPassLayout",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "colorFormats",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": true,
                                        "union": false,
                                        "idlType": "GPUTextureFormat"
                                    }
                                ]
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "depthStencilFormat",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureFormat"
                            },
                            "default": null,
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "sampleCount",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32"
                            },
                            "default": {
                                "type": "number",
                                "value": "1"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPURenderCommandsMixin",
            [
                {
                    "type": "interface mixin",
                    "name": "GPURenderCommandsMixin",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "setPipeline",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "pipeline",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPURenderPipeline"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "setIndexBuffer",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "buffer",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "indexFormat",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIndexFormat"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "offset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "size",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "setVertexBuffer",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "slot",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIndex32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "buffer",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": true,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "offset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "size",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "draw",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "vertexCount",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "instanceCount",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "1"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "firstVertex",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "firstInstance",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "drawIndexed",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "indexCount",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "instanceCount",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "1"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "firstIndex",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "baseVertex",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSignedOffset32"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "firstInstance",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize32"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "drawIndirect",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "indirectBuffer",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "indirectOffset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "drawIndexedIndirect",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "indirectBuffer",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "indirectOffset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPURenderBundle",
            [
                {
                    "type": "interface",
                    "name": "GPURenderBundle",
                    "inheritance": null,
                    "members": [],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderBundle",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPURenderBundleDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPURenderBundleDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPURenderBundleEncoder",
            [
                {
                    "type": "interface",
                    "name": "GPURenderBundleEncoder",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "finish",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPURenderBundle"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "descriptor",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPURenderBundleDescriptor"
                                    },
                                    "default": {
                                        "type": "dictionary"
                                    },
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderBundleEncoder",
                    "includes": "GPUObjectBase"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderBundleEncoder",
                    "includes": "GPUCommandsMixin"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderBundleEncoder",
                    "includes": "GPUDebugCommandsMixin"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderBundleEncoder",
                    "includes": "GPUBindingCommandsMixin"
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPURenderBundleEncoder",
                    "includes": "GPURenderCommandsMixin"
                }
            ]
        ],
        [
            "GPURenderBundleEncoderDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPURenderBundleEncoderDescriptor",
                    "inheritance": "GPURenderPassLayout",
                    "members": [
                        {
                            "type": "field",
                            "name": "depthReadOnly",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "stencilReadOnly",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "boolean"
                            },
                            "default": {
                                "type": "boolean",
                                "value": false
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUQueueDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUQueueDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUQueue",
            [
                {
                    "type": "interface",
                    "name": "GPUQueue",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "submit",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "commandBuffers",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "sequence",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": [
                                            {
                                                "type": "argument-type",
                                                "extAttrs": [],
                                                "generic": "",
                                                "nullable": false,
                                                "union": false,
                                                "idlType": "GPUCommandBuffer"
                                            }
                                        ]
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "onSubmittedWorkDone",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "Promise",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "return-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "undefined"
                                    }
                                ]
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "writeBuffer",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "buffer",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUBuffer"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "bufferOffset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "data",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "AllowSharedBufferSource"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "dataOffset",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": {
                                        "type": "number",
                                        "value": "0"
                                    },
                                    "optional": true,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "size",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUSize64"
                                    },
                                    "default": null,
                                    "optional": true,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "writeTexture",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "destination",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageCopyTexture"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "data",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "AllowSharedBufferSource"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "dataLayout",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageDataLayout"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "size",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUExtent3D"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "copyExternalImageToTexture",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "source",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageCopyExternalImage"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "destination",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUImageCopyTextureTagged"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "copySize",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUExtent3D"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUQueue",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUQuerySet",
            [
                {
                    "type": "interface",
                    "name": "GPUQuerySet",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "operation",
                            "name": "destroy",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "attribute",
                            "name": "type",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUQueryType"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "count",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32Out"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                },
                {
                    "type": "includes",
                    "extAttrs": [],
                    "target": "GPUQuerySet",
                    "includes": "GPUObjectBase"
                }
            ]
        ],
        [
            "GPUQuerySetDescriptor",
            [
                {
                    "type": "dictionary",
                    "name": "GPUQuerySetDescriptor",
                    "inheritance": "GPUObjectDescriptorBase",
                    "members": [
                        {
                            "type": "field",
                            "name": "type",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUQueryType"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "count",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUSize32"
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUQueryType",
            [
                {
                    "type": "enum",
                    "name": "GPUQueryType",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "occlusion"
                        },
                        {
                            "type": "enum-value",
                            "value": "timestamp"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUCanvasContext",
            [
                {
                    "type": "interface",
                    "name": "GPUCanvasContext",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "canvas",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": true,
                                "idlType": [
                                    {
                                        "type": "attribute-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "HTMLCanvasElement"
                                    },
                                    {
                                        "type": "attribute-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "OffscreenCanvas"
                                    }
                                ]
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "operation",
                            "name": "configure",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "configuration",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUCanvasConfiguration"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "unconfigure",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "undefined"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        },
                        {
                            "type": "operation",
                            "name": "getCurrentTexture",
                            "idlType": {
                                "type": "return-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTexture"
                            },
                            "arguments": [],
                            "extAttrs": [],
                            "special": ""
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUCanvasAlphaMode",
            [
                {
                    "type": "enum",
                    "name": "GPUCanvasAlphaMode",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "opaque"
                        },
                        {
                            "type": "enum-value",
                            "value": "premultiplied"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUCanvasConfiguration",
            [
                {
                    "type": "dictionary",
                    "name": "GPUCanvasConfiguration",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "device",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUDevice"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "format",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureFormat"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "usage",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUTextureUsageFlags"
                            },
                            "default": {
                                "type": "number",
                                "value": "0x10"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "viewFormats",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "dictionary-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUTextureFormat"
                                    }
                                ]
                            },
                            "default": {
                                "type": "sequence",
                                "value": []
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "colorSpace",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "PredefinedColorSpace"
                            },
                            "default": {
                                "type": "string",
                                "value": "srgb"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "alphaMode",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUCanvasAlphaMode"
                            },
                            "default": {
                                "type": "string",
                                "value": "opaque"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUDeviceLostReason",
            [
                {
                    "type": "enum",
                    "name": "GPUDeviceLostReason",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "unknown"
                        },
                        {
                            "type": "enum-value",
                            "value": "destroyed"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUDeviceLostInfo",
            [
                {
                    "type": "interface",
                    "name": "GPUDeviceLostInfo",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "reason",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUDeviceLostReason"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        },
                        {
                            "type": "attribute",
                            "name": "message",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "DOMString"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUError",
            [
                {
                    "type": "interface",
                    "name": "GPUError",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "attribute",
                            "name": "message",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "DOMString"
                            },
                            "extAttrs": [],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUValidationError",
            [
                {
                    "type": "interface",
                    "name": "GPUValidationError",
                    "inheritance": "GPUError",
                    "members": [
                        {
                            "type": "constructor",
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "message",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "DOMString"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": []
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUOutOfMemoryError",
            [
                {
                    "type": "interface",
                    "name": "GPUOutOfMemoryError",
                    "inheritance": "GPUError",
                    "members": [
                        {
                            "type": "constructor",
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "message",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "DOMString"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": []
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUInternalError",
            [
                {
                    "type": "interface",
                    "name": "GPUInternalError",
                    "inheritance": "GPUError",
                    "members": [
                        {
                            "type": "constructor",
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "message",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "DOMString"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": []
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUErrorFilter",
            [
                {
                    "type": "enum",
                    "name": "GPUErrorFilter",
                    "values": [
                        {
                            "type": "enum-value",
                            "value": "validation"
                        },
                        {
                            "type": "enum-value",
                            "value": "out-of-memory"
                        },
                        {
                            "type": "enum-value",
                            "value": "internal"
                        }
                    ],
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUUncapturedErrorEvent",
            [
                {
                    "type": "interface",
                    "name": "GPUUncapturedErrorEvent",
                    "inheritance": "Event",
                    "members": [
                        {
                            "type": "constructor",
                            "arguments": [
                                {
                                    "type": "argument",
                                    "name": "type",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "DOMString"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                },
                                {
                                    "type": "argument",
                                    "name": "gpuUncapturedErrorEventInitDict",
                                    "extAttrs": [],
                                    "idlType": {
                                        "type": "argument-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUUncapturedErrorEventInit"
                                    },
                                    "default": null,
                                    "optional": false,
                                    "variadic": false
                                }
                            ],
                            "extAttrs": []
                        },
                        {
                            "type": "attribute",
                            "name": "error",
                            "idlType": {
                                "type": "attribute-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUError"
                            },
                            "extAttrs": [
                                {
                                    "type": "extended-attribute",
                                    "name": "SameObject",
                                    "rhs": null,
                                    "arguments": []
                                }
                            ],
                            "special": "",
                            "readonly": true
                        }
                    ],
                    "extAttrs": [
                        {
                            "type": "extended-attribute",
                            "name": "Exposed",
                            "rhs": {
                                "type": "identifier-list",
                                "value": [
                                    {
                                        "value": "Window"
                                    },
                                    {
                                        "value": "Worker"
                                    }
                                ]
                            },
                            "arguments": []
                        },
                        {
                            "type": "extended-attribute",
                            "name": "SecureContext",
                            "rhs": null,
                            "arguments": []
                        }
                    ],
                    "partial": false
                }
            ]
        ],
        [
            "GPUUncapturedErrorEventInit",
            [
                {
                    "type": "dictionary",
                    "name": "GPUUncapturedErrorEventInit",
                    "inheritance": "EventInit",
                    "members": [
                        {
                            "type": "field",
                            "name": "error",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUError"
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUBufferDynamicOffset",
            [
                {
                    "type": "typedef",
                    "name": "GPUBufferDynamicOffset",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUStencilValue",
            [
                {
                    "type": "typedef",
                    "name": "GPUStencilValue",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUSampleMask",
            [
                {
                    "type": "typedef",
                    "name": "GPUSampleMask",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUDepthBias",
            [
                {
                    "type": "typedef",
                    "name": "GPUDepthBias",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUSize64",
            [
                {
                    "type": "typedef",
                    "name": "GPUSize64",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUIntegerCoordinate",
            [
                {
                    "type": "typedef",
                    "name": "GPUIntegerCoordinate",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUIndex32",
            [
                {
                    "type": "typedef",
                    "name": "GPUIndex32",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUSize32",
            [
                {
                    "type": "typedef",
                    "name": "GPUSize32",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUSignedOffset32",
            [
                {
                    "type": "typedef",
                    "name": "GPUSignedOffset32",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [
                            {
                                "type": "extended-attribute",
                                "name": "EnforceRange",
                                "rhs": null,
                                "arguments": []
                            }
                        ],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUSize64Out",
            [
                {
                    "type": "typedef",
                    "name": "GPUSize64Out",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUIntegerCoordinateOut",
            [
                {
                    "type": "typedef",
                    "name": "GPUIntegerCoordinateOut",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUSize32Out",
            [
                {
                    "type": "typedef",
                    "name": "GPUSize32Out",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUFlagsConstant",
            [
                {
                    "type": "typedef",
                    "name": "GPUFlagsConstant",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": false,
                        "idlType": "unsigned long"
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUColorDict",
            [
                {
                    "type": "dictionary",
                    "name": "GPUColorDict",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "r",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "double"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "g",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "double"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "b",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "double"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "a",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "double"
                            },
                            "default": null,
                            "required": true
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUColor",
            [
                {
                    "type": "typedef",
                    "name": "GPUColor",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": true,
                        "idlType": [
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "typedef-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "double"
                                    }
                                ]
                            },
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUColorDict"
                            }
                        ]
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUOrigin2DDict",
            [
                {
                    "type": "dictionary",
                    "name": "GPUOrigin2DDict",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "x",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "y",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUOrigin2D",
            [
                {
                    "type": "typedef",
                    "name": "GPUOrigin2D",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": true,
                        "idlType": [
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "typedef-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIntegerCoordinate"
                                    }
                                ]
                            },
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUOrigin2DDict"
                            }
                        ]
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUOrigin3DDict",
            [
                {
                    "type": "dictionary",
                    "name": "GPUOrigin3DDict",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "x",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "y",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "z",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "0"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUOrigin3D",
            [
                {
                    "type": "typedef",
                    "name": "GPUOrigin3D",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": true,
                        "idlType": [
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "typedef-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIntegerCoordinate"
                                    }
                                ]
                            },
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUOrigin3DDict"
                            }
                        ]
                    },
                    "extAttrs": []
                }
            ]
        ],
        [
            "GPUExtent3DDict",
            [
                {
                    "type": "dictionary",
                    "name": "GPUExtent3DDict",
                    "inheritance": null,
                    "members": [
                        {
                            "type": "field",
                            "name": "width",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": null,
                            "required": true
                        },
                        {
                            "type": "field",
                            "name": "height",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "1"
                            },
                            "required": false
                        },
                        {
                            "type": "field",
                            "name": "depthOrArrayLayers",
                            "extAttrs": [],
                            "idlType": {
                                "type": "dictionary-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUIntegerCoordinate"
                            },
                            "default": {
                                "type": "number",
                                "value": "1"
                            },
                            "required": false
                        }
                    ],
                    "extAttrs": [],
                    "partial": false
                }
            ]
        ],
        [
            "GPUExtent3D",
            [
                {
                    "type": "typedef",
                    "name": "GPUExtent3D",
                    "idlType": {
                        "type": "typedef-type",
                        "extAttrs": [],
                        "generic": "",
                        "nullable": false,
                        "union": true,
                        "idlType": [
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "sequence",
                                "nullable": false,
                                "union": false,
                                "idlType": [
                                    {
                                        "type": "typedef-type",
                                        "extAttrs": [],
                                        "generic": "",
                                        "nullable": false,
                                        "union": false,
                                        "idlType": "GPUIntegerCoordinate"
                                    }
                                ]
                            },
                            {
                                "type": "typedef-type",
                                "extAttrs": [],
                                "generic": "",
                                "nullable": false,
                                "union": false,
                                "idlType": "GPUExtent3DDict"
                            }
                        ]
                    },
                    "extAttrs": []
                }
            ]
        ]
    ],
    "dfn": [
        [
            "GPUObjectDescriptorBase",
            [
                {
                    "target": "GPUObjectDescriptorBase",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>label</dfn>\r",
                        "    ::\r",
                        "        The initial value of {{GPUObjectBase/label|GPUObjectBase.label}}.\r"
                    ]
                }
            ]
        ],
        [
            "adapter",
            [
                {
                    "target": "adapter",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[features]]</dfn>, of type [=ordered set=]&lt;{{GPUFeatureName}}&gt;, readonly\r",
                        "    ::\r",
                        "        The [=features=] which can be used to create devices on this adapter.\r",
                        "\r",
                        "    : <dfn>\\[[limits]]</dfn>, of type [=supported limits=], readonly\r",
                        "    ::\r",
                        "        The [=limit/better|best=] limits which can be used to create devices on this adapter.\r",
                        "\r",
                        "        Each adapter limit must be the same or [=limit/better=] than its default value\r",
                        "        in [=supported limits=].\r",
                        "\r",
                        "    : <dfn>\\[[fallback]]</dfn>, of type boolean\r",
                        "    ::\r",
                        "        If set to `true` indicates that the adapter is a [=fallback adapter=].\r"
                    ]
                }
            ]
        ],
        [
            "device",
            [
                {
                    "target": "device",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[adapter]]</dfn>, of type [=adapter=], readonly\r",
                        "    ::\r",
                        "        The [=adapter=] from which this device was created.\r",
                        "\r",
                        "    : <dfn>\\[[features]]</dfn>, of type [=ordered set=]&lt;{{GPUFeatureName}}&gt;, readonly\r",
                        "    ::\r",
                        "        The [=features=] which can be used on this device.\r",
                        "        No additional features can be used, even if the underlying [=adapter=] can support them.\r",
                        "\r",
                        "    : <dfn>\\[[limits]]</dfn>, of type [=supported limits=], readonly\r",
                        "    ::\r",
                        "        The limits which can be used on this device.\r",
                        "        No [=limit/better=] limits can be used, even if the underlying [=adapter=] can support them.\r"
                    ]
                }
            ]
        ],
        [
            "GPUAdapterInfo",
            [
                {
                    "target": "GPUAdapterInfo",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>vendor</dfn>\r",
                        "    ::\r",
                        "        The name of the vendor of the [=adapter=], if available. Empty string otherwise.\r",
                        "\r",
                        "    : <dfn>architecture</dfn>\r",
                        "    ::\r",
                        "        The name of the family or class of GPUs the [=adapter=] belongs to, if available. Empty\r",
                        "        string otherwise.\r",
                        "\r",
                        "    : <dfn>device</dfn>\r",
                        "    ::\r",
                        "        A vendor-specific identifier for the [=adapter=], if available. Empty string otherwise.\r",
                        "\r",
                        "        Note: This is a value that represents the type of adapter. For example, it may be a\r",
                        "        [PCI device ID](https://pcisig.com/). It does not uniquely identify a given piece of\r",
                        "        hardware like a serial number.\r",
                        "\r",
                        "    : <dfn>description</dfn>\r",
                        "    ::\r",
                        "        A human readable string describing the [=adapter=] as reported by the driver, if available.\r",
                        "        Empty string otherwise.\r",
                        "\r",
                        "        Note: Because no formatting is applied to {{GPUAdapterInfo/description}} attempting to parse\r",
                        "        this value is not recommended. Applications which change their behavior based on the\r",
                        "        {{GPUAdapterInfo}}, such as applying workarounds for known driver issues, should rely on the\r",
                        "        other fields when possible.\r"
                    ]
                }
            ]
        ],
        [
            "NavigatorGPU",
            [
                {
                    "target": "NavigatorGPU",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>gpu</dfn>\r",
                        "    ::\r",
                        "        A global singleton providing top-level entry points like {{GPU/requestAdapter()}}.\r"
                    ]
                }
            ]
        ],
        [
            "GPU",
            [
                {
                    "target": "GPU",
                    "type": "method",
                    "lines": [
                        "    : <dfn>requestAdapter(options)</dfn>\r",
                        "    ::\r",
                        "        Requests an [=adapter=] from the user agent.\r",
                        "        The user agent chooses whether to return an adapter, and, if so,\r",
                        "        chooses according to the provided options.\r",
                        "\r",
                        "        <div algorithm=GPU.requestAdapter>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPU}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPU/requestAdapter(options)\">\r",
                        "                    |options|: Criteria used to select the adapter.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{Promise}}&lt;{{GPUAdapter}}?&gt;\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let <var data-timeline=content>contentTimeline</var> be the current [=Content timeline=].\r",
                        "                1. Let |promise| be [=a new promise=].\r",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |promise|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. Let |adapter| be `null`.\r",
                        "                1. If the user agent chooses to return an adapter, it should:\r",
                        "                    1. Set |adapter| to a [=valid=] [=adapter=], chosen according to\r",
                        "                        the rules in [[#adapter-selection]] and the criteria in |options|,\r",
                        "                        adhering to [[#adapter-capability-guarantees]].\r",
                        "\r",
                        "                        The [=supported limits=] of the adapter must adhere to the requirements\r",
                        "                        defined in [[#limits]].\r",
                        "\r",
                        "                    1. If |adapter| meets the criteria of a [=fallback adapter=] set\r",
                        "                        |adapter|.{{adapter/[[fallback]]}} to `true`.\r",
                        "\r",
                        "                1. Issue the subsequent steps on <var data-timeline=content>contentTimeline</var>.\r",
                        "            </div>\r",
                        "            <div data-timeline=content>\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. If |adapter| is not `null`:\r",
                        "                    1. [=Resolve=] |promise| with a new {{GPUAdapter}} encapsulating |adapter|.\r",
                        "\r",
                        "                1. Otherwise, [=Resolve=] |promise| with `null`.\r",
                        "            </div>\r",
                        "            <!-- If we add ways to make invalid adapter requests (aside from those\r",
                        "                that violate IDL rules), specify that they reject the promise. -->\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>getPreferredCanvasFormat()</dfn>\r",
                        "    ::\r",
                        "        Returns an optimal {{GPUTextureFormat}} for displaying 8-bit depth, standard dynamic range\r",
                        "        content on this system. Must only return {{GPUTextureFormat/\"rgba8unorm\"}} or\r",
                        "        {{GPUTextureFormat/\"bgra8unorm\"}}.\r",
                        "\r",
                        "        The returned value can be passed as the {{GPUCanvasConfiguration/format}} to\r",
                        "        {{GPUCanvasContext/configure()}} calls on a {{GPUCanvasContext}} to ensure the associated\r",
                        "        canvas is able to display its contents efficiently.\r",
                        "\r",
                        "        Note: Canvases which are not displayed to the screen may or may not benefit from using this\r",
                        "        format.\r",
                        "\r",
                        "        <div algorithm=GPU.getPreferredCanvasFormat>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPU}} this.\r",
                        "\r",
                        "                **Returns:** {{GPUTextureFormat}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Return either {{GPUTextureFormat/\"rgba8unorm\"}} or\r",
                        "                    {{GPUTextureFormat/\"bgra8unorm\"}}, depending on which format is optimal for\r",
                        "                    displaying WebGPU canvases on this system.\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn dfn-type=attribute>wgslLanguageFeatures</dfn>\r",
                        "    ::\r",
                        "        The names of supported WGSL [=language extensions=].\r",
                        "        Supported language extensions are automatically enabled.\r"
                    ]
                }
            ]
        ],
        [
            "GPUPowerPreference",
            [
                {
                    "target": "GPUPowerPreference",
                    "type": "enum-value",
                    "lines": [
                        "            : `undefined` (or not present)\r",
                        "            ::\r",
                        "                Provides no hint to the user agent.\r",
                        "\r",
                        "            : <dfn>\"low-power\"</dfn>\r",
                        "            ::\r",
                        "                Indicates a request to prioritize power savings over performance.\r",
                        "\r",
                        "                Note:\r",
                        "                Generally, content should use this if it is unlikely to be constrained by drawing\r",
                        "                performance; for example, if it renders only one frame per second, draws only relatively\r",
                        "                simple geometry with simple shaders, or uses a small HTML canvas element.\r",
                        "                Developers are encouraged to use this value if their content allows, since it may\r",
                        "                significantly improve battery life on portable devices.\r",
                        "\r",
                        "            : <dfn>\"high-performance\"</dfn>\r",
                        "            ::\r",
                        "                Indicates a request to prioritize performance over power consumption.\r",
                        "\r",
                        "                Note:\r",
                        "                By choosing this value, developers should be aware that, for [=devices=] created on the\r",
                        "                resulting adapter, user agents are more likely to force device loss, in order to save\r",
                        "                power by switching to a lower-power adapter.\r",
                        "                Developers are encouraged to only specify this value if they believe it is absolutely\r",
                        "                necessary, since it may significantly decrease battery life on portable devices.\r"
                    ]
                }
            ]
        ],
        [
            "GPUAdapter",
            [
                {
                    "target": "GPUAdapter",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>features</dfn>\r",
                        "    ::\r",
                        "        The set of values in `this`.{{GPUAdapter/[[adapter]]}}.{{adapter/[[features]]}}.\r",
                        "\r",
                        "    : <dfn>limits</dfn>\r",
                        "    ::\r",
                        "        The limits in `this`.{{GPUAdapter/[[adapter]]}}.{{adapter/[[limits]]}}.\r",
                        "\r",
                        "    : <dfn>isFallbackAdapter</dfn>\r",
                        "    ::\r",
                        "        Returns the value of {{GPUAdapter/[[adapter]]}}.{{adapter/[[fallback]]}}.\r"
                    ]
                },
                {
                    "target": "GPUAdapter",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[adapter]]</dfn>, of type [=adapter=], readonly\r",
                        "    ::\r",
                        "        The [=adapter=] to which this {{GPUAdapter}} refers.\r"
                    ]
                },
                {
                    "target": "GPUAdapter",
                    "type": "method",
                    "lines": [
                        "    : <dfn>requestDevice(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Requests a [=device=] from the [=adapter=].\r",
                        "\r",
                        "        This is a one-time action: if a device is returned successfully,\r",
                        "        the adapter becomes [=invalid=].\r",
                        "\r",
                        "        <div algorithm=GPUAdapter.requestDevice>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUAdapter}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUAdapter/requestDevice(descriptor)\">\r",
                        "                    |descriptor|: Description of the {{GPUDevice}} to request.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{Promise}}&lt;{{GPUDevice}}&gt;\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let <var data-timeline=content>contentTimeline</var> be the current [=Content timeline=].\r",
                        "                1. Let |promise| be [=a new promise=].\r",
                        "                1. Let |adapter| be |this|.{{GPUAdapter/[[adapter]]}}.\r",
                        "                1. Issue the |initialization steps| to the [=Device timeline=] of |this|.\r",
                        "                1. Return |promise|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. If any of the following requirements are unmet:\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - The set of values in |descriptor|.{{GPUDeviceDescriptor/requiredFeatures}}\r",
                        "                            must be a subset of those in |adapter|.{{adapter/[[features]]}}.\r",
                        "                    </div>\r",
                        "\r",
                        "                    Then issue the following steps on <var data-timeline=content>contentTimeline</var>\r",
                        "                    and return:\r",
                        "\r",
                        "                        <div data-timeline=content>\r",
                        "                            [=Content timeline=] steps:\r",
                        "\r",
                        "                            1. [=Reject=] |promise| with a {{TypeError}}.\r",
                        "                        </div>\r",
                        "\r",
                        "                    Note: This is the same error that is produced if a feature name isn't known\r",
                        "                    by the browser at all (in its {{GPUFeatureName}} definition).\r",
                        "                    This converges the behavior when the browser doesn't support a feature\r",
                        "                    with the behavior when a particular adapter doesn't support a feature.\r",
                        "\r",
                        "                1. If any of the following requirements are unmet:\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - Each key in |descriptor|.{{GPUDeviceDescriptor/requiredLimits}}\r",
                        "                            must be the name of a member of [=supported limits=].\r",
                        "\r",
                        "                        - For each limit name |key| in the keys of [=supported limits=]:\r",
                        "                            Let |value| be |descriptor|.{{GPUDeviceDescriptor/requiredLimits}}[|key|].\r",
                        "                            - |value| must be no [=limit/better=] than the value of that limit in\r",
                        "                                |adapter|.{{adapter/[[limits]]}}.\r",
                        "                            - If the limit's [=limit class|class=] is [=limit class/alignment=],\r",
                        "                                |value| must be a power of 2 less than 2<sup>32</sup>.\r",
                        "                    </div>\r",
                        "\r",
                        "                    Then issue the following steps on <var data-timeline=content>contentTimeline</var>\r",
                        "                    and return:\r",
                        "\r",
                        "                    <div data-timeline=content>\r",
                        "                        [=Content timeline=] steps:\r",
                        "\r",
                        "                        1. [=Reject=] |promise| with an {{OperationError}}.\r",
                        "                    </div>\r",
                        "\r",
                        "                1. If |adapter| is [=invalid=],\r",
                        "                    or the user agent otherwise cannot fulfill the request:\r",
                        "\r",
                        "                    1. Let |device| be a new [=device=].\r",
                        "                    1. [=Lose the device=](|device|, {{GPUDeviceLostReason/\"unknown\"}}).\r",
                        "\r",
                        "                        Note:\r",
                        "                        This makes |adapter| [=invalid=], if it wasn't already.\r",
                        "\r",
                        "                        Note:\r",
                        "                        User agents should consider issuing developer-visible warnings in\r",
                        "                        most or all cases when this occurs. Applications should perform\r",
                        "                        reinitialization logic starting with {{GPU/requestAdapter()}}.\r",
                        "\r",
                        "                    Otherwise:\r",
                        "\r",
                        "                    1. Let |device| be [=a new device=] with the capabilities described by |descriptor|.\r",
                        "                    1. Make |adapter|.{{GPUAdapter/[[adapter]]}} [=invalid=].\r",
                        "\r",
                        "                1. Issue the subsequent steps on <var data-timeline=content>contentTimeline</var>.\r",
                        "            </div>\r",
                        "            <div data-timeline=content>\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. [=Resolve=] |promise| with a new {{GPUDevice}} object |device|.\r",
                        "\r",
                        "                    Note:\r",
                        "                    If the device is already lost because the adapter could not fulfill the request,\r",
                        "                    |device|.{{GPUDevice/lost}} has already resolved before |promise| resolves.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>requestAdapterInfo()</dfn>\r",
                        "    ::\r",
                        "        Requests the {{GPUAdapterInfo}} for this {{GPUAdapter}}.\r",
                        "\r",
                        "        Note: Adapter info values are returned with a Promise to give user agents an\r",
                        "        opportunity to perform potentially long-running checks in the future.\r",
                        "\r",
                        "        <div algorithm=GPUAdapter.requestAdapterInfo>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUAdapter}} |this|.\r",
                        "\r",
                        "                **Returns:** {{Promise}}&lt;{{GPUAdapterInfo}}&gt;\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let |promise| be [=a new promise=].\r",
                        "                1. Let |adapter| be |this|.{{GPUAdapter/[[adapter]]}}.\r",
                        "                1. Run the following steps [=in parallel=]:\r",
                        "                    1. [=Resolve=] |promise| with a [$new adapter info$] for |adapter|.\r",
                        "\r",
                        "                1. Return |promise|.\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                }
            ]
        ],
        [
            "GPUDeviceDescriptor",
            [
                {
                    "target": "GPUDeviceDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>requiredFeatures</dfn>\r",
                        "    ::\r",
                        "        Specifies the [=features=] that are required by the device request.\r",
                        "        The request will fail if the adapter cannot provide these features.\r",
                        "\r",
                        "        Exactly the specified set of features, and no more or less, will be allowed in validation\r",
                        "        of API calls on the resulting device.\r",
                        "\r",
                        "    : <dfn>requiredLimits</dfn>\r",
                        "    ::\r",
                        "        Specifies the [=limits=] that are required by the device request.\r",
                        "        The request will fail if the adapter cannot provide these limits.\r",
                        "\r",
                        "        Each key must be the name of a member of [=supported limits=].\r",
                        "        Exactly the specified limits, and no [=limit/better=] or worse,\r",
                        "        will be allowed in validation of API calls on the resulting device.\r",
                        "\r",
                        "        <!-- If we ever need limit types other than GPUSize32/GPUSize64, we can change the value\r",
                        "        type to `double` or `any` in the future and write out the type conversion explicitly (by\r",
                        "        reference to WebIDL spec). Or change the entire type to `any` and add back a `dictionary\r",
                        "        GPULimits` and define the conversion of the whole object by reference to WebIDL. -->\r",
                        "\r",
                        "    : <dfn>defaultQueue</dfn>\r",
                        "    ::\r",
                        "        The descriptor for the default {{GPUQueue}}.\r"
                    ]
                }
            ]
        ],
        [
            "GPUDevice",
            [
                {
                    "target": "GPUDevice",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>features</dfn>\r",
                        "    ::\r",
                        "        A set containing the {{GPUFeatureName}} values of the features\r",
                        "        supported by the device (i.e. the ones with which it was created).\r",
                        "\r",
                        "    : <dfn>limits</dfn>\r",
                        "    ::\r",
                        "        Exposes the limits supported by the device\r",
                        "        (which are exactly the ones with which it was created).\r",
                        "\r",
                        "    : <dfn>queue</dfn>\r",
                        "    ::\r",
                        "        The primary {{GPUQueue}} for this device.\r"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>destroy()</dfn>\r",
                        "    ::\r",
                        "        Destroys the [=device=], preventing further operations on it.\r",
                        "        Outstanding asynchronous operations will fail.\r",
                        "\r",
                        "        Note: It is valid to destroy a device multiple times.\r",
                        "\r",
                        "        <div algorithm=GPUDevice.destroy()>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDevice}} |this|.\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. {{GPUBuffer/unmap()}} all {{GPUBuffer}}s from this device.\r",
                        "\r",
                        "                    <!-- POSTV1(multithreading) tentative text:\r",
                        "                    ... which are mapped in this [=agent=] (thread).\r",
                        "\r",
                        "                    Note: Any buffers which are mapped in a different thread are not unmapped.\r",
                        "                    They can be unmapped only from the thread on which they are mapped, either by\r",
                        "                    another call to {{GPUDevice/destroy()|GPUDevice.destroy()}}, or by\r",
                        "                    {{GPUBuffer/destroy()|GPUBuffer.destroy()}} or {{GPUBuffer/unmap()|GPUBuffer.unmap()}}.\r",
                        "                    -->\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. Once all <span data-timeline=queue>currently-enqueued operations on any queue on this device</span>\r",
                        "                    are completed, issue the subsequent steps on the <span data-timeline=device>current timeline</span>.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                1. [=Lose the device=](|this|.{{GPUObjectBase/[[device]]}},\r",
                        "                    {{GPUDeviceLostReason/\"destroyed\"}}).\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "        Note: Since no further operations can be enqueued on this device, implementations can abort\r",
                        "        outstanding asynchronous operations immediately and free resource allocations, including\r",
                        "        mapped memory that was just unmapped.\r"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createBuffer(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Creates a {{GPUBuffer}}.\r",
                        "\r",
                        "        <div algorithm=GPUDevice.createBuffer>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDevice}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUDevice/createBuffer(descriptor)\">\r",
                        "                    |descriptor|: Description of the {{GPUBuffer}} to create.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{GPUBuffer}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let [|b|, |bi|] be [=!=] [$create a new WebGPU object$](|this|, {{GPUBuffer}}, |descriptor|).\r",
                        "                1. Set |b|.{{GPUBuffer/size}} to |descriptor|.{{GPUBufferDescriptor/size}}.\r",
                        "                1. Set |b|.{{GPUBuffer/usage}} to |descriptor|.{{GPUBufferDescriptor/usage}}.\r",
                        "                1. If |descriptor|.{{GPUBufferDescriptor/mappedAtCreation}} is `true`:\r",
                        "                    1. Set |b|.{{GPUBuffer/[[mapping]]}} to\r",
                        "                        [=?=] [$initialize an active buffer mapping$] with mode {{GPUMapMode/WRITE}}\r",
                        "                        and range <code>[0, |descriptor|.{{GPUBufferDescriptor/size}}]</code>.\r",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |b|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. If any of the following requirements are unmet,\r",
                        "                    [$generate a validation error$], make |bi| [=invalid=], and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |device| must be [=valid=].\r",
                        "                        - |descriptor|.{{GPUBufferDescriptor/usage}} must not be 0.\r",
                        "                        - |descriptor|.{{GPUBufferDescriptor/usage}} must be a subset of |device|'s\r",
                        "                            [=allowed buffer usages=].\r",
                        "                        - If |descriptor|.{{GPUBufferDescriptor/usage}} contains {{GPUBufferUsage/MAP_READ}}:\r",
                        "                            - |descriptor|.{{GPUBufferDescriptor/usage}} must contain no other flags\r",
                        "                                except {{GPUBufferUsage/COPY_DST}}.\r",
                        "                        - If |descriptor|.{{GPUBufferDescriptor/usage}} contains {{GPUBufferUsage/MAP_WRITE}}:\r",
                        "                            - |descriptor|.{{GPUBufferDescriptor/usage}} must contain no other flags\r",
                        "                                except {{GPUBufferUsage/COPY_SRC}}.\r",
                        "                        - If |descriptor|.{{GPUBufferDescriptor/size}} must be &le;\r",
                        "                            |device|.{{GPUObjectBase/[[device]]}}.{{device/[[limits]]}}.{{supported limits/maxBufferSize}}.\r",
                        "                        - If |descriptor|.{{GPUBufferDescriptor/mappedAtCreation}} is `true`:\r",
                        "                            - |descriptor|.{{GPUBufferDescriptor/size}} must be a multiple of 4.\r",
                        "                    </div>\r",
                        "\r",
                        "                Note: If buffer creation fails, and |descriptor|.{{GPUBufferDescriptor/mappedAtCreation}} is `false`,\r",
                        "                any calls to {{GPUBuffer/mapAsync()}} will reject, so any resources allocated to enable mapping can\r",
                        "                and may be discarded or recycled.\r",
                        "\r",
                        "                1. If |descriptor|.{{GPUBufferDescriptor/mappedAtCreation}} is `true`:\r",
                        "                    1. Set |bi|.[=buffer internals/state=] to \"[=buffer internals/state/unavailable=]\".\r",
                        "\r",
                        "                    Else:\r",
                        "\r",
                        "                    1. Set |bi|.[=buffer internals/state=] to \"[=buffer internals/state/available=]\".\r",
                        "\r",
                        "                1. Create a device allocation for |bi| where each byte is zero.\r",
                        "\r",
                        "                    If the allocation fails without side-effects,\r",
                        "                    [$generate an out-of-memory error$],\r",
                        "                    make |bi| [=invalid=], and return.\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createTexture(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Creates a {{GPUTexture}}.\r",
                        "\r",
                        "        <div algorithm=GPUDevice.createTexture>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDevice}} this.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUDevice/createTexture(descriptor)\">\r",
                        "                    |descriptor|: Description of the {{GPUTexture}} to create.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{GPUTexture}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. [=?=] [$validate GPUExtent3D shape$](|descriptor|.{{GPUTextureDescriptor/size}}).\r",
                        "                1. [=?=] [$Validate texture format required features$] of\r",
                        "                    |descriptor|.{{GPUTextureDescriptor/format}} with |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "                1. [=?=] [$Validate texture format required features$] of each element of\r",
                        "                    |descriptor|.{{GPUTextureDescriptor/viewFormats}} with |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "                1. Let |t| be a new {{GPUTexture}} object.\r",
                        "                1. Set |t|.{{GPUTexture/width}} to |descriptor|.{{GPUTextureDescriptor/size}}.[=GPUExtent3D/width=].\r",
                        "                1. Set |t|.{{GPUTexture/height}} to |descriptor|.{{GPUTextureDescriptor/size}}.[=GPUExtent3D/height=].\r",
                        "                1. Set |t|.{{GPUTexture/depthOrArrayLayers}} to |descriptor|.{{GPUTextureDescriptor/size}}.[=GPUExtent3D/depthOrArrayLayers=].\r",
                        "                1. Set |t|.{{GPUTexture/mipLevelCount}} to |descriptor|.{{GPUTextureDescriptor/mipLevelCount}}.\r",
                        "                1. Set |t|.{{GPUTexture/sampleCount}} to |descriptor|.{{GPUTextureDescriptor/sampleCount}}.\r",
                        "                1. Set |t|.{{GPUTexture/dimension}} to |descriptor|.{{GPUTextureDescriptor/dimension}}.\r",
                        "                1. Set |t|.{{GPUTexture/format}} to |descriptor|.{{GPUTextureDescriptor/format}}.\r",
                        "                1. Set |t|.{{GPUTexture/usage}} to |descriptor|.{{GPUTextureDescriptor/usage}}.\r",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |t|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. If any of the following conditions are unsatisfied\r",
                        "                    [$generate a validation error$], make |t| [=invalid=], and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - [$validating GPUTextureDescriptor$](|this|, |descriptor|) returns `true`.\r",
                        "                    </div>\r",
                        "\r",
                        "                1. Set |t|.{{GPUTexture/[[size]]}} to |descriptor|.{{GPUTextureDescriptor/size}}.\r",
                        "                1. Set |t|.{{GPUTexture/[[viewFormats]]}} to |descriptor|.{{GPUTextureDescriptor/viewFormats}}.\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>importExternalTexture(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Creates a {{GPUExternalTexture}} wrapping the provided image source.\r",
                        "\r",
                        "        <div algorithm=GPUDevice.importExternalTexture>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDevice}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUDevice/importExternalTexture(descriptor)\">\r",
                        "                    |descriptor|: Provides the external image source object (and any creation options).\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{GPUExternalTexture}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let |source| be |descriptor|.{{GPUExternalTextureDescriptor/source}}.\r",
                        "\r",
                        "                1. If the current image contents of |source| are the same as the most recent\r",
                        "                    {{GPUDevice/importExternalTexture()}} call with the same |descriptor|\r",
                        "                    (ignoring {{GPUObjectDescriptorBase/label}}),\r",
                        "                    and the user agent chooses to reuse it:\r",
                        "\r",
                        "                    1. Let |previousResult| be the {{GPUExternalTexture}} returned previously.\r",
                        "                    1. Set |previousResult|.{{GPUExternalTexture/[[expired]]}} to `false`,\r",
                        "                        renewing ownership of the underlying resource.\r",
                        "                    1. Let |result| be |previousResult|.\r",
                        "\r",
                        "                    Note:\r",
                        "                    This allows the application to detect duplicate imports and avoid re-creating\r",
                        "                    dependent objects (such as {{GPUBindGroup}}s).\r",
                        "                    Implementations still need to be able to handle a single frame being wrapped by\r",
                        "                    multiple {{GPUExternalTexture}}, since import metadata like\r",
                        "                    {{GPUExternalTextureDescriptor/colorSpace}} can change even for the same frame.\r",
                        "\r",
                        "                    Otherwise:\r",
                        "\r",
                        "                    1. If |source| <l spec=html>[=is not origin-clean=]</l>,\r",
                        "                        throw a {{SecurityError}} and stop.\r",
                        "\r",
                        "                    1. Let |usability| be [=?=] [=check the usability of the image argument=](|source|).\r",
                        "\r",
                        "                    1. If |usability| is not `good`:\r",
                        "                        1. [$Generate a validation error$].\r",
                        "                        1. Return an [=invalid=] {{GPUExternalTexture}}.\r",
                        "\r",
                        "                    1. Let |data| be the result of converting the current image contents of |source| into\r",
                        "                        the color space |descriptor|.{{GPUExternalTextureDescriptor/colorSpace}}\r",
                        "                        with unpremultiplied alpha.\r",
                        "\r",
                        "                        This [[#color-space-conversions|may result]] in values outside of the range [0, 1].\r",
                        "                        If clamping is desired, it may be performed after sampling.\r",
                        "\r",
                        "                        Note: This is described like a copy, but may be implemented as a reference to\r",
                        "                        read-only underlying data plus appropriate metadata to perform conversion later.\r",
                        "\r",
                        "                    1. Let |result| be a new {{GPUExternalTexture}} object wrapping |data|.\r",
                        "\r",
                        "                1. If |source| is an {{HTMLVideoElement}},\r",
                        "                    [$queue an automatic expiry task$] with device |this| and the following steps:\r",
                        "\r",
                        "                    <div data-timeline=content>\r",
                        "                        1. Set |result|.{{GPUExternalTexture/[[expired]]}} to `true`,\r",
                        "                            releasing ownership of the underlying resource.\r",
                        "                    </div>\r",
                        "\r",
                        "                    Note:\r",
                        "                    An {{HTMLVideoElement}} should be imported in the same task that samples the texture\r",
                        "                    (which should generally be scheduled using `requestVideoFrameCallback` or\r",
                        "                    {{AnimationFrameProvider/requestAnimationFrame()}} depending on the application).\r",
                        "                    Otherwise, a texture could get destroyed by these steps before the\r",
                        "                    application is finished using it.\r",
                        "                1. If |source| is a {{VideoFrame}}, then when |source| is\r",
                        "                    [=Close VideoFrame|closed=], run the following steps:\r",
                        "\r",
                        "                    <div data-timeline=content>\r",
                        "                        1. Set |result|.{{GPUExternalTexture/[[expired]]}} to `true`.\r",
                        "                    </div>\r",
                        "                1. Set |result|.{{GPUObjectBase/label}} to |descriptor|.{{GPUObjectDescriptorBase/label}}.\r",
                        "                1. Return |result|.\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createSampler(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Creates a {{GPUSampler}}.\r",
                        "\r",
                        "        <div algorithm=GPUDevice.createSampler>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDevice}} this.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUDevice/createSampler(descriptor)\">\r",
                        "                    |descriptor|: Description of the {{GPUSampler}} to create.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{GPUSampler}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let |s| be a new {{GPUSampler}} object.\r",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |s|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. If any of the following conditions are unsatisfied\r",
                        "                    [$generate a validation error$], make |s| [=invalid=], and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this| is [=valid=].\r",
                        "                        - |descriptor|.{{GPUSamplerDescriptor/lodMinClamp}} &ge; 0.\r",
                        "                        - |descriptor|.{{GPUSamplerDescriptor/lodMaxClamp}} &ge;\r",
                        "                            |descriptor|.{{GPUSamplerDescriptor/lodMinClamp}}.\r",
                        "                        - |descriptor|.{{GPUSamplerDescriptor/maxAnisotropy}} &ge; 1.\r",
                        "\r",
                        "                            Note: Most implementations support {{GPUSamplerDescriptor/maxAnisotropy}}\r",
                        "                            values in range between 1 and 16, inclusive. The provided\r",
                        "                            {{GPUSamplerDescriptor/maxAnisotropy}} value will be clamped to the\r",
                        "                            maximum value that the platform supports.\r",
                        "\r",
                        "                        - If |descriptor|.{{GPUSamplerDescriptor/maxAnisotropy}} &gt; 1:\r",
                        "                            - |descriptor|.{{GPUSamplerDescriptor/magFilter}},\r",
                        "                                |descriptor|.{{GPUSamplerDescriptor/minFilter}},\r",
                        "                                and |descriptor|.{{GPUSamplerDescriptor/mipmapFilter}} must be\r",
                        "                                {{GPUMipmapFilterMode/\"linear\"}}.\r",
                        "                    </div>\r",
                        "                1. Set |s|.{{GPUSampler/[[descriptor]]}} to |descriptor|.\r",
                        "                1. Set |s|.{{GPUSampler/[[isComparison]]}} to `false` if the {{GPUSamplerDescriptor/compare}} attribute\r",
                        "                        of |s|.{{GPUSampler/[[descriptor]]}} is `null` or undefined. Otherwise, set it to `true`.\r",
                        "                1. Set |s|.{{GPUSampler/[[isFiltering]]}} to `false` if none of {{GPUSamplerDescriptor/minFilter}},\r",
                        "                    {{GPUSamplerDescriptor/magFilter}}, or {{GPUSamplerDescriptor/mipmapFilter}} has the value of\r",
                        "                    {{GPUFilterMode/\"linear\"}}. Otherwise, set it to `true`.\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createBindGroupLayout(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Creates a {{GPUBindGroupLayout}}.\r",
                        "\r",
                        "        <div algorithm=GPUDevice.createBindGroupLayout>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDevice}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUDevice/createBindGroupLayout(descriptor)\">\r",
                        "                    |descriptor|: Description of the {{GPUBindGroupLayout}} to create.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{GPUBindGroupLayout}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. For each {{GPUBindGroupLayoutEntry}} |entry| in |descriptor|.{{GPUBindGroupLayoutDescriptor/entries}}:\r",
                        "                    1. If |entry|.{{GPUBindGroupLayoutEntry/storageTexture}} is [=map/exist|provided=]:\r",
                        "                        1. [=?=] [$Validate texture format required features$] for\r",
                        "                            |entry|.{{GPUBindGroupLayoutEntry/storageTexture}}.{{GPUStorageTextureBindingLayout/format}}\r",
                        "                            with |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "                1. Let |layout| be a new {{GPUBindGroupLayout}} object.\r",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |layout|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. If any of the following conditions are unsatisfied\r",
                        "                    [$generate a validation error$], make |layout| [=invalid=], and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this| is [=valid=].\r",
                        "                        - Let |limits| be |this|.{{GPUObjectBase/[[device]]}}.{{device/[[limits]]}}.\r",
                        "                        - The {{GPUBindGroupLayoutEntry/binding}} of each entry in |descriptor| is unique.\r",
                        "                        - The {{GPUBindGroupLayoutEntry/binding}} of each entry in |descriptor| must be &lt;\r",
                        "                            |limits|.{{supported limits/maxBindingsPerBindGroup}}.\r",
                        "                        - |descriptor|.{{GPUBindGroupLayoutDescriptor/entries}} must not\r",
                        "                            [=exceeds the binding slot limits|exceed the binding slot limits=] of |limits|.\r",
                        "                        - For each {{GPUBindGroupLayoutEntry}} |entry| in |descriptor|.{{GPUBindGroupLayoutDescriptor/entries}}:\r",
                        "                            - Exactly one of\r",
                        "                                |entry|.{{GPUBindGroupLayoutEntry/buffer}},\r",
                        "                                |entry|.{{GPUBindGroupLayoutEntry/sampler}},\r",
                        "                                |entry|.{{GPUBindGroupLayoutEntry/texture}}, and\r",
                        "                                |entry|.{{GPUBindGroupLayoutEntry/storageTexture}} is [=map/exist|provided=].\r",
                        "\r",
                        "                            - |entry|.{{GPUBindGroupLayoutEntry/visibility}} contains only bits defined in {{GPUShaderStage}}.\r",
                        "\r",
                        "                            - If |entry|.{{GPUBindGroupLayoutEntry/visibility}} includes\r",
                        "                                {{GPUShaderStage/VERTEX}}:\r",
                        "                                - |entry|.{{GPUBindGroupLayoutEntry/buffer}}?.{{GPUBufferBindingLayout/type}}\r",
                        "                                    must not be {{GPUBufferBindingType/\"storage\"}}.\r",
                        "                                    Note that {{GPUBufferBindingType/\"read-only-storage\"}} is allowed.\r",
                        "                                - |entry|.{{GPUBindGroupLayoutEntry/storageTexture}}?.{{GPUStorageTextureBindingLayout/access}}\r",
                        "                                    must be {{GPUStorageTextureAccess/\"read-only\"}}.\r",
                        "\r",
                        "                            - If |entry|.{{GPUBindGroupLayoutEntry/texture}}?.{{GPUTextureBindingLayout/multisampled}} is `true`:\r",
                        "                                - |entry|.{{GPUBindGroupLayoutEntry/texture}}.{{GPUTextureBindingLayout/viewDimension}} is\r",
                        "                                    {{GPUTextureViewDimension/\"2d\"}}.\r",
                        "                                - |entry|.{{GPUBindGroupLayoutEntry/texture}}.{{GPUTextureBindingLayout/sampleType}} is not\r",
                        "                                    {{GPUTextureSampleType/\"float\"}}.\r",
                        "\r",
                        "                            - If |entry|.{{GPUBindGroupLayoutEntry/storageTexture}} is [=map/exist|provided=]:\r",
                        "                                - |entry|.{{GPUBindGroupLayoutEntry/storageTexture}}.{{GPUStorageTextureBindingLayout/viewDimension}} is not\r",
                        "                                    {{GPUTextureViewDimension/\"cube\"}} or {{GPUTextureViewDimension/\"cube-array\"}}.\r",
                        "                                - |entry|.{{GPUBindGroupLayoutEntry/storageTexture}}.{{GPUStorageTextureBindingLayout/format}} must be a format\r",
                        "                                    which can support storage usage for the given\r",
                        "                                    |entry|.{{GPUBindGroupLayoutEntry/storageTexture}}.{{GPUStorageTextureBindingLayout/access}}\r",
                        "                                    according to the [[#plain-color-formats]] table.\r",
                        "\r",
                        "                    </div>\r",
                        "\r",
                        "                1. Set |layout|.{{GPUBindGroupLayout/[[descriptor]]}} to |descriptor|.\r",
                        "                1. Set |layout|.{{GPUBindGroupLayout/[[dynamicOffsetCount]]}} to the number of\r",
                        "                    entries in |descriptor| where {{GPUBindGroupLayoutEntry/buffer}} is [=map/exist|provided=] and\r",
                        "                    {{GPUBindGroupLayoutEntry/buffer}}.{{GPUBufferBindingLayout/hasDynamicOffset}} is `true`.\r",
                        "                1. For each {{GPUBindGroupLayoutEntry}} |entry| in\r",
                        "                    |descriptor|.{{GPUBindGroupLayoutDescriptor/entries}}:\r",
                        "                    1. Insert |entry| into |layout|.{{GPUBindGroupLayout/[[entryMap]]}}\r",
                        "                        with the key of |entry|.{{GPUBindGroupLayoutEntry/binding}}.\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createBindGroup(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Creates a {{GPUBindGroup}}.\r",
                        "\r",
                        "        <div algorithm=GPUDevice.createBindGroup>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDevice}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUDevice/createBindGroup(descriptor)\">\r",
                        "                    |descriptor|: Description of the {{GPUBindGroup}} to create.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{GPUBindGroup}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let |bindGroup| be a new {{GPUBindGroup}} object.\r",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |bindGroup|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. Let |limits| be |this|.{{GPUObjectBase/[[device]]}}.{{device/[[limits]]}}.\r",
                        "                1. If any of the following conditions are unsatisfied\r",
                        "                    [$generate a validation error$], make |bindGroup| [=invalid=], and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |descriptor|.{{GPUBindGroupDescriptor/layout}} is [$valid to use with$] |this|.\r",
                        "                        - The number of {{GPUBindGroupLayoutDescriptor/entries}} of\r",
                        "                            |descriptor|.{{GPUBindGroupDescriptor/layout}} is exactly equal to\r",
                        "                            the number of |descriptor|.{{GPUBindGroupDescriptor/entries}}.\r",
                        "\r",
                        "                        For each {{GPUBindGroupEntry}} |bindingDescriptor| in\r",
                        "                            |descriptor|.{{GPUBindGroupDescriptor/entries}}:\r",
                        "                            - Let |resource| be |bindingDescriptor|.{{GPUBindGroupEntry/resource}}.\r",
                        "                            - There is exactly one {{GPUBindGroupLayoutEntry}} |layoutBinding|\r",
                        "                                in |descriptor|.{{GPUBindGroupDescriptor/layout}}.{{GPUBindGroupLayoutDescriptor/entries}}\r",
                        "                                such that |layoutBinding|.{{GPUBindGroupLayoutEntry/binding}} equals to\r",
                        "                                |bindingDescriptor|.{{GPUBindGroupEntry/binding}}.\r",
                        "\r",
                        "                            - If the defined [=binding member=] for |layoutBinding| is\r",
                        "\r",
                        "                                <dl class=switch>\r",
                        "                                    : {{GPUBindGroupLayoutEntry/sampler}}\r",
                        "                                    ::\r",
                        "                                        - |resource| is a {{GPUSampler}}.\r",
                        "                                        - |resource| is [$valid to use with$] |this|.\r",
                        "                                        - If |layoutBinding|.{{GPUBindGroupLayoutEntry/sampler}}.{{GPUSamplerBindingLayout/type}} is:\r",
                        "\r",
                        "                                            <dl class=switch>\r",
                        "                                                : {{GPUSamplerBindingType/\"filtering\"}}\r",
                        "                                                :: |resource|.{{GPUSampler/[[isComparison]]}} is `false`.\r",
                        "\r",
                        "                                                : {{GPUSamplerBindingType/\"non-filtering\"}}\r",
                        "                                                ::\r",
                        "                                                    |resource|.{{GPUSampler/[[isFiltering]]}} is `false`.\r",
                        "                                                    |resource|.{{GPUSampler/[[isComparison]]}} is `false`.\r",
                        "\r",
                        "                                                : {{GPUSamplerBindingType/\"comparison\"}}\r",
                        "                                                :: |resource|.{{GPUSampler/[[isComparison]]}} is `true`.\r"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createPipelineLayout(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Creates a {{GPUPipelineLayout}}.\r",
                        "\r",
                        "        <div algorithm=GPUDevice.createPipelineLayout>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDevice}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUDevice/createPipelineLayout(descriptor)\">\r",
                        "                    |descriptor|: Description of the {{GPUPipelineLayout}} to create.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{GPUPipelineLayout}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let |pl| be a new {{GPUPipelineLayout}} object.\r",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |pl|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. Let |limits| be |this|.{{GPUObjectBase/[[device]]}}.{{device/[[limits]]}}.\r",
                        "                1. Let |allEntries| be the result of concatenating\r",
                        "                    |bgl|.{{GPUBindGroupLayout/[[descriptor]]}}.{{GPUBindGroupLayoutDescriptor/entries}}\r",
                        "                    for all |bgl| in |descriptor|.{{GPUPipelineLayoutDescriptor/bindGroupLayouts}}.\r",
                        "                1. If any of the following conditions are unsatisfied\r",
                        "                    [$generate a validation error$], make |pl| [=invalid=], and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - Every {{GPUBindGroupLayout}} in |descriptor|.{{GPUPipelineLayoutDescriptor/bindGroupLayouts}}\r",
                        "                            must be [$valid to use with$] |this| and have a {{GPUBindGroupLayout/[[exclusivePipeline]]}}\r",
                        "                            of `null`.\r",
                        "                        - The [=list/size=] of |descriptor|.{{GPUPipelineLayoutDescriptor/bindGroupLayouts}}\r",
                        "                            must be &le; |limits|.{{supported limits/maxBindGroups}}.\r",
                        "                        - |allEntries| must not [=exceeds the binding slot limits|exceed the binding slot limits=] of |limits|.\r",
                        "                    </div>\r",
                        "\r",
                        "                1. Set the |pl|.{{GPUPipelineLayout/[[bindGroupLayouts]]}} to\r",
                        "                    |descriptor|.{{GPUPipelineLayoutDescriptor/bindGroupLayouts}}.\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createShaderModule(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Creates a {{GPUShaderModule}}.\r",
                        "\r",
                        "        <div algorithm=GPUDevice.createShaderModule>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDevice}} this.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUDevice/createShaderModule(descriptor)\">\r",
                        "                    |descriptor|: Description of the {{GPUShaderModule}} to create.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{GPUShaderModule}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let |sm| be a new {{GPUShaderModule}} object.\r",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |sm|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. Let |result| be the result of [=shader module creation=] with the WGSL source\r",
                        "                    |descriptor|.{{GPUShaderModuleDescriptor/code}}.\r",
                        "                1. If any of the following requirements are unmet,\r",
                        "                    [$generate a validation error$], make |sm| [=invalid=], and return.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this| must be [=valid=].\r",
                        "                        - |result| must not be a [=shader-creation error|shader-creation=] [=program error=].\r",
                        "                    </div>\r",
                        "\r",
                        "                    Note: [=Uncategorized errors=] cannot arise from shader module creation.\r",
                        "                    Implementations which detect such errors during shader module creation\r",
                        "                    must behave as if the shader module is valid, and defer surfacing the\r",
                        "                    error until pipeline creation.\r",
                        "\r",
                        "                Issue: Describe remaining {{GPUDevice/createShaderModule()}} validation and\r",
                        "                algorithm steps.\r",
                        "\r",
                        "                <div class=note heading>\r",
                        "                    User agents **should not** include detailed compiler error messages or shader text in\r",
                        "                    the {{GPUError/message}} text of validation errors arising here:\r",
                        "                    these details are accessible via {{GPUShaderModule/getCompilationInfo()}}.\r",
                        "                    User agents **should** surface human-readable, formatted error details *to\r",
                        "                    developers* for easier debugging (for example as a warning in the browser developer\r",
                        "                    console, expandable to show full shader source).\r",
                        "\r",
                        "                    As shader compilation errors should be rare in production applications, user agents\r",
                        "                    could choose to surface them *to developers* regardless of error handling ([=GPU error scopes=] or\r",
                        "                    {{GPUDevice/uncapturederror}} event handlers), e.g. as an expandable warning.\r",
                        "                    If not, they should provide and document another way for developers to access\r",
                        "                    human-readable error details, for example by adding a checkbox to show errors\r",
                        "                    unconditionally, or by showing human-readable details when logging a\r",
                        "                    {{GPUCompilationInfo}} object to the console.\r",
                        "                </div>\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createComputePipeline(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Creates a {{GPUComputePipeline}} using [=immediate pipeline creation=].\r",
                        "\r",
                        "        <div algorithm=GPUDevice.createComputePipeline>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDevice}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUDevice/createComputePipeline(descriptor)\">\r",
                        "                    |descriptor|: Description of the {{GPUComputePipeline}} to create.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{GPUComputePipeline}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let |pipeline| be a new {{GPUComputePipeline}} object.\r",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |pipeline|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. Let |layout| be a new [$default pipeline layout$] for |pipeline| if\r",
                        "                    |descriptor|.{{GPUPipelineDescriptorBase/layout}} is {{GPUAutoLayoutMode/\"auto\"}},\r",
                        "                    and |descriptor|.{{GPUPipelineDescriptorBase/layout}} otherwise.\r",
                        "\r",
                        "                1. If any of the requirements in the following steps are unsatisfied,\r",
                        "                    [$generate a validation error$], make |pipeline| [=invalid=], and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |layout| must be [$valid to use with$] |this|.\r",
                        "                        - [$validating GPUProgrammableStage$]({{GPUShaderStage/COMPUTE}},\r",
                        "                            |descriptor|.{{GPUComputePipelineDescriptor/compute}}, |layout|) must succeed.\r",
                        "                        - Let |entryPoint| be [$get the entry point$]({{GPUShaderStage/COMPUTE}}, |descriptor|.{{GPUComputePipelineDescriptor/compute}}). [=Assert=] |entryPoint| is not `null`.\r",
                        "                        - Let |workgroupStorageUsed| be the sum of [=roundUp=](16, [$SizeOf$](|T|)) over each\r",
                        "                            type |T| of all variables with address space \"[=address spaces/workgroup=]\"\r",
                        "                            [=statically used=] by |entryPoint|.\r",
                        "\r",
                        "                            |workgroupStorageUsed| must be &le;\r",
                        "                            |device|.limits.{{supported limits/maxComputeWorkgroupStorageSize}}.\r",
                        "                        - |entryPoint| must use &le;\r",
                        "                            |device|.limits.{{supported limits/maxComputeInvocationsPerWorkgroup}} per\r",
                        "                            workgroup.\r",
                        "                        - Each component of |entryPoint|'s\r",
                        "                            `workgroup_size` attribute must be &le; the corresponding component in\r",
                        "                            [|device|.limits.{{supported limits/maxComputeWorkgroupSizeX}},\r",
                        "                            |device|.limits.{{supported limits/maxComputeWorkgroupSizeY}},\r",
                        "                            |device|.limits.{{supported limits/maxComputeWorkgroupSizeZ}}].\r",
                        "                    </div>\r",
                        "\r",
                        "                1. If any [=pipeline-creation error|pipeline-creation=] [=uncategorized errors=]\r",
                        "                    result from the implementation of pipeline creation,\r",
                        "                    [$generate an internal error$], make |pipeline| [=invalid=], and stop.\r",
                        "\r",
                        "                    Note:\r",
                        "                    Even if the implementation detected [=uncategorized errors=] in shader module\r",
                        "                    creation, the error is surfaced here.\r",
                        "\r",
                        "                1. Set |pipeline|.{{GPUPipelineBase/[[layout]]}} to |layout|.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>createComputePipelineAsync(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Creates a {{GPUComputePipeline}} using [=async pipeline creation=].\r",
                        "        The returned {{Promise}} resolves when the created pipeline\r",
                        "        is ready to be used without additional delay.\r",
                        "\r",
                        "        If pipeline creation fails, the returned {{Promise}} rejects with an {{GPUPipelineError}}.\r",
                        "\r",
                        "        Note: Use of this method is preferred whenever possible, as it prevents blocking the\r",
                        "        [=queue timeline=] work on pipeline compilation.\r",
                        "\r",
                        "        <div algorithm=GPUDevice.createComputePipelineAsync>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDevice}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUDevice/createComputePipelineAsync(descriptor)\">\r",
                        "                    |descriptor|: Description of the {{GPUComputePipeline}} to create.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{Promise}}&lt;{{GPUComputePipeline}}&gt;\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let <var data-timeline=content>contentTimeline</var> be the current [=Content timeline=].\r",
                        "                1. Let |promise| be [=a new promise=].\r",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |promise|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. Let |pipeline| be a new {{GPUComputePipeline}} created as if\r",
                        "                    |this|.{{GPUDevice/createComputePipeline()}} was called with |descriptor|;\r",
                        "\r",
                        "                1. When |pipeline| is ready to be used or has been made [=invalid=], issue the\r",
                        "                    subsequent steps on <var data-timeline=content>contentTimeline</var>.\r",
                        "            </div>\r",
                        "            <div data-timeline=content>\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. If |pipeline|...\r",
                        "                    <dl class=switch>\r",
                        "                        : [=valid=]\r",
                        "                        :: [=Resolve=] |promise| with |pipeline|.\r",
                        "                        : [=invalid=] due to an [$internal error$]\r",
                        "                        :: [=Reject=] |promise| with a {{GPUPipelineError}} with\r",
                        "                            {{GPUPipelineErrorInit/reason}} {{GPUPipelineErrorReason/\"internal\"}}.\r",
                        "                        : [=invalid=] due to an [$validation error$]\r",
                        "                        :: [=Reject=] |promise| with a {{GPUPipelineError}} with\r",
                        "                            {{GPUPipelineErrorInit/reason}} {{GPUPipelineErrorReason/\"validation\"}}.\r"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createRenderPipeline(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Creates a {{GPURenderPipeline}} using [=immediate pipeline creation=].\r",
                        "\r",
                        "        <div algorithm=GPUDevice.createRenderPipeline>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDevice}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUDevice/createRenderPipeline(descriptor)\">\r",
                        "                    |descriptor|: Description of the {{GPURenderPipeline}} to create.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{GPURenderPipeline}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. If |descriptor|.{{GPURenderPipelineDescriptor/fragment}} is [=map/exist|provided=]:\r",
                        "                    1. [=list/For each=] non-`null` |colorState| of\r",
                        "                        |descriptor|.{{GPURenderPipelineDescriptor/fragment}}.{{GPUFragmentState/targets}}:\r",
                        "                        1. [=?=] [$Validate texture format required features$] of\r",
                        "                            |colorState|.{{GPUColorTargetState/format}} with |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "                1. If |descriptor|.{{GPURenderPipelineDescriptor/depthStencil}} is [=map/exist|provided=]:\r",
                        "                    1. [=?=] [$Validate texture format required features$] of\r",
                        "                        |descriptor|.{{GPURenderPipelineDescriptor/depthStencil}}.{{GPUDepthStencilState/format}}\r",
                        "                        with |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "                1. Let |pipeline| be a new {{GPURenderPipeline}} object.\r",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |pipeline|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. Let |layout| be a new [$default pipeline layout$] for |pipeline| if\r",
                        "                    |descriptor|.{{GPUPipelineDescriptorBase/layout}} is {{GPUAutoLayoutMode/\"auto\"}},\r",
                        "                    and |descriptor|.{{GPUPipelineDescriptorBase/layout}} otherwise.\r",
                        "                1. If any of the following conditions are unsatisfied:\r",
                        "                    [$generate a validation error$], make |pipeline| [=invalid=], and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |layout| is [$valid to use with$] |this|.\r",
                        "                        - [$validating GPURenderPipelineDescriptor$](|descriptor|, |layout|, |this|) succeeds.\r",
                        "                        - |layout|.{{GPUPipelineLayout/[[bindGroupLayouts]]}}.length + |vertexBufferCount| is &le;\r",
                        "                            |this|.{{GPUObjectBase/[[device]]}}.{{device/[[limits]]}}.{{supported limits/maxBindGroupsPlusVertexBuffers}},\r",
                        "                            where |vertexBufferCount| is the maximum index in |descriptor|.{{GPURenderPipelineDescriptor/vertex}}.{{GPUVertexState/buffers}} that is not `undefined`.\r",
                        "                    </div>\r",
                        "                1. If any [=pipeline-creation error|pipeline-creation=] [=uncategorized errors=]\r",
                        "                    result from the implementation of pipeline creation,\r",
                        "                    [$generate an internal error$], make |pipeline| [=invalid=], and stop.\r",
                        "\r",
                        "                    Note:\r",
                        "                    Even if the implementation detected [=uncategorized errors=] in shader module\r",
                        "                    creation, the error is surfaced here.\r",
                        "                1. Set |pipeline|.{{GPURenderPipeline/[[descriptor]]}} to |descriptor|.\r",
                        "                1. Set |pipeline|.{{GPURenderPipeline/[[writesDepth]]}} to false.\r",
                        "                1. Set |pipeline|.{{GPURenderPipeline/[[writesStencil]]}} to false.\r",
                        "                1. Let |depthStencil| be |descriptor|.{{GPURenderPipelineDescriptor/depthStencil}}.\r",
                        "                1. If |depthStencil| is not null:\r",
                        "                    1. Set |pipeline|.{{GPURenderPipeline/[[writesDepth]]}} to |depthStencil|.{{GPUDepthStencilState/depthWriteEnabled}}.\r",
                        "                    1. If |depthStencil|.{{GPUDepthStencilState/stencilWriteMask}} is not 0:\r",
                        "                        1. Let |stencilFront| be |depthStencil|.{{GPUDepthStencilState/stencilFront}}.\r",
                        "                        1. Let |stencilBack| be |depthStencil|.{{GPUDepthStencilState/stencilBack}}.\r",
                        "                        1. Let |cullMode| be |descriptor|.{{GPURenderPipelineDescriptor/primitive}}.{{GPUPrimitiveState/cullMode}}.\r",
                        "                        1. If |cullMode| is not {{GPUCullMode/\"front\"}}, and any of |stencilFront|.{{GPUStencilFaceState/passOp}},\r",
                        "                            |stencilFront|.{{GPUStencilFaceState/depthFailOp}}, or |stencilFront|.{{GPUStencilFaceState/failOp}}\r",
                        "                            is not {{GPUStencilOperation/\"keep\"}}:\r",
                        "                            1. Set |pipeline|.{{GPURenderPipeline/[[writesStencil]]}} to true.\r",
                        "                        1. If |cullMode| is not {{GPUCullMode/\"back\"}}, and any of |stencilBack|.{{GPUStencilFaceState/passOp}},\r",
                        "                            |stencilBack|.{{GPUStencilFaceState/depthFailOp}}, or |stencilBack|.{{GPUStencilFaceState/failOp}}\r",
                        "                            is not {{GPUStencilOperation/\"keep\"}}:\r",
                        "                            1. Set |pipeline|.{{GPURenderPipeline/[[writesStencil]]}} to true.\r",
                        "                1. Set |pipeline|.{{GPUPipelineBase/[[layout]]}} to |layout|.\r",
                        "            </div>\r",
                        "\r",
                        "            Issue: need description of the render states.\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>createRenderPipelineAsync(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Creates a {{GPURenderPipeline}} using [=async pipeline creation=].\r",
                        "        The returned {{Promise}} resolves when the created pipeline\r",
                        "        is ready to be used without additional delay.\r",
                        "\r",
                        "        If pipeline creation fails, the returned {{Promise}} rejects with an {{GPUPipelineError}}.\r",
                        "\r",
                        "        Note: Use of this method is preferred whenever possible, as it prevents blocking the\r",
                        "        [=queue timeline=] work on pipeline compilation.\r",
                        "\r",
                        "        <div algorithm=GPUDevice.createRenderPipelineAsync>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDevice}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUDevice/createRenderPipelineAsync(descriptor)\">\r",
                        "                    |descriptor|: Description of the {{GPURenderPipeline}} to create.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{Promise}}&lt;{{GPURenderPipeline}}&gt;\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let <var data-timeline=content>contentTimeline</var> be the current [=Content timeline=].\r",
                        "                1. Let |promise| be [=a new promise=].\r",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |promise|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. Let |pipeline| be a new {{GPURenderPipeline}} created as if\r",
                        "                    |this|.{{GPUDevice/createRenderPipeline()}} was called with |descriptor|;\r",
                        "\r",
                        "                1. When |pipeline| is ready to be used or has been made [=invalid=], issue the\r",
                        "                    subsequent steps on <var data-timeline=content>contentTimeline</var>.\r",
                        "            </div>\r",
                        "            <div data-timeline=content>\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. If |pipeline| is...\r",
                        "                    <dl class=switch>\r",
                        "                        : [=valid=]\r",
                        "                        :: [=Resolve=] |promise| with |pipeline|.\r",
                        "                        : [=invalid=] due to an [$internal error$]\r",
                        "                        :: [=Reject=] |promise| with a {{GPUPipelineError}} with\r",
                        "                            {{GPUPipelineErrorInit/reason}} {{GPUPipelineErrorReason/\"internal\"}}.\r",
                        "                        : [=invalid=] due to an [$validation error$]\r",
                        "                        :: [=Reject=] |promise| with a {{GPUPipelineError}} with\r",
                        "                            {{GPUPipelineErrorInit/reason}} {{GPUPipelineErrorReason/\"validation\"}}.\r"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createCommandEncoder(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Creates a {{GPUCommandEncoder}}.\r",
                        "\r",
                        "        <div algorithm=GPUDevice.createCommandEncoder>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDevice}} this.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUDevice/createCommandEncoder(descriptor)\">\r",
                        "                    descriptor: Description of the {{GPUCommandEncoder}} to create.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{GPUCommandEncoder}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let |e| be a new {{GPUCommandEncoder}} object.\r",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |e|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. If any of the following conditions are unsatisfied\r",
                        "                    [$generate a validation error$], make |e| [=invalid=], and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this| is [=valid=].\r",
                        "                    </div>\r",
                        "\r",
                        "                Issue: Describe remaining {{GPUDevice/createCommandEncoder()}} validation and\r",
                        "                algorithm steps.\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createRenderBundleEncoder(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Creates a {{GPURenderBundleEncoder}}.\r",
                        "\r",
                        "        <div algorithm=GPUDevice.createRenderBundleEncoder>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDevice}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUDevice/createRenderBundleEncoder(descriptor)\">\r",
                        "                    |descriptor|: Description of the {{GPURenderBundleEncoder}} to create.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{GPURenderBundleEncoder}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. [=?=] [$Validate texture format required features$] of each non-`null` element of\r",
                        "                    |descriptor|.{{GPURenderPassLayout/colorFormats}} with |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "                1. [=?=] [$Validate texture format required features$] of\r",
                        "                    |descriptor|.{{GPURenderPassLayout/depthStencilFormat}} with |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "                1. Let |e| be a new {{GPURenderBundleEncoder}} object.\r",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |e|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. If any of the following conditions are unsatisfied\r",
                        "                    [$generate a validation error$], make |e| [=invalid=], and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this| is [=valid=].\r",
                        "                        - |descriptor|.{{GPURenderPassLayout/colorFormats}}.length must be &le;\r",
                        "                            |this|.{{device/[[limits]]}}.{{supported limits/maxColorAttachments}}.\r",
                        "                        - For each non-`null` |colorFormat| in |descriptor|.{{GPURenderPassLayout/colorFormats}}:\r",
                        "                            - |colorFormat| must be a [=color renderable format=].\r",
                        "                        - [$Calculating color attachment bytes per sample$](|descriptor|.{{GPURenderPassLayout/colorFormats}})\r",
                        "                            must be &le; |this|.{{device/[[limits]]}}.{{supported limits/maxColorAttachmentBytesPerSample}}.\r",
                        "                        - If |descriptor|.{{GPURenderPassLayout/depthStencilFormat}} is [=map/exist|provided=]:\r",
                        "                            - |descriptor|.{{GPURenderPassLayout/depthStencilFormat}} must be a\r",
                        "                                [=depth-or-stencil format=].\r",
                        "                        - There must exist at least one attachment, either:\r",
                        "                            - A non-`null` value in\r",
                        "                                |descriptor|.{{GPURenderPassLayout/colorFormats}}, or\r",
                        "                            - A |descriptor|.{{GPURenderPassLayout/depthStencilFormat}}.\r",
                        "                    </div>\r",
                        "                1. Set |e|.{{GPURenderCommandsMixin/[[layout]]}} to a copy of |descriptor|'s included {{GPURenderPassLayout}} interface.\r",
                        "                1. Set |e|.{{GPURenderCommandsMixin/[[depthReadOnly]]}} to |descriptor|.{{GPURenderBundleEncoderDescriptor/depthReadOnly}}.\r",
                        "                1. Set |e|.{{GPURenderCommandsMixin/[[stencilReadOnly]]}} to |descriptor|.{{GPURenderBundleEncoderDescriptor/stencilReadOnly}}.\r",
                        "                1. Set |e|.{{GPUCommandsMixin/[[state]]}} to \"[=encoder state/open=]\".\r",
                        "                1. Set |e|.{{GPURenderCommandsMixin/[[drawCount]]}} to 0.\r",
                        "\r",
                        "                Issue: Describe the reset of the steps for {{GPUDevice/createRenderBundleEncoder()}}.\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createQuerySet(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Creates a {{GPUQuerySet}}.\r",
                        "\r",
                        "        <div algorithm=GPUDevice.createQuerySet>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDevice}} this.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUDevice/createQuerySet(descriptor)\">\r",
                        "                    descriptor: Description of the {{GPUQuerySet}} to create.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{GPUQuerySet}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. If |descriptor|.{{GPUQuerySetDescriptor/type}} is {{GPUQueryType/\"timestamp\"}},\r",
                        "                    but {{GPUFeatureName/\"timestamp-query\"}} is not [=enabled for=] |this|:\r",
                        "                    1. Throw a {{TypeError}}.\r",
                        "                1. Let |q| be a new {{GPUQuerySet}} object.\r",
                        "                1. Set |q|.{{GPUQuerySet/type}} to |descriptor|.{{GPUQuerySetDescriptor/type}}.\r",
                        "                1. Set |q|.{{GPUQuerySet/count}} to |descriptor|.{{GPUQuerySetDescriptor/count}}.\r",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |q|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. If any of the following requirements are unmet, [$generate a validation error$],\r",
                        "                    make |q| [=invalid=], and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this| is [=valid=].\r",
                        "                        - |descriptor|.{{GPUQuerySetDescriptor/count}} must be &le; 4096.\r",
                        "                    </div>\r",
                        "\r",
                        "                1. Set |q|.{{GPUQuerySet/[[state]]}} to [=query set state/available=].\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>lost</dfn>\r",
                        "    ::\r",
                        "        A [=slot-backed attribute=] holding a promise which is created with the device, remains\r",
                        "        pending for the lifetime of the device, then resolves when the device is lost.\r",
                        "\r",
                        "        Upon initialization, it is set to [=a new promise=].\r"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[errorScopeStack]]</dfn>, of type [=stack=]&lt;[=GPU error scope=]&gt;\r",
                        "    ::\r",
                        "        A [=stack=] of [=GPU error scopes=] that have been pushed to the {{GPUDevice}}.\r"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "method",
                    "lines": [
                        "    : <dfn>pushErrorScope(filter)</dfn>\r",
                        "    ::\r",
                        "        Pushes a new [=GPU error scope=] onto the {{GPUDevice/[[errorScopeStack]]}} for |this|.\r",
                        "\r",
                        "        <div algorithm=GPUDevice.pushErrorScope>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDevice}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUDevice/pushErrorScope(filter)\">\r",
                        "                    |filter|: Which class of errors this error scope observes.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. Let |scope| be a new [=GPU error scope=].\r",
                        "                1. Set |scope|.{{GPU error scope/[[filter]]}} to |filter|.\r",
                        "                1. [=stack/Push=] |scope| onto |this|.{{GPUDevice/[[errorScopeStack]]}}.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>popErrorScope()</dfn>\r",
                        "    ::\r",
                        "        Pops a [=GPU error scope=] off the {{GPUDevice/[[errorScopeStack]]}} for |this|\r",
                        "        and resolves to **any** {{GPUError}} observed by the error scope, or `null` if none.\r",
                        "\r",
                        "        There is no guarantee of the ordering of promise resolution.\r",
                        "\r",
                        "        <div algorithm=GPUDevice.popErrorScope>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDevice}} |this|.\r",
                        "\r",
                        "                **Returns:** {{Promise}}&lt;{{GPUError}}?&gt;\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let <var data-timeline=content>contentTimeline</var> be the current [=Content timeline=].\r",
                        "                1. Let |promise| be [=a new promise=].\r",
                        "                1. Issue the |check steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |promise|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |check steps|:\r",
                        "\r",
                        "                1. If |this| is [=invalid|lost=], issue the following steps on\r",
                        "                    <var data-timeline=content>contentTimeline</var> and return:\r",
                        "\r",
                        "                    <div data-timeline=content>\r",
                        "                        [=Content timeline=] steps:\r",
                        "\r",
                        "                        1. [=Resolve=] |promise| with `null`.\r",
                        "                    </div>\r",
                        "\r",
                        "                    Note: No errors are generated after device loss. See [[#errors-and-debugging]].\r",
                        "\r",
                        "                1. If any of the following requirements are unmet:\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this|.{{GPUDevice/[[errorScopeStack]]}}.[=list/size=] must be &gt; 0.\r",
                        "                    </div>\r",
                        "\r",
                        "                    Then issue the following steps on <var data-timeline=content>contentTimeline</var>\r",
                        "                    and return:\r",
                        "\r",
                        "                    <div data-timeline=content>\r",
                        "                        [=Content timeline=] steps:\r",
                        "\r",
                        "                        1. [=Reject=] |promise| with an {{OperationError}}.\r",
                        "                    </div>\r",
                        "\r",
                        "                1. Let |scope| be the result of [=stack/pop|popping=] an [=list/item=] off of\r",
                        "                    |this|.{{GPUDevice/[[errorScopeStack]]}}.\r",
                        "                1. Let |error| be **any** one of the items in |scope|.{{GPU error scope/[[errors]]}},\r",
                        "                    or `null` if there are none.\r",
                        "\r",
                        "                    For any two errors E1 and E2 in the list, if E2 was caused by E1, E2 **should\r",
                        "                    not** be the one selected.\r",
                        "\r",
                        "                    Note:\r",
                        "                    For example, if E1 comes from `t` = {{GPUDevice/createTexture()}}, and\r",
                        "                    E2 comes from `t`.{{GPUTexture/createView()}} because `t` was [=invalid=],\r",
                        "                    E1 should be be preferred since it will be easier for a developer to understand\r",
                        "                    what went wrong.\r",
                        "                    Since both of these are {{GPUValidationError}}s, the only difference will be in\r",
                        "                    the {{GPUError/message}} field, which is meant only to be read by humans anyway.\r",
                        "\r",
                        "                1. At an **unspecified point now or in the future**,\r",
                        "                    issue the subsequent steps on <var data-timeline=content>contentTimeline</var>.\r",
                        "\r",
                        "                    Note:\r",
                        "                    By allowing {{GPUDevice/popErrorScope()}} calls to resolve in any order, with\r",
                        "                    any of the errors observed by the scope, this spec allows validation to complete\r",
                        "                    out of order, as long as any state observations are made at the appropriate\r",
                        "                    point in adherence to this spec. For example, this allows implementations to\r",
                        "                    perform shader compilation, which depends only on non-stateful inputs, to be\r",
                        "                    completed on a background thread in parallel with other device-timeline work,\r",
                        "                    and report any resulting errors later.\r",
                        "            </div>\r",
                        "            <div data-timeline=content>\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. [=Resolve=] |promise| with |error|.\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPUDevice",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>onuncapturederror</dfn>\r",
                        "    ::\r",
                        "        An [=event handler IDL attribute=] for the {{GPUDevice/uncapturederror}} event type.\r"
                    ]
                }
            ]
        ],
        [
            "GPUBufferMapState",
            [
                {
                    "target": "GPUBufferMapState",
                    "type": "enum-value",
                    "lines": [
                        "            : <dfn>\"unmapped\"</dfn>\r",
                        "            ::\r",
                        "                The buffer is not mapped for use by `this`.{{GPUBuffer/getMappedRange()}}.\r",
                        "\r",
                        "            : <dfn>\"pending\"</dfn>\r",
                        "            ::\r",
                        "                A mapping of the buffer has been requested, but is pending.\r",
                        "                It may succeed, or fail validation in {{GPUBuffer/mapAsync()}}.\r",
                        "\r",
                        "            : <dfn>\"mapped\"</dfn>\r",
                        "            ::\r",
                        "                The buffer is mapped and `this`.{{GPUBuffer/getMappedRange()}} may be used.\r"
                    ]
                }
            ]
        ],
        [
            "GPUBufferDescriptor",
            [
                {
                    "target": "GPUBufferDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>size</dfn>\r",
                        "    ::\r",
                        "        The size of the buffer in bytes.\r",
                        "\r",
                        "    : <dfn>usage</dfn>\r",
                        "    ::\r",
                        "        The allowed usages for the buffer.\r",
                        "\r",
                        "    : <dfn>mappedAtCreation</dfn>\r",
                        "    ::\r",
                        "        If `true` creates the buffer in an already mapped state, allowing\r",
                        "        {{GPUBuffer/getMappedRange()}} to be called immediately. It is valid to set\r",
                        "        {{GPUBufferDescriptor/mappedAtCreation}} to `true` even if {{GPUBufferDescriptor/usage}}\r",
                        "        does not contain {{GPUBufferUsage/MAP_READ}} or {{GPUBufferUsage/MAP_WRITE}}. This can be\r",
                        "        used to set the buffer's initial data.\r",
                        "\r",
                        "        Guarantees that even if the buffer creation eventually fails, it will still appear as if the\r",
                        "        mapped range can be written/read to until it is unmapped.\r"
                    ]
                }
            ]
        ],
        [
            "GPUBufferUsage",
            [
                {
                    "target": "GPUBufferUsage",
                    "type": "const",
                    "lines": [
                        "    : <dfn>MAP_READ</dfn>\r",
                        "    ::\r",
                        "        The buffer can be mapped for reading. (Example: calling {{GPUBuffer/mapAsync()}} with\r",
                        "        {{GPUMapMode/READ|GPUMapMode.READ}})\r",
                        "\r",
                        "        May only be combined with {{GPUBufferUsage/COPY_DST}}.\r",
                        "\r",
                        "    : <dfn>MAP_WRITE</dfn>\r",
                        "    ::\r",
                        "        The buffer can be mapped for writing. (Example: calling {{GPUBuffer/mapAsync()}} with\r",
                        "        {{GPUMapMode/WRITE|GPUMapMode.WRITE}})\r",
                        "\r",
                        "        May only be combined with {{GPUBufferUsage/COPY_SRC}}.\r",
                        "\r",
                        "    : <dfn>COPY_SRC</dfn>\r",
                        "    ::\r",
                        "        The buffer can be used as the source of a copy operation. (Examples: as the `source`\r",
                        "        argument of a {{GPUCommandEncoder/copyBufferToBuffer()}} or\r",
                        "        {{GPUCommandEncoder/copyBufferToTexture()}} call.)\r",
                        "\r",
                        "    : <dfn>COPY_DST</dfn>\r",
                        "    ::\r",
                        "        The buffer can be used as the destination of a copy or write operation. (Examples: as the\r",
                        "        `destination` argument of a {{GPUCommandEncoder/copyBufferToBuffer()}} or\r",
                        "        {{GPUCommandEncoder/copyTextureToBuffer()}} call, or as the target of a\r",
                        "        {{GPUQueue/writeBuffer()}} call.)\r",
                        "\r",
                        "    : <dfn>INDEX</dfn>\r",
                        "    ::\r",
                        "        The buffer can be used as an index buffer. (Example: passed to\r",
                        "        {{GPURenderCommandsMixin/setIndexBuffer()}}.)\r",
                        "\r",
                        "    : <dfn>VERTEX</dfn>\r",
                        "    ::\r",
                        "        The buffer can be used as a vertex buffer. (Example: passed to\r",
                        "        {{GPURenderCommandsMixin/setVertexBuffer()}}.)\r",
                        "\r",
                        "    : <dfn>UNIFORM</dfn>\r",
                        "    ::\r",
                        "        The buffer can be used as a uniform buffer. (Example: as a bind group entry for a\r",
                        "        {{GPUBufferBindingLayout}} with a\r",
                        "        {{GPUBindGroupLayoutEntry/buffer}}.{{GPUBufferBindingLayout/type}} of\r",
                        "        {{GPUBufferBindingType/\"uniform\"}}.)\r",
                        "\r",
                        "    : <dfn>STORAGE</dfn>\r",
                        "    ::\r",
                        "        The buffer can be used as a storage buffer. (Example: as a bind group entry for a\r",
                        "        {{GPUBufferBindingLayout}} with a\r",
                        "        {{GPUBindGroupLayoutEntry/buffer}}.{{GPUBufferBindingLayout/type}} of\r",
                        "        {{GPUBufferBindingType/\"storage\"}} or {{GPUBufferBindingType/\"read-only-storage\"}}.)\r",
                        "\r",
                        "    : <dfn>INDIRECT</dfn>\r",
                        "    ::\r",
                        "        The buffer can be used as to store indirect command arguments. (Examples: as the\r",
                        "        `indirectBuffer` argument of a {{GPURenderCommandsMixin/drawIndirect()}} or\r",
                        "        {{GPUComputePassEncoder/dispatchWorkgroupsIndirect()}} call.)\r",
                        "\r",
                        "    : <dfn>QUERY_RESOLVE</dfn>\r",
                        "    ::\r",
                        "        The buffer can be used to capture query results. (Example: as the `destination` argument of\r",
                        "        a {{GPUCommandEncoder/resolveQuerySet()}} call.)\r"
                    ]
                }
            ]
        ],
        [
            "GPUBuffer",
            [
                {
                    "target": "GPUBuffer",
                    "type": "method",
                    "lines": [
                        "    : <dfn>destroy()</dfn>\r",
                        "    ::\r",
                        "        Destroys the {{GPUBuffer}}.\r",
                        "\r",
                        "        Note: It is valid to destroy a buffer multiple times.\r",
                        "\r",
                        "        <div algorithm=GPUBuffer.destroy>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUBuffer}} |this|.\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Call |this|.{{GPUBuffer/unmap()}}.\r",
                        "\r",
                        "                <!-- POSTV1(multithreading) tentative text:\r",
                        "                    Note: If the buffer is mapped in a different thread, it is not unmapped.\r",
                        "                    It can be unmapped only from the thread on which it is mapped, either by\r",
                        "                    another call to {{GPUBuffer/destroy()|GPUBuffer.destroy()}},\r",
                        "                    or by {{GPUBuffer/unmap()|GPUBuffer.unmap()}}.\r",
                        "                -->\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. Set |this|.{{GPUBuffer/[[internals]]}}.[=buffer internals/state=] to\r",
                        "                    \"[=buffer internals/state/destroyed=]\".\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "        Note: Since no further operations can be enqueued using this buffer, implementations can\r",
                        "        free resource allocations, including mapped memory that was just unmapped.\r"
                    ]
                },
                {
                    "target": "GPUBuffer",
                    "type": "method",
                    "lines": [
                        "    : <dfn>mapAsync(mode, offset, size)</dfn>\r",
                        "    ::\r",
                        "        Maps the given range of the {{GPUBuffer}} and resolves the returned {{Promise}} when the\r",
                        "        {{GPUBuffer}}'s content is ready to be accessed with {{GPUBuffer/getMappedRange()}}.\r",
                        "\r",
                        "        The resolution of the returned {{Promise}} **only** indicates that the buffer has been mapped.\r",
                        "        It does not guarantee the completion of any other operations visible to the [=content timeline=],\r",
                        "        and in particular does not imply that any other {{Promise}} returned from\r",
                        "        {{GPUQueue/onSubmittedWorkDone()}} or {{GPUBuffer/mapAsync()}} on other {{GPUBuffer}}s\r",
                        "        have resolved.\r",
                        "\r",
                        "        The resolution of the {{Promise}} returned from {{GPUQueue/onSubmittedWorkDone()}}\r",
                        "        **does** imply the completion of\r",
                        "        {{GPUBuffer/mapAsync()}} calls made prior to that call,\r",
                        "        on {{GPUBuffer}}s last used exclusively on that queue.\r",
                        "\r",
                        "        <div algorithm=GPUBuffer.mapAsync>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUBuffer}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUBuffer/mapAsync(mode, offset, size)\">\r",
                        "                    |mode|: Whether the buffer should be mapped for reading or writing.\r",
                        "                    |offset|: Offset in bytes into the buffer to the start of the range to map.\r",
                        "                    |size|: Size in bytes of the range to map.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{Promise}}&lt;{{undefined}}&gt;\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let <var data-timeline=content>contentTimeline</var> be the current [=Content timeline=].\r",
                        "                1. If |this|.{{GPUBuffer/[[pending_map]]}} is not `null`:\r",
                        "                    1. Return [=a promise rejected with=] {{OperationError}}.\r",
                        "                1. Let |p| be a new {{Promise}}.\r",
                        "                1. Set |this|.{{GPUBuffer/[[pending_map]]}} to |p|.\r",
                        "                1. Issue the |validation steps| on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "                1. Return |p|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |validation steps|:\r",
                        "\r",
                        "                1. If |size| is `undefined`:\r",
                        "                    1. Let |rangeSize| be max(0, |this|.{{GPUBuffer/size}} - |offset|).\r",
                        "\r",
                        "                    Otherwise:\r",
                        "\r",
                        "                    1. Let |rangeSize| be |size|.\r",
                        "\r",
                        "                1. If any of the following conditions are unsatisfied:\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this| is a [=valid=] {{GPUBuffer}}.\r",
                        "                        - |this|.{{GPUBuffer/[[internals]]}}.[=buffer internals/state=] is \"[=buffer internals/state/available=]\".\r",
                        "                        - |offset| is a multiple of 8.\r",
                        "                        - |rangeSize| is a multiple of 4.\r",
                        "                        - |offset| + |rangeSize| &le; |this|.{{GPUBuffer/size}}\r",
                        "                        - |mode| contains only bits defined in {{GPUMapMode}}.\r",
                        "                        - |mode| contains exactly one of {{GPUMapMode/READ}} or {{GPUMapMode/WRITE}}.\r",
                        "                        - If |mode| contains {{GPUMapMode/READ}} then |this|.{{GPUBuffer/usage}} must contain {{GPUBufferUsage/MAP_READ}}.\r",
                        "                        - If |mode| contains {{GPUMapMode/WRITE}} then |this|.{{GPUBuffer/usage}} must contain {{GPUBufferUsage/MAP_WRITE}}.\r",
                        "                    </div>\r",
                        "\r",
                        "                    Then:\r",
                        "\r",
                        "                    1. Issue the <var data-timeline=content>map failure steps</var> on\r",
                        "                        <var data-timeline=content>contentTimeline</var>.\r",
                        "                    1. [$Generate a validation error$].\r",
                        "                    1. Return.\r",
                        "\r",
                        "                1. Set |this|.{{GPUBuffer/[[internals]]}}.[=buffer internals/state=] to \"[=buffer internals/state/unavailable=]\".\r",
                        "\r",
                        "                    Note: Since the buffer is mapped, its contents cannot change between this completion and {{GPUBuffer/unmap()}}.\r",
                        "                1. If |this|.{{GPUObjectBase/[[device]]}} is lost, or when it [=lose the device|becomes lost=]:\r",
                        "\r",
                        "                    1. Issue the <var data-timeline=content>map failure steps</var> on\r",
                        "                        <var data-timeline=content>contentTimeline</var>.\r",
                        "\r",
                        "                    Otherwise, at an unspecified point:\r",
                        "\r",
                        "                    - after the completion of\r",
                        "                        <span data-timeline=queue>currently-enqueued operations that use |this|</span>,\r",
                        "                    - and no later than the next [=device timeline=] operation after the\r",
                        "                        [=device timeline=] becomes informed of the completion of\r",
                        "                        <span data-timeline=queue>all currently-enqueued operations</span>\r",
                        "                        (regardless of whether they use |this|),\r",
                        "\r",
                        "                    run the following steps:\r",
                        "\r",
                        "                    1. Let |internalStateAtCompletion| be |this|.{{GPUBuffer/[[internals]]}}.[=buffer internals/state=].\r",
                        "\r",
                        "                        Note: If, and only if, at this point the buffer has become \"[=buffer internals/state/available=]\"\r",
                        "                        again due to an {{GPUBuffer/unmap()}} call, then {{GPUBuffer/[[pending_map]]}} != |p| below,\r",
                        "                        so mapping will not succeed in the steps below.\r",
                        "                    1. Let |dataForMappedRegion| be the contents of |this| starting at offset |offset|, for |rangeSize| bytes.\r",
                        "                    1. Issue the <var data-timeline=content>map success steps</var> on the\r",
                        "                        <var data-timeline=content>contentTimeline</var>.\r",
                        "\r",
                        "                    <!-- POSTV1(multi-queue): this may be better described using queue-transfer language. -->\r",
                        "            </div>\r",
                        "            <div data-timeline=content>\r",
                        "                [=Content timeline=] <var data-timeline=content>map success steps</var>:\r",
                        "\r",
                        "                1. If |this|.{{GPUBuffer/[[pending_map]]}} != |p|:\r",
                        "\r",
                        "                    Note: The map has been cancelled by {{GPUBuffer/unmap()}}.\r",
                        "\r",
                        "                    1. [=Assert=] |p| is rejected.\r",
                        "                    1. Return.\r",
                        "                1. [=Assert=] |p| is pending.\r",
                        "                1. [=Assert=] |internalStateAtCompletion| is \"[=buffer internals/state/unavailable=]\".\r",
                        "                1. Let |mapping| be [$initialize an active buffer mapping$]\r",
                        "                    with mode |mode| and range <code>[|offset|, |offset| + |rangeSize|]</code>.\r",
                        "\r",
                        "                    If this allocation fails:\r",
                        "\r",
                        "                    1. Set |this|.{{GPUBuffer/[[pending_map]]}} to `null`,\r",
                        "                        and [=reject=] |p| with a {{RangeError}}.\r",
                        "                    1. Return.\r",
                        "                1. Set the content of |mapping|.[=active buffer mapping/data=] to |dataForMappedRegion|.\r",
                        "                1. Set |this|.{{GPUBuffer/[[mapping]]}} to |mapping|.\r",
                        "                1. Set |this|.{{GPUBuffer/[[pending_map]]}} to `null`,\r",
                        "                    and [=resolve=] |p|.\r",
                        "            </div>\r",
                        "            <div data-timeline=content>\r",
                        "                [=Content timeline=] <var data-timeline=content>map failure steps</var>:\r",
                        "\r",
                        "                1. If |this|.{{GPUBuffer/[[pending_map]]}} != |p|:\r",
                        "\r",
                        "                    Note: The map has been cancelled by {{GPUBuffer/unmap()}}.\r",
                        "\r",
                        "                    1. [=Assert=] |p| is already rejected.\r",
                        "                    1. Return.\r",
                        "                1. [=Assert=] |p| is still pending.\r",
                        "                1. Set |this|.{{GPUBuffer/[[pending_map]]}} to `null`,\r",
                        "                    and [=reject=] |p| with an {{OperationError}}.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>getMappedRange(offset, size)</dfn>\r",
                        "    ::\r",
                        "        Returns an {{ArrayBuffer}} with the contents of the {{GPUBuffer}} in the given mapped range.\r",
                        "\r",
                        "        <div algorithm=GPUBuffer.getMappedRange>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUBuffer}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUBuffer/getMappedRange(offset, size)\">\r",
                        "                    |offset|: Offset in bytes into the buffer to return buffer contents from.\r",
                        "                    |size|: Size in bytes of the {{ArrayBuffer}} to return.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{ArrayBuffer}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. If |size| is missing:\r",
                        "                    1. Let |rangeSize| be max(0, |this|.{{GPUBuffer/size}} - |offset|).\r",
                        "\r",
                        "                    Otherwise, let |rangeSize| be |size|.\r",
                        "\r",
                        "                1. If any of the following conditions are unsatisfied, throw an {{OperationError}} and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this|.{{GPUBuffer/[[mapping]]}} is not `null`.\r",
                        "                        - |offset| is a multiple of 8.\r",
                        "                        - |rangeSize| is a multiple of 4.\r",
                        "                        - |offset| &ge; |this|.{{GPUBuffer/[[mapping]]}}.[=active buffer mapping/range=][0].\r",
                        "                        - |offset| + |rangeSize| &le; |this|.{{GPUBuffer/[[mapping]]}}.[=active buffer mapping/range=][1].\r",
                        "                        - [|offset|, |offset| + |rangeSize|) does not overlap another range in\r",
                        "                            |this|.{{GPUBuffer/[[mapping]]}}.[=active buffer mapping/views=].\r",
                        "\r",
                        "                        Note: It is always valid to get mapped ranges of a {{GPUBuffer}} that is\r",
                        "                        {{GPUBufferDescriptor/mappedAtCreation}}, even if it is [=invalid=], because\r",
                        "                        the [=Content timeline=] might not know it is invalid.\r",
                        "                    </div>\r",
                        "\r",
                        "                1. Let |data| be |this|.{{GPUBuffer/[[mapping]]}}.[=active buffer mapping/data=].\r",
                        "\r",
                        "                1. Let |view| be [=!=] [=ArrayBuffer/create|create an ArrayBuffer=] of size |rangeSize|,\r",
                        "                    but with its pointer mutably referencing the content of |data| at offset\r",
                        "                    (|offset| - {{GPUBuffer/[[mapping]]}}.[=active buffer mapping/range=][0]).\r",
                        "\r",
                        "                    Note: A {{RangeError}} may not be thrown here, because the |data| has already\r",
                        "                    been allocated during {{GPUBuffer/mapAsync()}} or {{GPUDevice/createBuffer()}}.\r",
                        "\r",
                        "                1. Set |view|.{{ArrayBuffer/[[ArrayBufferDetachKey]]}} to \"WebGPUBufferMapping\".\r",
                        "\r",
                        "                    Note: This causes a {{TypeError}} to be thrown if an attempt is made to\r",
                        "                    [$DetachArrayBuffer$], except by {{GPUBuffer/unmap()}}.\r",
                        "\r",
                        "                1. [=list/Append=] |view| to |this|.{{GPUBuffer/[[mapping]]}}.[=active buffer mapping/views=].\r",
                        "\r",
                        "                1. Return |view|.\r",
                        "\r",
                        "                Note: User agents should consider issuing a developer-visible warning if\r",
                        "                {{GPUBuffer/getMappedRange()}} succeeds without having checked the status of\r",
                        "                the map, by waiting for {{GPUBuffer/mapAsync()}} to succeed, querying a\r",
                        "                {{GPUBuffer/mapState}} of {{GPUBufferMapState/\"mapped\"}}, or waiting for a\r",
                        "                later {{GPUQueue/onSubmittedWorkDone()}} call to succeed.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>unmap()</dfn>\r",
                        "    ::\r",
                        "        Unmaps the mapped range of the {{GPUBuffer}} and makes it's contents available for use by the\r",
                        "        GPU again.\r",
                        "\r",
                        "        <div algorithm=GPUBuffer.unmap>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUBuffer}} |this|.\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. If |this|.{{GPUBuffer/[[pending_map]]}} is not `null`:\r",
                        "                    1. [=Reject=] |this|.{{GPUBuffer/[[pending_map]]}} with an {{AbortError}}.\r",
                        "                    1. Set |this|.{{GPUBuffer/[[pending_map]]}} to `null`.\r",
                        "\r",
                        "                1. If |this|.{{GPUBuffer/[[mapping]]}} is `null`:\r",
                        "                    1. Return.\r",
                        "\r",
                        "                1. For each {{ArrayBuffer}} |ab| in |this|.{{GPUBuffer/[[mapping]]}}.[=active buffer mapping/views=]:\r",
                        "                    1. Perform [$DetachArrayBuffer$](|ab|, \"WebGPUBufferMapping\").\r",
                        "\r",
                        "                1. Let |bufferUpdate| be `null`.\r",
                        "\r",
                        "                1. If |this|.{{GPUBuffer/[[mapping]]}}.[=active buffer mapping/mode=] contains {{GPUMapMode/WRITE}}:\r",
                        "                    1. Set |bufferUpdate| to {\r",
                        "                        `data`: |this|.{{GPUBuffer/[[mapping]]}}.[=active buffer mapping/data=],\r",
                        "                        `offset`: |this|.{{GPUBuffer/[[mapping]]}}.[=active buffer mapping/range=][0]\r",
                        "                        }.\r",
                        "\r",
                        "                    Note: When a buffer is mapped without the {{GPUMapMode/WRITE}} mode, then\r",
                        "                    unmapped, any local modifications done by the application to the mapped ranges\r",
                        "                    {{ArrayBuffer}} are discarded and will not affect the content of later mappings.\r",
                        "\r",
                        "                1. Set |this|.{{GPUBuffer/[[mapping]]}} to `null`.\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. If |this|.{{GPUObjectBase/[[device]]}} is [=invalid=], return.\r",
                        "                1. If |bufferUpdate| is not `null`:\r",
                        "\r",
                        "                    1. Issue the following steps on the [=Queue timeline=] of |this|.{{GPUObjectBase/[[device]]}}.{{GPUDevice/queue}}:\r",
                        "\r",
                        "                        <div data-timeline=queue>\r",
                        "                            [=Queue timeline=] steps:\r",
                        "\r",
                        "                            1. Update the contents of |this| at offset |bufferUpdate|.`offset`\r",
                        "                                with the data |bufferUpdate|.`data`.\r",
                        "                        </div>\r",
                        "                1. Set |this|.{{GPUBuffer/[[internals]]}}.[=buffer internals/state=] to \"[=buffer internals/state/available=]\".\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                }
            ]
        ],
        [
            "GPUMapMode",
            [
                {
                    "target": "GPUMapMode",
                    "type": "const",
                    "lines": [
                        "    : <dfn>READ</dfn>\r",
                        "    ::\r",
                        "        Only valid with buffers created with the {{GPUBufferUsage/MAP_READ}} usage.\r",
                        "\r",
                        "        Once the buffer is mapped, calls to {{GPUBuffer/getMappedRange()}} will return an\r",
                        "        {{ArrayBuffer}} containing the buffer's current values. Changes to the returned\r",
                        "        {{ArrayBuffer}} will be discarded after {{GPUBuffer/unmap()}} is called.\r",
                        "\r",
                        "    : <dfn>WRITE</dfn>\r",
                        "    ::\r",
                        "        Only valid with buffers created with the {{GPUBufferUsage/MAP_WRITE}} usage.\r",
                        "\r",
                        "        Once the buffer is mapped, calls to {{GPUBuffer/getMappedRange()}} will return an\r",
                        "        {{ArrayBuffer}} containing the buffer's current values. Changes to the returned\r",
                        "        {{ArrayBuffer}} will be stored in the {{GPUBuffer}} after {{GPUBuffer/unmap()}} is called.\r",
                        "\r",
                        "        Note: Since the {{GPUBufferUsage/MAP_WRITE}} buffer usage may only be combined with the\r",
                        "        {{GPUBufferUsage/COPY_SRC}} buffer usage, mapping for writing can never return values\r",
                        "        produced by the GPU, and the returned {{ArrayBuffer}} will only ever contain the default\r",
                        "        initialized data (zeros) or data written by the webpage during a previous mapping.\r"
                    ]
                }
            ]
        ],
        [
            "GPUTexture",
            [
                {
                    "target": "GPUTexture",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>width</dfn>\r",
                        "    ::\r",
                        "        The width of this {{GPUTexture}}.\r",
                        "\r",
                        "    : <dfn>height</dfn>\r",
                        "    ::\r",
                        "        The height of this {{GPUTexture}}.\r",
                        "\r",
                        "    : <dfn>depthOrArrayLayers</dfn>\r",
                        "    ::\r",
                        "        The depth or layer count of this {{GPUTexture}}.\r",
                        "\r",
                        "    : <dfn>mipLevelCount</dfn>\r",
                        "    ::\r",
                        "        The number of mip levels of this {{GPUTexture}}.\r",
                        "\r",
                        "    : <dfn>sampleCount</dfn>\r",
                        "    ::\r",
                        "        The number of sample count of this {{GPUTexture}}.\r",
                        "\r",
                        "    : <dfn>dimension</dfn>\r",
                        "    ::\r",
                        "        The dimension of the set of texel for each of this {{GPUTexture}}'s subresources.\r",
                        "\r",
                        "    : <dfn>format</dfn>\r",
                        "    ::\r",
                        "        The format of this {{GPUTexture}}.\r",
                        "\r",
                        "    : <dfn>usage</dfn>\r",
                        "    ::\r",
                        "        The allowed usages for this {{GPUTexture}}.\r"
                    ]
                },
                {
                    "target": "GPUTexture",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[size]]</dfn>, of type {{GPUExtent3D}}\r",
                        "    ::\r",
                        "        The size of the texture (same as the {{GPUTexture/width}}, {{GPUTexture/height}}, and\r",
                        "        {{GPUTexture/depthOrArrayLayers}} attributes).\r",
                        "\r",
                        "    : <dfn>\\[[viewFormats]]</dfn>, of type [=sequence=]&lt;{{GPUTextureFormat}}&gt;\r",
                        "    ::\r",
                        "        The set of {{GPUTextureFormat}}s that can be used {{GPUTextureViewDescriptor}}.{{GPUTextureViewDescriptor/format}}\r",
                        "        when creating views on this {{GPUTexture}}.\r",
                        "\r",
                        "    : <dfn>\\[[destroyed]]</dfn>, of type `boolean`, initially false\r",
                        "    ::\r",
                        "        If the texture is destroyed, it can no longer be used in any operation,\r",
                        "        and its underlying memory can be freed.\r"
                    ]
                },
                {
                    "target": "GPUTexture",
                    "type": "method",
                    "lines": [
                        "    : <dfn>destroy()</dfn>\r",
                        "    ::\r",
                        "        Destroys the {{GPUTexture}}.\r",
                        "\r",
                        "        <div algorithm=GPUTexture.destroy>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUTexture}} |this|.\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Set |this|.{{GPUTexture/[[destroyed]]}} to true.\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPUTexture",
                    "type": "method",
                    "lines": [
                        "    : <dfn>createView(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Creates a {{GPUTextureView}}.\r",
                        "\r",
                        "        <div class=note heading>\r",
                        "            By default {{GPUTexture/createView()}} will create a view with a dimension that can\r",
                        "            represent the entire texture. For example, calling {{GPUTexture/createView()}} without\r",
                        "            specifying a {{GPUTextureViewDescriptor/dimension}} on a {{GPUTextureDimension/\"2d\"}}\r",
                        "            texture with more than one layer will create a {{GPUTextureViewDimension/\"2d-array\"}}\r",
                        "            {{GPUTextureView}}, even if an {{GPUTextureViewDescriptor/arrayLayerCount}} of 1 is\r",
                        "            specified.\r",
                        "\r",
                        "            For textures created from sources where the layer count is unknown at the\r",
                        "            time of development it is recommended that calls to {{GPUTexture/createView()}} are provided\r",
                        "            with an explicit {{GPUTextureViewDescriptor/dimension}} to ensure shader compatibility.\r",
                        "        </div>\r",
                        "\r",
                        "        <div algorithm=GPUTexture.createView>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUTexture}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUTexture/createView(descriptor)\">\r",
                        "                    |descriptor|: Description of the {{GPUTextureView}} to create.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** |view|, of type {{GPUTextureView}}.\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. [=?=] [$Validate texture format required features$] of\r",
                        "                    |descriptor|.{{GPUTextureViewDescriptor/format}} with |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "                1. Let |view| be a new {{GPUTextureView}} object.\r",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |view|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. Set |descriptor| to the result of [$resolving GPUTextureViewDescriptor defaults$]\r",
                        "                    for |this| with |descriptor|.\r",
                        "                1. If any of the following conditions are unsatisfied\r",
                        "                    [$generate a validation error$], make |view| [=invalid=], and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this| is [=valid=].\r",
                        "                        - |descriptor|.{{GPUTextureViewDescriptor/aspect}} must be present in |this|.{{GPUTexture/format}}.\r",
                        "                        - If the |descriptor|.{{GPUTextureViewDescriptor/aspect}} is {{GPUTextureAspect/\"all\"}}:\r",
                        "                            - |descriptor|.{{GPUTextureViewDescriptor/format}} must equal either\r",
                        "                                    |this|.{{GPUTexture/format}} or one\r",
                        "                                    of the formats in |this|.{{GPUTexture/[[viewFormats]]}}.\r",
                        "\r",
                        "                            Otherwise:\r",
                        "\r",
                        "                            - |descriptor|.{{GPUTextureViewDescriptor/format}} must equal the result of [$resolving GPUTextureAspect$](\r",
                        "                                |this|.{{GPUTexture/format}},\r",
                        "                                |descriptor|.{{GPUTextureViewDescriptor/aspect}}).\r",
                        "\r",
                        "                        - |descriptor|.{{GPUTextureViewDescriptor/mipLevelCount}} must be &gt; 0.\r",
                        "                        - |descriptor|.{{GPUTextureViewDescriptor/baseMipLevel}} +\r",
                        "                            |descriptor|.{{GPUTextureViewDescriptor/mipLevelCount}} must be &le;\r",
                        "                            |this|.{{GPUTexture/mipLevelCount}}.\r",
                        "                        - |descriptor|.{{GPUTextureViewDescriptor/arrayLayerCount}} must be &gt; 0.\r",
                        "                        - |descriptor|.{{GPUTextureViewDescriptor/baseArrayLayer}} +\r",
                        "                            |descriptor|.{{GPUTextureViewDescriptor/arrayLayerCount}} must be &le;\r",
                        "                            the [$array layer count$] of |this|.\r",
                        "                        - If |this|.{{GPUTexture/sampleCount}} &gt; 1,\r",
                        "                            |descriptor|.{{GPUTextureViewDescriptor/dimension}} must be {{GPUTextureViewDimension/\"2d\"}}.\r",
                        "                        - If |descriptor|.{{GPUTextureViewDescriptor/dimension}} is:\r",
                        "\r",
                        "                            <dl class=switch>\r",
                        "                                : {{GPUTextureViewDimension/\"1d\"}}\r",
                        "                                ::\r",
                        "                                    - |this|.{{GPUTexture/dimension}} must be {{GPUTextureDimension/\"1d\"}}.\r",
                        "                                    - |descriptor|.{{GPUTextureViewDescriptor/arrayLayerCount}} must be `1`.\r",
                        "\r",
                        "                                : {{GPUTextureViewDimension/\"2d\"}}\r",
                        "                                ::\r",
                        "\r",
                        "                                    - |this|.{{GPUTexture/dimension}} must be {{GPUTextureDimension/\"2d\"}}.\r",
                        "                                    - |descriptor|.{{GPUTextureViewDescriptor/arrayLayerCount}} must be `1`.\r",
                        "\r",
                        "                                : {{GPUTextureViewDimension/\"2d-array\"}}\r",
                        "                                ::\r",
                        "                                    - |this|.{{GPUTexture/dimension}} must be {{GPUTextureDimension/\"2d\"}}.\r",
                        "\r",
                        "                                : {{GPUTextureViewDimension/\"cube\"}}\r",
                        "                                ::\r",
                        "                                    - |this|.{{GPUTexture/dimension}} must be {{GPUTextureDimension/\"2d\"}}.\r",
                        "                                    - |descriptor|.{{GPUTextureViewDescriptor/arrayLayerCount}} must be `6`.\r",
                        "                                    - |this|.{{GPUTexture/width}} must equal |this|.{{GPUTexture/height}}.\r",
                        "\r",
                        "                                : {{GPUTextureViewDimension/\"cube-array\"}}\r",
                        "                                ::\r",
                        "                                    - |this|.{{GPUTexture/dimension}} must be {{GPUTextureDimension/\"2d\"}}.\r",
                        "                                    - |descriptor|.{{GPUTextureViewDescriptor/arrayLayerCount}} must be a multiple of `6`.\r",
                        "                                    - |this|.{{GPUTexture/width}} must equal |this|.{{GPUTexture/height}}.\r",
                        "\r",
                        "                                : {{GPUTextureViewDimension/\"3d\"}}\r",
                        "                                ::\r",
                        "                                    - |this|.{{GPUTexture/dimension}} must be {{GPUTextureDimension/\"3d\"}}.\r",
                        "                                    - |descriptor|.{{GPUTextureViewDescriptor/arrayLayerCount}} must be `1`.\r"
                    ]
                }
            ]
        ],
        [
            "GPUTextureDescriptor",
            [
                {
                    "target": "GPUTextureDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>size</dfn>\r",
                        "    ::\r",
                        "        The width, height, and depth or layer count of the texture.\r",
                        "\r",
                        "    : <dfn>mipLevelCount</dfn>\r",
                        "    ::\r",
                        "        The number of mip levels the texture will contain.\r",
                        "\r",
                        "    : <dfn>sampleCount</dfn>\r",
                        "    ::\r",
                        "        The sample count of the texture. A {{GPUTextureDescriptor/sampleCount}} &gt; `1` indicates\r",
                        "        a multisampled texture.\r",
                        "\r",
                        "    : <dfn>dimension</dfn>\r",
                        "    ::\r",
                        "        Whether the texture is one-dimensional, an array of two-dimensional layers, or three-dimensional.\r",
                        "\r",
                        "    : <dfn>format</dfn>\r",
                        "    ::\r",
                        "        The format of the texture.\r",
                        "\r",
                        "    : <dfn>usage</dfn>\r",
                        "    ::\r",
                        "        The allowed usages for the texture.\r",
                        "\r",
                        "    : <dfn>viewFormats</dfn>\r",
                        "    ::\r",
                        "        Specifies what view {{GPUTextureViewDescriptor/format}} values will be allowed when calling\r",
                        "        {{GPUTexture/createView()}} on this texture (in addition to the texture's actual\r",
                        "        {{GPUTextureDescriptor/format}}).\r",
                        "\r",
                        "        <div class=note heading>\r",
                        "            Adding a format to this list may have a significant performance impact, so it is best\r",
                        "            to avoid adding formats unnecessarily.\r",
                        "\r",
                        "            The actual performance impact is highly dependent on the target system; developers must\r",
                        "            test various systems to find out the impact on their particular application.\r",
                        "            For example, on some systems any texture with a {{GPUTextureDescriptor/format}} or\r",
                        "            {{GPUTextureDescriptor/viewFormats}} entry including\r",
                        "            {{GPUTextureFormat/\"rgba8unorm-srgb\"}} will perform less optimally than a\r",
                        "            {{GPUTextureFormat/\"rgba8unorm\"}} texture which does not.\r",
                        "            Similar caveats exist for other formats and pairs of formats on other systems.\r",
                        "        </div>\r",
                        "\r",
                        "        Formats in this list must be [=texture view format compatible=] with the texture format.\r",
                        "\r",
                        "        <div algorithm>\r",
                        "            Two {{GPUTextureFormat}}s |format| and |viewFormat| are <dfn dfn for=\"\">texture view format compatible</dfn> if:\r",
                        "\r",
                        "            - |format| equals |viewFormat|, or\r",
                        "            - |format| and |viewFormat| differ only in whether they are `srgb` formats (have the `-srgb` suffix).\r",
                        "        </div>\r"
                    ]
                }
            ]
        ],
        [
            "GPUTextureDimension",
            [
                {
                    "target": "GPUTextureDimension",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"1d\"</dfn>\r",
                        "    ::\r",
                        "        Specifies a texture that has one dimension, width.\r",
                        "\r",
                        "    : <dfn>\"2d\"</dfn>\r",
                        "    ::\r",
                        "        Specifies a texture that has a width and height, and may have layers. Only\r",
                        "        {{GPUTextureDimension/\"2d\"}} textures may have mipmaps, be multisampled, use a compressed or\r",
                        "        depth/stencil format, and be used as a render attachment.\r",
                        "\r",
                        "    : <dfn>\"3d\"</dfn>\r",
                        "    ::\r",
                        "        Specifies a texture that has a width, height, and depth.\r"
                    ]
                }
            ]
        ],
        [
            "GPUTextureUsage",
            [
                {
                    "target": "GPUTextureUsage",
                    "type": "const",
                    "lines": [
                        "    : <dfn>COPY_SRC</dfn>\r",
                        "    ::\r",
                        "        The texture can be used as the source of a copy operation. (Examples: as the `source`\r",
                        "        argument of a {{GPUCommandEncoder/copyTextureToTexture()}} or\r",
                        "        {{GPUCommandEncoder/copyTextureToBuffer()}} call.)\r",
                        "\r",
                        "    : <dfn>COPY_DST</dfn>\r",
                        "    ::\r",
                        "        The texture can be used as the destination of a copy or write operation. (Examples: as the\r",
                        "        `destination` argument of a {{GPUCommandEncoder/copyTextureToTexture()}} or\r",
                        "        {{GPUCommandEncoder/copyBufferToTexture()}} call, or as the target of a\r",
                        "        {{GPUQueue/writeTexture()}} call.)\r",
                        "\r",
                        "    : <dfn>TEXTURE_BINDING</dfn>\r",
                        "    ::\r",
                        "        The texture can be bound for use as a sampled texture in a shader (Example: as a bind group\r",
                        "        entry for a {{GPUTextureBindingLayout}}.)\r",
                        "\r",
                        "    : <dfn>STORAGE_BINDING</dfn>\r",
                        "    ::\r",
                        "        The texture can be bound for use as a storage texture in a shader (Example: as a bind group\r",
                        "        entry for a {{GPUStorageTextureBindingLayout}}.)\r",
                        "\r",
                        "    : <dfn>RENDER_ATTACHMENT</dfn>\r",
                        "    ::\r",
                        "        The texture can be used as a color or depth/stencil attachment in a render pass.\r",
                        "        (Example: as a {{GPURenderPassColorAttachment}}.{{GPURenderPassColorAttachment/view}} or\r",
                        "        {{GPURenderPassDepthStencilAttachment}}.{{GPURenderPassDepthStencilAttachment/view}}.)\r"
                    ]
                }
            ]
        ],
        [
            "GPUTextureView",
            [
                {
                    "target": "GPUTextureView",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[texture]]</dfn>\r",
                        "    ::\r",
                        "        The {{GPUTexture}} into which this is a view.\r",
                        "\r",
                        "    : <dfn>\\[[descriptor]]</dfn>\r",
                        "    ::\r",
                        "        The {{GPUTextureViewDescriptor}} describing this texture view.\r",
                        "\r",
                        "        All optional fields of {{GPUTextureViewDescriptor}} are defined.\r",
                        "\r",
                        "    : <dfn>\\[[renderExtent]]</dfn>\r",
                        "    ::\r",
                        "        For renderable views, this is the effective {{GPUExtent3DDict}} for rendering.\r",
                        "\r",
                        "        Note: this extent depends on the {{GPUTextureViewDescriptor/baseMipLevel}}.\r"
                    ]
                }
            ]
        ],
        [
            "GPUTextureViewDescriptor",
            [
                {
                    "target": "GPUTextureViewDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>format</dfn>\r",
                        "    ::\r",
                        "        The format of the texture view. Must be either the {{GPUTextureDescriptor/format}} of the\r",
                        "        texture or one of the {{GPUTextureDescriptor/viewFormats}} specified during its creation.\r",
                        "\r",
                        "    : <dfn>dimension</dfn>\r",
                        "    ::\r",
                        "        The dimension to view the texture as.\r",
                        "\r",
                        "    : <dfn>aspect</dfn>\r",
                        "    ::\r",
                        "        Which {{GPUTextureAspect|aspect(s)}} of the texture are accessible to the texture view.\r",
                        "\r",
                        "    : <dfn>baseMipLevel</dfn>\r",
                        "    ::\r",
                        "        The first (most detailed) mipmap level accessible to the texture view.\r",
                        "\r",
                        "    : <dfn>mipLevelCount</dfn>\r",
                        "    ::\r",
                        "        How many mipmap levels, starting with {{GPUTextureViewDescriptor/baseMipLevel}}, are accessible to\r",
                        "        the texture view.\r",
                        "\r",
                        "    : <dfn>baseArrayLayer</dfn>\r",
                        "    ::\r",
                        "        The index of the first array layer accessible to the texture view.\r",
                        "\r",
                        "    : <dfn>arrayLayerCount</dfn>\r",
                        "    ::\r",
                        "        How many array layers, starting with {{GPUTextureViewDescriptor/baseArrayLayer}}, are accessible\r",
                        "        to the texture view.\r"
                    ]
                }
            ]
        ],
        [
            "GPUTextureViewDimension",
            [
                {
                    "target": "GPUTextureViewDimension",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"1d\"</dfn>\r",
                        "    ::\r",
                        "        The texture is viewed as a 1-dimensional image.\r",
                        "\r",
                        "        Corresponding WGSL types:\r",
                        "\r",
                        "        - `texture_1d`\r",
                        "        - `texture_storage_1d`\r",
                        "\r",
                        "    : <dfn>\"2d\"</dfn>\r",
                        "    ::\r",
                        "        The texture is viewed as a single 2-dimensional image.\r",
                        "\r",
                        "        Corresponding WGSL types:\r",
                        "\r",
                        "        - `texture_2d`\r",
                        "        - `texture_storage_2d`\r",
                        "        - `texture_multisampled_2d`\r",
                        "        - `texture_depth_2d`\r",
                        "        - `texture_depth_multisampled_2d`\r",
                        "\r",
                        "    : <dfn>\"2d-array\"</dfn>\r",
                        "    ::\r",
                        "        The texture view is viewed as an array of 2-dimensional images.\r",
                        "\r",
                        "        Corresponding WGSL types:\r",
                        "\r",
                        "        - `texture_2d_array`\r",
                        "        - `texture_storage_2d_array`\r",
                        "        - `texture_depth_2d_array`\r",
                        "\r",
                        "    : <dfn>\"cube\"</dfn>\r",
                        "    ::\r",
                        "        The texture is viewed as a cubemap.\r",
                        "        The view has 6 array layers, corresponding to the [+X, -X, +Y, -Y, +Z, -Z] faces of the cube.\r",
                        "        Sampling is done seamlessly across the faces of the cubemap.\r",
                        "\r",
                        "        Corresponding WGSL types:\r",
                        "\r",
                        "        - `texture_cube`\r",
                        "        - `texture_depth_cube`\r",
                        "\r",
                        "    : <dfn>\"cube-array\"</dfn>\r",
                        "    ::\r",
                        "        The texture is viewed as a packed array of `n` cubemaps,\r",
                        "        each with 6 array layers corresponding to the [+X, -X, +Y, -Y, +Z, -Z] faces of the cube.\r",
                        "        Sampling is done seamlessly across the faces of the cubemaps.\r",
                        "\r",
                        "        Corresponding WGSL types:\r",
                        "\r",
                        "        - `texture_cube_array`\r",
                        "        - `texture_depth_cube_array`\r",
                        "\r",
                        "    : <dfn>\"3d\"</dfn>\r",
                        "    ::\r",
                        "        The texture is viewed as a 3-dimensional image.\r",
                        "\r",
                        "        Corresponding WGSL types:\r",
                        "\r",
                        "        - `texture_3d`\r",
                        "        - `texture_storage_3d`\r"
                    ]
                }
            ]
        ],
        [
            "GPUTextureAspect",
            [
                {
                    "target": "GPUTextureAspect",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"all\"</dfn>\r",
                        "    ::\r",
                        "        All available aspects of the texture format will be accessible to the texture view. For\r",
                        "        color formats the color aspect will be accessible. For\r",
                        "        [=combined depth-stencil format=]s both the depth and stencil aspects will be accessible.\r",
                        "        [=Depth-or-stencil format=]s with a single aspect will only make that aspect accessible.\r",
                        "\r",
                        "        The [=GPUTextureAspect/set of aspects=] is [[=aspect/color=], [=aspect/depth=], [=aspect/stencil=]].\r",
                        "\r",
                        "    : <dfn>\"stencil-only\"</dfn>\r",
                        "    ::\r",
                        "        Only the stencil aspect of a [=depth-or-stencil format=] format will be accessible to the\r",
                        "        texture view.\r",
                        "\r",
                        "        The [=GPUTextureAspect/set of aspects=] is [[=aspect/stencil=]].\r",
                        "\r",
                        "    : <dfn>\"depth-only\"</dfn>\r",
                        "    ::\r",
                        "        Only the depth aspect of a [=depth-or-stencil format=] format will be accessible to the\r",
                        "        texture view.\r",
                        "\r",
                        "        The [=GPUTextureAspect/set of aspects=] is [[=aspect/depth=]].\r"
                    ]
                }
            ]
        ],
        [
            "GPUExternalTexture",
            [
                {
                    "target": "GPUExternalTexture",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[expired]]</dfn>, of type `boolean`\r",
                        "    ::\r",
                        "        Indicates whether the object has expired (can no longer be used).\r",
                        "        Initially set to `false`.\r",
                        "\r",
                        "        Note:\r",
                        "        Unlike similar `\\[[destroyed]]` slots, this can change from `true` back to `false`.\r",
                        "\r",
                        "    : <dfn>\\[[descriptor]]</dfn>, of type {{GPUExternalTextureDescriptor}}\r",
                        "    ::\r",
                        "        The descriptor with which the texture was created.\r"
                    ]
                }
            ]
        ],
        [
            "GPUSampler",
            [
                {
                    "target": "GPUSampler",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[descriptor]]</dfn>, of type {{GPUSamplerDescriptor}}, readonly\r",
                        "    ::\r",
                        "        The {{GPUSamplerDescriptor}} with which the {{GPUSampler}} was created.\r",
                        "\r",
                        "    : <dfn>\\[[isComparison]]</dfn>, of type {{boolean}}\r",
                        "    ::\r",
                        "        Whether the {{GPUSampler}} is used as a comparison sampler.\r",
                        "\r",
                        "    : <dfn>\\[[isFiltering]]</dfn>, of type {{boolean}}\r",
                        "    ::\r",
                        "        Whether the {{GPUSampler}} weights multiple samples of a texture.\r"
                    ]
                }
            ]
        ],
        [
            "GPUSamplerDescriptor",
            [
                {
                    "target": "GPUSamplerDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>addressModeU</dfn>\r",
                        "    : <dfn>addressModeV</dfn>\r",
                        "    : <dfn>addressModeW</dfn>\r",
                        "    ::\r",
                        "        Specifies the {{GPUAddressMode|address modes}} for the texture width, height, and depth\r",
                        "        coordinates, respectively.\r",
                        "\r",
                        "    : <dfn>magFilter</dfn>\r",
                        "    ::\r",
                        "        Specifies the sampling behavior when the sample footprint is smaller than or equal to one\r",
                        "        texel.\r",
                        "\r",
                        "    : <dfn>minFilter</dfn>\r",
                        "    ::\r",
                        "        Specifies the sampling behavior when the sample footprint is larger than one texel.\r",
                        "\r",
                        "    : <dfn>mipmapFilter</dfn>\r",
                        "    ::\r",
                        "        Specifies behavior for sampling between mipmap levels.\r",
                        "\r",
                        "    : <dfn>lodMinClamp</dfn>\r",
                        "    : <dfn>lodMaxClamp</dfn>\r",
                        "    ::\r",
                        "        Specifies the minimum and maximum levels of detail, respectively, used internally when\r",
                        "        sampling a texture.\r",
                        "\r",
                        "    : <dfn>compare</dfn>\r",
                        "    ::\r",
                        "        When provided the sampler will be a comparison sampler with the specified\r",
                        "        {{GPUCompareFunction}}.\r",
                        "\r",
                        "        Note: Comparison samplers may use filtering, but the sampling results will be\r",
                        "        implementation-dependent and may differ from the normal filtering rules.\r",
                        "\r",
                        "    : <dfn>maxAnisotropy</dfn>\r",
                        "    ::\r",
                        "        Specifies the maximum anisotropy value clamp used by the sampler.\r",
                        "\r",
                        "        Note: Most implementations support {{GPUSamplerDescriptor/maxAnisotropy}} values in range\r",
                        "        between 1 and 16, inclusive. The used value of {{GPUSamplerDescriptor/maxAnisotropy}} will\r",
                        "        be clamped to the maximum value that the platform supports.\r"
                    ]
                }
            ]
        ],
        [
            "GPUAddressMode",
            [
                {
                    "target": "GPUAddressMode",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"clamp-to-edge\"</dfn>\r",
                        "    ::\r",
                        "        Texture coordinates are clamped between 0.0 and 1.0, inclusive.\r",
                        "\r",
                        "    : <dfn>\"repeat\"</dfn>\r",
                        "    ::\r",
                        "        Texture coordinates wrap to the other side of the texture.\r",
                        "\r",
                        "    : <dfn>\"mirror-repeat\"</dfn>\r",
                        "    ::\r",
                        "        Texture coordinates wrap to the other side of the texture, but the texture is flipped\r",
                        "        when the integer part of the coordinate is odd.\r"
                    ]
                }
            ]
        ],
        [
            "GPUFilterMode",
            [
                {
                    "target": "GPUFilterMode",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"nearest\"</dfn>\r",
                        "    ::\r",
                        "        Return the value of the texel nearest to the texture coordinates.\r",
                        "\r",
                        "    : <dfn>\"linear\"</dfn>\r",
                        "    ::\r",
                        "        Select two texels in each dimension and return a linear interpolation between their values.\r"
                    ]
                }
            ]
        ],
        [
            "GPUCompareFunction",
            [
                {
                    "target": "GPUCompareFunction",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"never\"</dfn>\r",
                        "    ::\r",
                        "        Comparison tests never pass.\r",
                        "\r",
                        "    : <dfn>\"less\"</dfn>\r",
                        "    ::\r",
                        "        A provided value passes the comparison test if it is less than the sampled value.\r",
                        "\r",
                        "    : <dfn>\"equal\"</dfn>\r",
                        "    ::\r",
                        "        A provided value passes the comparison test if it is equal to the sampled value.\r",
                        "\r",
                        "    : <dfn>\"less-equal\"</dfn>\r",
                        "    ::\r",
                        "        A provided value passes the comparison test if it is less than or equal to the sampled value.\r",
                        "\r",
                        "    : <dfn>\"greater\"</dfn>\r",
                        "    ::\r",
                        "        A provided value passes the comparison test if it is greater than the sampled value.\r",
                        "\r",
                        "    : <dfn>\"not-equal\"</dfn>\r",
                        "    ::\r",
                        "        A provided value passes the comparison test if it is not equal to the sampled value.\r",
                        "\r",
                        "    : <dfn>\"greater-equal\"</dfn>\r",
                        "    ::\r",
                        "        A provided value passes the comparison test if it is greater than or equal to the sampled value.\r",
                        "\r",
                        "    : <dfn>\"always\"</dfn>\r",
                        "    ::\r",
                        "        Comparison tests always pass.\r"
                    ]
                }
            ]
        ],
        [
            "GPUBindGroupLayout",
            [
                {
                    "target": "GPUBindGroupLayout",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[descriptor]]</dfn>, of type {{GPUBindGroupLayoutDescriptor}}\r",
                        "    ::\r"
                    ]
                },
                {
                    "target": "GPUBindGroupLayout",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[entryMap]]</dfn>, of type [=ordered map=]&lt;{{GPUSize32}}, {{GPUBindGroupLayoutEntry}}&gt;\r",
                        "    ::\r",
                        "        The map of binding indices pointing to the {{GPUBindGroupLayoutEntry}}s,\r",
                        "        which this {{GPUBindGroupLayout}} describes.\r",
                        "\r",
                        "    : <dfn>\\[[dynamicOffsetCount]]</dfn>, of type {{GPUSize32}}\r",
                        "    ::\r",
                        "        The number of buffer bindings with dynamic offsets in this {{GPUBindGroupLayout}}.\r",
                        "\r",
                        "    : <dfn>\\[[exclusivePipeline]]</dfn>, of type {{GPUPipelineBase}}?, initially `null`\r",
                        "    ::\r",
                        "        The pipeline that created this {{GPUBindGroupLayout}}, if it was created as part of a\r",
                        "        [[#default-pipeline-layout|default pipeline layout]]. If not `null`, {{GPUBindGroup}}s\r",
                        "        created with this {{GPUBindGroupLayout}} can only be used with the specified\r",
                        "        {{GPUPipelineBase}}.\r"
                    ]
                }
            ]
        ],
        [
            "GPUBindGroupLayoutEntry",
            [
                {
                    "target": "GPUBindGroupLayoutEntry",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>binding</dfn>\r",
                        "    ::\r",
                        "        A unique identifier for a resource binding within the {{GPUBindGroupLayout}}, corresponding\r",
                        "        to a {{GPUBindGroupEntry/binding|GPUBindGroupEntry.binding}} and a [=@binding=]\r",
                        "        attribute in the {{GPUShaderModule}}.\r",
                        "\r",
                        "    : <dfn>visibility</dfn>\r",
                        "    ::\r",
                        "        A bitset of the members of {{GPUShaderStage}}.\r",
                        "        Each set bit indicates that a {{GPUBindGroupLayoutEntry}}'s resource\r",
                        "        will be accessible from the associated shader stage.\r",
                        "\r",
                        "    : <dfn>buffer</dfn>\r",
                        "    ::\r",
                        "        When [=map/exist|provided=], indicates the [=binding resource type=] for this {{GPUBindGroupLayoutEntry}}\r",
                        "        is {{GPUBufferBinding}}.\r",
                        "\r",
                        "    : <dfn>sampler</dfn>\r",
                        "    ::\r",
                        "        When [=map/exist|provided=], indicates the [=binding resource type=] for this {{GPUBindGroupLayoutEntry}}\r",
                        "        is {{GPUSampler}}.\r",
                        "\r",
                        "    : <dfn>texture</dfn>\r",
                        "    ::\r",
                        "        When [=map/exist|provided=], indicates the [=binding resource type=] for this {{GPUBindGroupLayoutEntry}}\r",
                        "        is {{GPUTextureView}}.\r",
                        "\r",
                        "    : <dfn>storageTexture</dfn>\r",
                        "    ::\r",
                        "        When [=map/exist|provided=], indicates the [=binding resource type=] for this {{GPUBindGroupLayoutEntry}}\r",
                        "        is {{GPUTextureView}}.\r",
                        "\r",
                        "    : <dfn>externalTexture</dfn>\r",
                        "    ::\r",
                        "        When [=map/exist|provided=], indicates the [=binding resource type=] for this {{GPUBindGroupLayoutEntry}}\r",
                        "        is {{GPUExternalTexture}}.\r"
                    ]
                }
            ]
        ],
        [
            "GPUShaderStage",
            [
                {
                    "target": "GPUShaderStage",
                    "type": "const",
                    "lines": [
                        "    : <dfn>VERTEX</dfn>\r",
                        "    ::\r",
                        "        The bind group entry will be accessible to vertex shaders.\r",
                        "\r",
                        "    : <dfn>FRAGMENT</dfn>\r",
                        "    ::\r",
                        "        The bind group entry will be accessible to fragment shaders.\r",
                        "\r",
                        "    : <dfn>COMPUTE</dfn>\r",
                        "    ::\r",
                        "        The bind group entry will be accessible to compute shaders.\r"
                    ]
                }
            ]
        ],
        [
            "GPUBufferBindingLayout",
            [
                {
                    "target": "GPUBufferBindingLayout",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>type</dfn>\r",
                        "    ::\r",
                        "        Indicates the type required for buffers bound to this bindings.\r",
                        "\r",
                        "    : <dfn>hasDynamicOffset</dfn>\r",
                        "    ::\r",
                        "        Indicates whether this binding requires a dynamic offset.\r",
                        "\r",
                        "    : <dfn>minBindingSize</dfn>\r",
                        "    ::\r",
                        "        Indicates the minimum {{GPUBufferBinding/size}} of a buffer binding used with this bind point.\r",
                        "\r",
                        "        Bindings are always validated against this size in {{GPUDevice/createBindGroup()}}.\r",
                        "\r",
                        "        If this *is not* `0`, pipeline creation additionally [$validating shader binding|validates$]\r",
                        "        that this value &ge; the [=minimum buffer binding size=] of the variable.\r",
                        "\r",
                        "        If this *is* `0`, it is ignored by pipeline creation, and instead draw/dispatch commands\r",
                        "        [$Validate encoder bind groups|validate$] that each binding in the {{GPUBindGroup}}\r",
                        "        satisfies the [=minimum buffer binding size=] of the variable.\r",
                        "\r",
                        "        Note:\r",
                        "        Similar execution-time validation is theoretically possible for other\r",
                        "        binding-related fields specified for early validation, like\r",
                        "        {{GPUTextureBindingLayout/sampleType}} and {{GPUStorageTextureBindingLayout/format}},\r",
                        "        which currently can only be validated in pipeline creation.\r",
                        "        However, such execution-time validation could be costly or unnecessarily complex, so it is\r",
                        "        available only for {{GPUBufferBindingLayout/minBindingSize}} which is expected to have the\r",
                        "        most ergonomic impact.\r"
                    ]
                }
            ]
        ],
        [
            "GPUSamplerBindingLayout",
            [
                {
                    "target": "GPUSamplerBindingLayout",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>type</dfn>\r",
                        "    ::\r",
                        "        Indicates the required type of a sampler bound to this bindings.\r"
                    ]
                }
            ]
        ],
        [
            "GPUTextureBindingLayout",
            [
                {
                    "target": "GPUTextureBindingLayout",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>sampleType</dfn>\r",
                        "    ::\r",
                        "        Indicates the type required for texture views bound to this binding.\r",
                        "\r",
                        "    : <dfn>viewDimension</dfn>\r",
                        "    ::\r",
                        "        Indicates the required {{GPUTextureViewDescriptor/dimension}} for texture views bound to\r",
                        "        this binding.\r",
                        "\r",
                        "    : <dfn>multisampled</dfn>\r",
                        "    ::\r",
                        "        Indicates whether or not texture views bound to this binding must be multisampled.\r"
                    ]
                }
            ]
        ],
        [
            "GPUStorageTextureBindingLayout",
            [
                {
                    "target": "GPUStorageTextureBindingLayout",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>access</dfn>\r",
                        "    ::\r",
                        "        The access mode for this binding, indicating readability and writability.\r",
                        "\r",
                        "    : <dfn>format</dfn>\r",
                        "    ::\r",
                        "        The required {{GPUTextureViewDescriptor/format}} of texture views bound to this binding.\r",
                        "\r",
                        "    : <dfn>viewDimension</dfn>\r",
                        "    ::\r",
                        "        Indicates the required {{GPUTextureViewDescriptor/dimension}} for texture views bound to\r",
                        "        this binding.\r"
                    ]
                }
            ]
        ],
        [
            "GPUBindGroup",
            [
                {
                    "target": "GPUBindGroup",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[layout]]</dfn>, of type {{GPUBindGroupLayout}}, readonly\r",
                        "    ::\r",
                        "        The {{GPUBindGroupLayout}} associated with this {{GPUBindGroup}}.\r",
                        "\r",
                        "    : <dfn>\\[[entries]]</dfn>, of type [=sequence=]&lt;{{GPUBindGroupEntry}}&gt;, readonly\r",
                        "    ::\r",
                        "        The set of {{GPUBindGroupEntry}}s this {{GPUBindGroup}} describes.\r",
                        "\r",
                        "    : <dfn>\\[[usedResources]]</dfn>, of type [=ordered map=]&lt;[=subresource=], [=list=]&lt;[=internal usage=]&gt;&gt;, readonly\r",
                        "    ::\r",
                        "        The set of buffer and texture [=subresource=]s used by this bind group,\r",
                        "        associated with lists of the [=internal usage=] flags.\r"
                    ]
                }
            ]
        ],
        [
            "GPUBindGroupDescriptor",
            [
                {
                    "target": "GPUBindGroupDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>layout</dfn>\r",
                        "    ::\r",
                        "        The {{GPUBindGroupLayout}} the entries of this bind group will conform to.\r",
                        "\r",
                        "    : <dfn>entries</dfn>\r",
                        "    ::\r",
                        "        A list of entries describing the resources to expose to the shader for each binding\r",
                        "        described by the {{GPUBindGroupDescriptor/layout}}.\r"
                    ]
                }
            ]
        ],
        [
            "GPUBindGroupEntry",
            [
                {
                    "target": "GPUBindGroupEntry",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>binding</dfn>\r",
                        "    ::\r",
                        "        A unique identifier for a resource binding within the {{GPUBindGroup}}, corresponding to a\r",
                        "        {{GPUBindGroupLayoutEntry/binding|GPUBindGroupLayoutEntry.binding}} and a [=@binding=]\r",
                        "        attribute in the {{GPUShaderModule}}.\r",
                        "\r",
                        "    : <dfn>resource</dfn>\r",
                        "    ::\r",
                        "        The resource to bind, which may be a {{GPUSampler}}, {{GPUTextureView}},\r",
                        "        {{GPUExternalTexture}}, or {{GPUBufferBinding}}.\r"
                    ]
                }
            ]
        ],
        [
            "GPUBufferBinding",
            [
                {
                    "target": "GPUBufferBinding",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>buffer</dfn>\r",
                        "    ::\r",
                        "        The {{GPUBuffer}} to bind.\r",
                        "\r",
                        "    : <dfn>offset</dfn>\r",
                        "    ::\r",
                        "        The offset, in bytes, from the beginning of {{GPUBufferBinding/buffer}} to the\r",
                        "        beginning of the range exposed to the shader by the buffer binding.\r",
                        "\r",
                        "    : <dfn>size</dfn>\r",
                        "    ::\r",
                        "        The size, in bytes, of the buffer binding.\r",
                        "        If not [=map/exist|provided=], specifies the range starting at\r",
                        "        {{GPUBufferBinding/offset}} and ending at the end of {{GPUBufferBinding/buffer}}.\r"
                    ]
                }
            ]
        ],
        [
            "GPUPipelineLayout",
            [
                {
                    "target": "GPUPipelineLayout",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[bindGroupLayouts]]</dfn>, of type [=list=]&lt;{{GPUBindGroupLayout}}&gt;\r",
                        "    ::\r",
                        "        The {{GPUBindGroupLayout}} objects provided at creation in {{GPUPipelineLayoutDescriptor/bindGroupLayouts|GPUPipelineLayoutDescriptor.bindGroupLayouts}}.\r"
                    ]
                }
            ]
        ],
        [
            "GPUPipelineLayoutDescriptor",
            [
                {
                    "target": "GPUPipelineLayoutDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>bindGroupLayouts</dfn>\r",
                        "    ::\r",
                        "        A list of {{GPUBindGroupLayout}}s the pipeline will use. Each element corresponds to a\r",
                        "        [=@group=] attribute in the {{GPUShaderModule}}, with the `N`th element corresponding with\r",
                        "        `@group(N)`.\r"
                    ]
                }
            ]
        ],
        [
            "GPUShaderModuleDescriptor",
            [
                {
                    "target": "GPUShaderModuleDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>code</dfn>\r",
                        "    ::\r",
                        "        The <a href=\"https://gpuweb.github.io/gpuweb/wgsl/\">WGSL</a> source code for the shader\r",
                        "        module.\r",
                        "\r",
                        "    : <dfn>sourceMap</dfn>\r",
                        "    ::\r",
                        "        If defined MAY be interpreted as a source-map-v3 format.\r",
                        "\r",
                        "        Source maps are optional, but serve as a standardized way to support dev-tool\r",
                        "        integration such as source-language debugging [[SourceMap]].\r",
                        "        WGSL names (identifiers) in source maps follow the rules defined in [=WGSL identifier\r",
                        "        comparison=].\r",
                        "\r",
                        "    : <dfn>compilationHints</dfn>\r",
                        "    ::\r",
                        "        A list of {{GPUShaderModuleCompilationHint}}s.\r",
                        "\r",
                        "        Any hint provided by an application **should** contain information about one entry point of\r",
                        "        a pipeline that will eventually be created from the entry point.\r",
                        "\r",
                        "        Implementations **should** use any information present in the {{GPUShaderModuleCompilationHint}}\r",
                        "        to perform as much compilation as is possible within {{GPUDevice/createShaderModule()}}.\r",
                        "\r",
                        "        Aside from type-checking, these hints are not validated in any way.\r",
                        "\r",
                        "        <div class=note heading>\r",
                        "            Supplying information in {{GPUShaderModuleDescriptor/compilationHints}} does not have any\r",
                        "            observable effect, other than performance. It may be detrimental to performance to\r",
                        "            provide hints for pipelines that never end up being created.\r",
                        "\r",
                        "            Because a single shader module can hold\r",
                        "            multiple entry points, and multiple pipelines can be created from a single shader\r",
                        "            module, it can be more performant for an implementation to do as much compilation as\r",
                        "            possible once in {{GPUDevice/createShaderModule()}} rather than multiple times in\r",
                        "            the multiple calls to {{GPUDevice/createComputePipeline()}} or\r",
                        "            {{GPUDevice/createRenderPipeline()}}.\r",
                        "        </div>\r",
                        "\r",
                        "        Note:\r",
                        "        Hints are not validated in an observable way, but user agents **may** surface identifiable\r",
                        "        errors (like unknown entry point names or incompatible pipeline layouts) to developers,\r",
                        "        for example in the browser developer console.\r"
                    ]
                }
            ]
        ],
        [
            "GPUShaderModuleCompilationHint",
            [
                {
                    "target": "GPUShaderModuleCompilationHint",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>layout</dfn>\r",
                        "    ::\r",
                        "        A {{GPUPipelineLayout}} that the {{GPUShaderModule}} may be used with in a future\r",
                        "        {{GPUDevice/createComputePipeline()}} or {{GPUDevice/createRenderPipeline()}} call.\r",
                        "        If set to {{GPUAutoLayoutMode/\"auto\"}} the layout will be the [$default pipeline layout$]\r",
                        "        for the entry point associated with this hint will be used.\r"
                    ]
                }
            ]
        ],
        [
            "GPUCompilationMessage",
            [
                {
                    "target": "GPUCompilationMessage",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>message</dfn>\r",
                        "    ::\r",
                        "        The human-readable, [=localizable text=] for this compilation message.\r",
                        "\r",
                        "        Note: The {{GPUCompilationMessage/message}} should follow the [=best practices for language\r",
                        "        and direction information=]. This includes making use of any future standards which may\r",
                        "        emerge regarding the reporting of string language and direction metadata.\r",
                        "\r",
                        "        <p class=\"note editorial\"><span class=marker>Editorial note:</span>\r",
                        "        At the time of this writing, no language/direction recommendation is available that provides\r",
                        "        compatibility and consistency with legacy APIs, but when there is, adopt it formally.\r",
                        "\r",
                        "    : <dfn>type</dfn>\r",
                        "    ::\r",
                        "        The severity level of the message.\r",
                        "\r",
                        "        If the {{GPUCompilationMessage/type}} is {{GPUCompilationMessageType/\"error\"}}, it\r",
                        "        corresponds to a [=shader-creation error=].\r",
                        "\r",
                        "    : <dfn>lineNum</dfn>\r",
                        "    ::\r",
                        "        The line number in the shader {{GPUShaderModuleDescriptor/code}} the\r",
                        "        {{GPUCompilationMessage/message}} corresponds to. Value is one-based, such that a lineNum of\r",
                        "        `1` indicates the first line of the shader {{GPUShaderModuleDescriptor/code}}. Lines are\r",
                        "        delimited by [=line breaks=].\r",
                        "\r",
                        "        If the {{GPUCompilationMessage/message}} corresponds to a substring this points to\r",
                        "        the line on which the substring begins. Must be `0` if the {{GPUCompilationMessage/message}}\r",
                        "        does not correspond to any specific point in the shader {{GPUShaderModuleDescriptor/code}}.\r",
                        "\r",
                        "    : <dfn>linePos</dfn>\r",
                        "    ::\r",
                        "        The offset, in UTF-16 code units, from the beginning of line {{GPUCompilationMessage/lineNum}}\r",
                        "        of the shader {{GPUShaderModuleDescriptor/code}} to the point or beginning of the substring\r",
                        "        that the {{GPUCompilationMessage/message}} corresponds to. Value is one-based, such that a\r",
                        "        {{GPUCompilationMessage/linePos}} of `1` indicates the first code unit of the line.\r",
                        "\r",
                        "        If {{GPUCompilationMessage/message}} corresponds to a substring this points to the\r",
                        "        first UTF-16 code unit of the substring. Must be `0` if the {{GPUCompilationMessage/message}}\r",
                        "        does not correspond to any specific point in the shader {{GPUShaderModuleDescriptor/code}}.\r",
                        "\r",
                        "    : <dfn>offset</dfn>\r",
                        "    ::\r",
                        "        The offset from the beginning of the shader {{GPUShaderModuleDescriptor/code}} in UTF-16\r",
                        "        code units to the point or beginning of the substring that {{GPUCompilationMessage/message}}\r",
                        "        corresponds to. Must reference the same position as {{GPUCompilationMessage/lineNum}} and\r",
                        "        {{GPUCompilationMessage/linePos}}. Must be `0` if the {{GPUCompilationMessage/message}}\r",
                        "        does not correspond to any specific point in the shader {{GPUShaderModuleDescriptor/code}}.\r",
                        "\r",
                        "    : <dfn>length</dfn>\r",
                        "    ::\r",
                        "        The number of UTF-16 code units in the substring that {{GPUCompilationMessage/message}}\r",
                        "        corresponds to. If the message does not correspond with a substring then\r",
                        "        {{GPUCompilationMessage/length}} must be 0.\r"
                    ]
                }
            ]
        ],
        [
            "GPUShaderModule",
            [
                {
                    "target": "GPUShaderModule",
                    "type": "method",
                    "lines": [
                        "    : <dfn>getCompilationInfo()</dfn>\r",
                        "    ::\r",
                        "        Returns any messages generated during the {{GPUShaderModule}}'s compilation.\r",
                        "\r",
                        "        The locations, order, and contents of messages are implementation-defined.\r",
                        "        In particular, messages may not be ordered by {{GPUCompilationMessage/lineNum}}.\r",
                        "\r",
                        "        <div algorithm=GPUShaderModule.getCompilationInfo>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUShaderModule}} this\r",
                        "\r",
                        "                **Returns:** {{Promise}}&lt;{{GPUCompilationInfo}}&gt;\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let <var data-timeline=content>contentTimeline</var> be the current [=Content timeline=].\r",
                        "                1. Let |promise| be [=a new promise=].\r",
                        "                1. Issue the |synchronization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |promise|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |synchronization steps|:\r",
                        "\r",
                        "                1. When the [=device timeline=] becomes informed that [=shader module creation=] has\r",
                        "                    completed for |this|:\r",
                        "                    1. Let |messages| be a list of any errors, warnings, or informational messages\r",
                        "                        generated during [=shader module creation=] for |this|.\r",
                        "                    1. Issue the subsequent steps on <var data-timeline=content>contentTimeline</var>.\r",
                        "            </div>\r",
                        "            <div data-timeline=content>\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let |info| be a new {{GPUCompilationInfo}}.\r",
                        "                1. For each |message| in |messages|:\r",
                        "                    1. Let |m| be a new {{GPUCompilationMessage}}.\r",
                        "                    1. Set |m|.{{GPUCompilationMessage/message}} to be the text of |message|.\r",
                        "                    1.\r",
                        "                        <dl class=switch>\r",
                        "                            : If |message| is a [=shader-creation error=]:\r",
                        "                            :: Set |m|.{{GPUCompilationMessage/type}} to\r",
                        "                                {{GPUCompilationMessageType/\"error\"}}\r",
                        "                            : If |message| is a warning:\r",
                        "                            :: Set |m|.{{GPUCompilationMessage/type}} to\r",
                        "                                {{GPUCompilationMessageType/\"warning\"}}\r",
                        "                            : Otherwise:\r",
                        "                            :: Set |m|.{{GPUCompilationMessage/type}} to\r",
                        "                                {{GPUCompilationMessageType/\"info\"}}\r"
                    ]
                }
            ]
        ],
        [
            "GPUPipelineError",
            [
                {
                    "target": "GPUPipelineError",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>reason</dfn>\r",
                        "    ::\r",
                        "        A read-only [=slot-backed attribute=] exposing the type of error encountered in pipeline creation\r",
                        "        as a <dfn enum for=\"\">GPUPipelineErrorReason</dfn>:\r",
                        "\r",
                        "        <ul dfn-type=enum-value dfn-for=GPUPipelineErrorReason>\r",
                        "            - <dfn>\"validation\"</dfn>: A [$validation error$].\r",
                        "            - <dfn>\"internal\"</dfn>: An [$internal error$].\r",
                        "        </ul>\r"
                    ]
                }
            ]
        ],
        [
            "GPUPipelineDescriptorBase",
            [
                {
                    "target": "GPUPipelineDescriptorBase",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>layout</dfn>\r",
                        "    ::\r",
                        "        The {{GPUPipelineLayout}} for this pipeline, or {{GPUAutoLayoutMode/\"auto\"}} to generate\r",
                        "        the pipeline layout automatically.\r",
                        "\r",
                        "        Note: If {{GPUAutoLayoutMode/\"auto\"}} is used the pipeline cannot share {{GPUBindGroup}}s\r",
                        "        with any other pipelines.\r"
                    ]
                }
            ]
        ],
        [
            "GPUPipelineBase",
            [
                {
                    "target": "GPUPipelineBase",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[layout]]</dfn>, of type `GPUPipelineLayout`\r",
                        "    ::\r",
                        "        The definition of the layout of resources which can be used with `this`.\r"
                    ]
                },
                {
                    "target": "GPUPipelineBase",
                    "type": "method",
                    "lines": [
                        "    : <dfn>getBindGroupLayout(index)</dfn>\r",
                        "    ::\r",
                        "        Gets a {{GPUBindGroupLayout}} that is compatible with the {{GPUPipelineBase}}'s\r",
                        "        {{GPUBindGroupLayout}} at `index`.\r",
                        "\r",
                        "        <div algorithm=GPUPipelineBase.getBindGroupLayout>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUPipelineBase}} |this|\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUPipelineBase/getBindGroupLayout(index)\">\r",
                        "                    |index|: Index into the pipeline layout's {{GPUPipelineLayout/[[bindGroupLayouts]]}}\r",
                        "                        sequence.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{GPUBindGroupLayout}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let |layout| be a new {{GPUBindGroupLayout}} object.\r",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |layout|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. If any of the following conditions are unsatisfied\r",
                        "                    [$generate a validation error$], make |layout| [=invalid=], and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this| is [=valid=].\r",
                        "                        - |index| &lt; the [=list/size=] of\r",
                        "                            |this|.{{GPUPipelineBase/[[layout]]}}.{{GPUPipelineLayout/[[bindGroupLayouts]]}}\r",
                        "                    </div>\r",
                        "\r",
                        "                1. Initialize |layout| so it is a copy of\r",
                        "                    |this|.{{GPUPipelineBase/[[layout]]}}.{{GPUPipelineLayout/[[bindGroupLayouts]]}}[|index|].\r",
                        "\r",
                        "                    Note: {{GPUBindGroupLayout}} is only ever used by-value, not by-reference,\r",
                        "                    so this is equivalent to returning the same internal object in a new wrapper.\r",
                        "                    A new {{GPUBindGroupLayout}} wrapper is returned each time to avoid a round-trip\r",
                        "                    between the [=Content timeline=] and the [=Device timeline=].\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                }
            ]
        ],
        [
            "GPUProgrammableStage",
            [
                {
                    "target": "GPUProgrammableStage",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>module</dfn>\r",
                        "    ::\r",
                        "        The {{GPUShaderModule}} containing the code that this programmable stage will execute.\r",
                        "\r",
                        "    : <dfn>entryPoint</dfn>\r",
                        "    ::\r",
                        "        The name of the function in {{GPUProgrammableStage/module}} that this stage will use to\r",
                        "        perform its work.\r",
                        "\r",
                        "        NOTE: Since the {{GPUProgrammableStage/entryPoint}} dictionary member is\r",
                        "        not required, the consumer of a {{GPUProgrammableStage}} must use the\r",
                        "        \"[$get the entry point$]\" algorithm to determine which entry point\r",
                        "        it refers to.\r",
                        "\r",
                        "    : <dfn>constants</dfn>\r",
                        "    ::\r",
                        "        Specifies the values of [=pipeline-overridable=] constants in the shader module\r",
                        "        {{GPUProgrammableStage/module}}.\r",
                        "\r",
                        "        Each such [=pipeline-overridable=] constant is uniquely identified by a single\r",
                        "        [=pipeline-overridable constant identifier string=], representing the [=pipeline\r",
                        "        constant ID=] of the constant if its declaration specifies one, and otherwise the\r",
                        "        constant's identifier name.\r",
                        "\r",
                        "        The key of each key-value pair must equal the\r",
                        "        [=pipeline-overridable constant identifier string|identifier string=]\r",
                        "        of one such constant, with the comparison performed\r",
                        "        according to the rules for [=WGSL identifier comparison=].\r",
                        "        When the pipeline is executed, that constant will have the specified value.\r",
                        "\r",
                        "        Values are specified as <dfn typedef for=\"\">GPUPipelineConstantValue</dfn>, which is a {{double}}.\r",
                        "        They are converted [$to WGSL type$] of the pipeline-overridable constant (`bool`/`i32`/`u32`/`f32`/`f16`).\r",
                        "        If conversion fails, a validation error is generated.\r",
                        "\r",
                        "        <div class=example>\r",
                        "            Pipeline-overridable constants defined in WGSL:\r",
                        "\r",
                        "            <pre highlight=wgsl>\r",
                        "                @id(0)      override has_point_light: bool = true;  // Algorithmic control.\r",
                        "                @id(1200)   override specular_param: f32 = 2.3;     // Numeric control.\r",
                        "                @id(1300)   override gain: f32;                     // Must be overridden.\r",
                        "                            override width: f32 = 0.0;              // Specifed at the API level\r",
                        "                                                                    //   using the name \"width\".\r",
                        "                            override depth: f32;                    // Specifed at the API level\r",
                        "                                                                    //   using the name \"depth\".\r",
                        "                                                                    //   Must be overridden.\r",
                        "                            override height = 2 * depth;            // The default value\r",
                        "                                                                    // (if not set at the API level),\r",
                        "                                                                    // depends on another\r",
                        "                                                                    // overridable constant.\r",
                        "            </pre>\r",
                        "\r",
                        "            Corresponding JavaScript code, providing only the overrides which are required\r",
                        "            (have no defaults):\r",
                        "\r",
                        "            <pre highlight=js>\r",
                        "                {\r",
                        "                    // ...\r",
                        "                    constants: {\r",
                        "                        1300: 2.0,  // \"gain\"\r",
                        "                        depth: -1,  // \"depth\"\r",
                        "                    }\r",
                        "                }\r",
                        "            </pre>\r",
                        "\r",
                        "            Corresponding JavaScript code, overriding all constants:\r",
                        "\r",
                        "            <pre highlight=js>\r",
                        "                {\r",
                        "                    // ...\r",
                        "                    constants: {\r",
                        "                        0: false,   // \"has_point_light\"\r",
                        "                        1200: 3.0,  // \"specular_param\"\r",
                        "                        1300: 2.0,  // \"gain\"\r",
                        "                        width: 20,  // \"width\"\r",
                        "                        depth: -1,  // \"depth\"\r",
                        "                        height: 15, // \"height\"\r",
                        "                    }\r",
                        "                }\r",
                        "            </pre>\r",
                        "        </div>\r"
                    ]
                }
            ]
        ],
        [
            "GPUComputePipelineDescriptor",
            [
                {
                    "target": "GPUComputePipelineDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>compute</dfn>\r",
                        "    ::\r",
                        "        Describes the compute shader entry point of the [=pipeline=].\r"
                    ]
                }
            ]
        ],
        [
            "GPURenderPipeline",
            [
                {
                    "target": "GPURenderPipeline",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[descriptor]]</dfn>, of type {{GPURenderPipelineDescriptor}}\r",
                        "    ::\r",
                        "        The {{GPURenderPipelineDescriptor}} describing this pipeline.\r",
                        "\r",
                        "        All optional fields of {{GPURenderPipelineDescriptor}} are defined.\r",
                        "\r",
                        "    : <dfn>\\[[writesDepth]]</dfn>, of type boolean\r",
                        "    :: True if the pipeline writes to the depth component of the depth/stencil attachment\r",
                        "\r",
                        "    : <dfn>\\[[writesStencil]]</dfn>, of type boolean\r",
                        "    :: True if the pipeline writes to the stencil component of the depth/stencil attachment\r"
                    ]
                }
            ]
        ],
        [
            "GPURenderPipelineDescriptor",
            [
                {
                    "target": "GPURenderPipelineDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>vertex</dfn>\r",
                        "    ::\r",
                        "        Describes the vertex shader entry point of the [=pipeline=] and its input buffer layouts.\r",
                        "\r",
                        "    : <dfn>primitive</dfn>\r",
                        "    ::\r",
                        "        Describes the primitive-related properties of the [=pipeline=].\r",
                        "\r",
                        "    : <dfn>depthStencil</dfn>\r",
                        "    ::\r",
                        "        Describes the optional depth-stencil properties, including the testing, operations, and bias.\r",
                        "\r",
                        "    : <dfn>multisample</dfn>\r",
                        "    ::\r",
                        "        Describes the multi-sampling properties of the [=pipeline=].\r",
                        "\r",
                        "    : <dfn>fragment</dfn>\r",
                        "    ::\r",
                        "        Describes the fragment shader entry point of the [=pipeline=] and its output colors. If\r",
                        "        not [=map/exist|provided=], the [[#no-color-output]] mode is enabled.\r"
                    ]
                }
            ]
        ],
        [
            "GPUPrimitiveState",
            [
                {
                    "target": "GPUPrimitiveState",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>topology</dfn>\r",
                        "    ::\r",
                        "        The type of primitive to be constructed from the vertex inputs.\r",
                        "\r",
                        "    : <dfn>stripIndexFormat</dfn>\r",
                        "    ::\r",
                        "        For pipelines with strip topologies\r",
                        "        ({{GPUPrimitiveTopology/\"line-strip\"}} or {{GPUPrimitiveTopology/\"triangle-strip\"}}),\r",
                        "        this determines the index buffer format and primitive restart value\r",
                        "        ({{GPUIndexFormat/\"uint16\"}}/`0xFFFF` or {{GPUIndexFormat/\"uint32\"}}/`0xFFFFFFFF`).\r",
                        "        It is not allowed on pipelines with non-strip topologies.\r",
                        "\r",
                        "        Note: Some implementations require knowledge of the primitive restart value to compile\r",
                        "        pipeline state objects.\r",
                        "\r",
                        "        To use a strip-topology pipeline with an indexed draw call\r",
                        "        ({{GPURenderCommandsMixin/drawIndexed()}} or {{GPURenderCommandsMixin/drawIndexedIndirect()}}),\r",
                        "        this must be set, and it must match the index buffer format used with the draw call\r",
                        "        (set in {{GPURenderCommandsMixin/setIndexBuffer()}}).\r",
                        "\r",
                        "        See [[#primitive-assembly]] for additional details.\r",
                        "\r",
                        "    : <dfn>frontFace</dfn>\r",
                        "    ::\r",
                        "        Defines which polygons are considered [=front-facing=].\r",
                        "\r",
                        "    : <dfn>cullMode</dfn>\r",
                        "    ::\r",
                        "        Defines which polygon orientation will be culled, if any.\r",
                        "\r",
                        "    : <dfn>unclippedDepth</dfn>\r",
                        "    ::\r",
                        "        If true, indicates that [=depth clipping=] is disabled.\r",
                        "\r",
                        "        Requires the {{GPUFeatureName/\"depth-clip-control\"}} feature to be enabled.\r"
                    ]
                }
            ]
        ],
        [
            "GPUPrimitiveTopology",
            [
                {
                    "target": "GPUPrimitiveTopology",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"point-list\"</dfn>\r",
                        "    ::\r",
                        "        Each vertex defines a point primitive.\r",
                        "\r",
                        "    : <dfn>\"line-list\"</dfn>\r",
                        "    ::\r",
                        "        Each consecutive pair of two vertices defines a line primitive.\r",
                        "\r",
                        "    : <dfn>\"line-strip\"</dfn>\r",
                        "    ::\r",
                        "        Each vertex after the first defines a line primitive between it and the previous vertex.\r",
                        "\r",
                        "    : <dfn>\"triangle-list\"</dfn>\r",
                        "    ::\r",
                        "        Each consecutive triplet of three vertices defines a triangle primitive.\r",
                        "\r",
                        "    : <dfn>\"triangle-strip\"</dfn>\r",
                        "    ::\r",
                        "        Each vertex after the first two defines a triangle primitive between it and the previous\r",
                        "        two vertices.\r"
                    ]
                }
            ]
        ],
        [
            "GPUFrontFace",
            [
                {
                    "target": "GPUFrontFace",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"ccw\"</dfn>\r",
                        "    ::\r",
                        "        Polygons with vertices whose framebuffer coordinates are given in counter-clockwise order\r",
                        "        are considered [=front-facing=].\r",
                        "\r",
                        "    : <dfn>\"cw\"</dfn>\r",
                        "    ::\r",
                        "        Polygons with vertices whose framebuffer coordinates are given in clockwise order are\r",
                        "        considered [=front-facing=].\r"
                    ]
                }
            ]
        ],
        [
            "GPUCullMode",
            [
                {
                    "target": "GPUCullMode",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"none\"</dfn>\r",
                        "    ::\r",
                        "        No polygons are discarded.\r",
                        "\r",
                        "    : <dfn>\"front\"</dfn>\r",
                        "    ::\r",
                        "        [=Front-facing=] polygons are discarded.\r",
                        "\r",
                        "    : <dfn>\"back\"</dfn>\r",
                        "    ::\r",
                        "        [=Back-facing=] polygons are discarded.\r"
                    ]
                }
            ]
        ],
        [
            "GPUMultisampleState",
            [
                {
                    "target": "GPUMultisampleState",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>count</dfn>\r",
                        "    ::\r",
                        "        Number of samples per pixel. This {{GPURenderPipeline}} will be compatible only\r",
                        "        with attachment textures ({{GPURenderPassDescriptor/colorAttachments}}\r",
                        "        and {{GPURenderPassDescriptor/depthStencilAttachment}})\r",
                        "        with matching {{GPUTextureDescriptor/sampleCount}}s.\r",
                        "\r",
                        "    : <dfn>mask</dfn>\r",
                        "    ::\r",
                        "        Mask determining which samples are written to.\r",
                        "\r",
                        "    : <dfn>alphaToCoverageEnabled</dfn>\r",
                        "    ::\r",
                        "        When `true` indicates that a fragment's alpha channel should be used to generate a sample\r",
                        "        coverage mask.\r"
                    ]
                }
            ]
        ],
        [
            "GPUFragmentState",
            [
                {
                    "target": "GPUFragmentState",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>targets</dfn>\r",
                        "    ::\r",
                        "        A list of {{GPUColorTargetState}} defining the formats and behaviors of the color targets\r",
                        "        this pipeline writes to.\r"
                    ]
                }
            ]
        ],
        [
            "GPUColorTargetState",
            [
                {
                    "target": "GPUColorTargetState",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>format</dfn>\r",
                        "    ::\r",
                        "        The {{GPUTextureFormat}} of this color target. The pipeline will only be compatible with\r",
                        "        {{GPURenderPassEncoder}}s which use a {{GPUTextureView}} of this format in the\r",
                        "        corresponding color attachment.\r",
                        "\r",
                        "    : <dfn>blend</dfn>\r",
                        "    ::\r",
                        "        The blending behavior for this color target. If left undefined, disables blending for this\r",
                        "        color target.\r",
                        "\r",
                        "    : <dfn>writeMask</dfn>\r",
                        "    ::\r",
                        "        Bitmask controlling which channels are are written to when drawing to this color target.\r"
                    ]
                }
            ]
        ],
        [
            "GPUBlendState",
            [
                {
                    "target": "GPUBlendState",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>color</dfn>\r",
                        "    ::\r",
                        "        Defines the blending behavior of the corresponding render target for color channels.\r",
                        "\r",
                        "    : <dfn>alpha</dfn>\r",
                        "    ::\r",
                        "        Defines the blending behavior of the corresponding render target for the alpha channel.\r"
                    ]
                }
            ]
        ],
        [
            "GPUBlendComponent",
            [
                {
                    "target": "GPUBlendComponent",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>operation</dfn>\r",
                        "    ::\r",
                        "        Defines the {{GPUBlendOperation}} used to calculate the values written to the target\r",
                        "        attachment components.\r",
                        "\r",
                        "    : <dfn>srcFactor</dfn>\r",
                        "    ::\r",
                        "        Defines the {{GPUBlendFactor}} operation to be performed on values from the fragment shader.\r",
                        "\r",
                        "    : <dfn>dstFactor</dfn>\r",
                        "    ::\r",
                        "        Defines the {{GPUBlendFactor}} operation to be performed on values from the target attachment.\r"
                    ]
                }
            ]
        ],
        [
            "GPUDepthStencilState",
            [
                {
                    "target": "GPUDepthStencilState",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>format</dfn>\r",
                        "    ::\r",
                        "        The {{GPUTextureViewDescriptor/format}} of {{GPURenderPassDescriptor/depthStencilAttachment}}\r",
                        "        this {{GPURenderPipeline}} will be compatible with.\r",
                        "\r",
                        "    : <dfn>depthWriteEnabled</dfn>\r",
                        "    ::\r",
                        "        Indicates if this {{GPURenderPipeline}} can modify\r",
                        "        {{GPURenderPassDescriptor/depthStencilAttachment}} depth values.\r",
                        "\r",
                        "    : <dfn>depthCompare</dfn>\r",
                        "    ::\r",
                        "        The comparison operation used to test fragment depths against\r",
                        "        {{GPURenderPassDescriptor/depthStencilAttachment}} depth values.\r",
                        "\r",
                        "    : <dfn>stencilFront</dfn>\r",
                        "    ::\r",
                        "        Defines how stencil comparisons and operations are performed for front-facing primitives.\r",
                        "\r",
                        "    : <dfn>stencilBack</dfn>\r",
                        "    ::\r",
                        "        Defines how stencil comparisons and operations are performed for back-facing primitives.\r",
                        "\r",
                        "    : <dfn>stencilReadMask</dfn>\r",
                        "    ::\r",
                        "        Bitmask controlling which {{GPURenderPassDescriptor/depthStencilAttachment}} stencil value\r",
                        "        bits are read when performing stencil comparison tests.\r",
                        "\r",
                        "    : <dfn>stencilWriteMask</dfn>\r",
                        "    ::\r",
                        "        Bitmask controlling which {{GPURenderPassDescriptor/depthStencilAttachment}} stencil value\r",
                        "        bits are written to when performing stencil operations.\r",
                        "\r",
                        "    : <dfn>depthBias</dfn>\r",
                        "    ::\r",
                        "        Constant depth bias added to each fragment. See [$biased fragment depth$] for details.\r",
                        "\r",
                        "    : <dfn>depthBiasSlopeScale</dfn>\r",
                        "    ::\r",
                        "        Depth bias that scales with the fragment’s slope. See [$biased fragment depth$] for details.\r",
                        "\r",
                        "    : <dfn>depthBiasClamp</dfn>\r",
                        "    ::\r",
                        "        The maximum depth bias of a fragment. See [$biased fragment depth$] for details.\r"
                    ]
                }
            ]
        ],
        [
            "GPUStencilFaceState",
            [
                {
                    "target": "GPUStencilFaceState",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>compare</dfn>\r",
                        "    ::\r",
                        "        The {{GPUCompareFunction}} used when testing fragments against\r",
                        "        {{GPURenderPassDescriptor/depthStencilAttachment}} stencil values.\r",
                        "\r",
                        "    : <dfn>failOp</dfn>\r",
                        "    ::\r",
                        "        The {{GPUStencilOperation}} performed if the fragment stencil comparison test described by\r",
                        "        {{GPUStencilFaceState/compare}} fails.\r",
                        "\r",
                        "    : <dfn>depthFailOp</dfn>\r",
                        "    ::\r",
                        "        The {{GPUStencilOperation}} performed if the fragment depth comparison described by\r",
                        "        {{GPUDepthStencilState/depthCompare}} fails.\r",
                        "\r",
                        "    : <dfn>passOp</dfn>\r",
                        "    ::\r",
                        "        The {{GPUStencilOperation}} performed if the fragment stencil comparison test described by\r",
                        "        {{GPUStencilFaceState/compare}} passes.\r"
                    ]
                }
            ]
        ],
        [
            "GPUStencilOperation",
            [
                {
                    "target": "GPUStencilOperation",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"keep\"</dfn>\r",
                        "    ::\r",
                        "        Keep the current stencil value.\r",
                        "\r",
                        "    : <dfn>\"zero\"</dfn>\r",
                        "    ::\r",
                        "        Set the stencil value to `0`.\r",
                        "\r",
                        "    : <dfn>\"replace\"</dfn>\r",
                        "    ::\r",
                        "        Set the stencil value to {{RenderState/[[stencilReference]]}}.\r",
                        "\r",
                        "    : <dfn>\"invert\"</dfn>\r",
                        "    ::\r",
                        "        Bitwise-invert the current stencil value.\r",
                        "\r",
                        "    : <dfn>\"increment-clamp\"</dfn>\r",
                        "    ::\r",
                        "        Increments the current stencil value, clamping to the maximum representable value of the\r",
                        "        {{GPURenderPassDescriptor/depthStencilAttachment}}'s stencil aspect.\r",
                        "\r",
                        "    : <dfn>\"decrement-clamp\"</dfn>\r",
                        "    ::\r",
                        "        Decrement the current stencil value, clamping to `0`.\r",
                        "\r",
                        "    : <dfn>\"increment-wrap\"</dfn>\r",
                        "    ::\r",
                        "        Increments the current stencil value, wrapping to zero if the value exceeds the maximum\r",
                        "        representable value of the {{GPURenderPassDescriptor/depthStencilAttachment}}'s stencil\r",
                        "        aspect.\r",
                        "\r",
                        "    : <dfn>\"decrement-wrap\"</dfn>\r",
                        "    ::\r",
                        "        Decrement the current stencil value, wrapping to the maximum representable value of the\r",
                        "        {{GPURenderPassDescriptor/depthStencilAttachment}}'s stencil aspect if the value goes below\r",
                        "        `0`.\r"
                    ]
                }
            ]
        ],
        [
            "GPUVertexStepMode",
            [
                {
                    "target": "GPUVertexStepMode",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"vertex\"</dfn>\r",
                        "    ::\r",
                        "        The address is advanced by {{GPUVertexBufferLayout/arrayStride}} for each vertex,\r",
                        "        and reset between instances.\r",
                        "\r",
                        "    : <dfn>\"instance\"</dfn>\r",
                        "    ::\r",
                        "        The address is advanced by {{GPUVertexBufferLayout/arrayStride}} for each instance.\r"
                    ]
                }
            ]
        ],
        [
            "GPUVertexState",
            [
                {
                    "target": "GPUVertexState",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>buffers</dfn>\r",
                        "    ::\r",
                        "        A list of {{GPUVertexBufferLayout}}s, each defining the layout of vertex attribute data in a\r",
                        "        vertex buffer used by this pipeline.\r"
                    ]
                }
            ]
        ],
        [
            "GPUVertexBufferLayout",
            [
                {
                    "target": "GPUVertexBufferLayout",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>arrayStride</dfn>\r",
                        "    ::\r",
                        "        The stride, in bytes, between elements of this array.\r",
                        "\r",
                        "    : <dfn>stepMode</dfn>\r",
                        "    ::\r",
                        "        Whether each element of this array represents per-vertex data or per-instance data\r",
                        "\r",
                        "    : <dfn>attributes</dfn>\r",
                        "    ::\r",
                        "        An array defining the layout of the vertex attributes within each element.\r"
                    ]
                }
            ]
        ],
        [
            "GPUVertexAttribute",
            [
                {
                    "target": "GPUVertexAttribute",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>format</dfn>\r",
                        "    ::\r",
                        "        The {{GPUVertexFormat}} of the attribute.\r",
                        "\r",
                        "    : <dfn>offset</dfn>\r",
                        "    ::\r",
                        "        The offset, in bytes, from the beginning of the element to the data for the attribute.\r",
                        "\r",
                        "    : <dfn>shaderLocation</dfn>\r",
                        "    ::\r",
                        "        The numeric location associated with this attribute, which will correspond with a\r",
                        "        <a href=\"https://gpuweb.github.io/gpuweb/wgsl/#input-output-locations\">\"@location\" attribute</a>\r",
                        "        declared in the {{GPURenderPipelineDescriptor/vertex}}.{{GPUProgrammableStage/module|module}}.\r"
                    ]
                }
            ]
        ],
        [
            "GPUCommandBuffer",
            [
                {
                    "target": "GPUCommandBuffer",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[command_list]]</dfn>, of type [=list=]&lt;[=GPU command=]&gt;\r",
                        "    ::\r",
                        "        A [=list=] of [=GPU commands=] to be executed on the [=Queue timeline=] when this command\r",
                        "        buffer is submitted.\r",
                        "\r",
                        "    : <dfn>\\[[renderState]]</dfn>, of type [=RenderState=]\r",
                        "    ::\r",
                        "        The current state used by any render pass commands being executed, initially `null`.\r"
                    ]
                }
            ]
        ],
        [
            "GPUCommandsMixin",
            [
                {
                    "target": "GPUCommandsMixin",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[state]]</dfn>, of type [=encoder state=], initially \"[=encoder state/open=]\"\r",
                        "    ::\r",
                        "        The current state of the encoder.\r",
                        "\r",
                        "    : <dfn>\\[[commands]]</dfn>, of type [=list=]&lt;[=GPU command=]&gt;, initially `[]`\r",
                        "    ::\r",
                        "        A [=list=] of [=GPU commands=] to be executed on the [=Queue timeline=] when a\r",
                        "        {{GPUCommandBuffer}} containing these commands is submitted.\r"
                    ]
                }
            ]
        ],
        [
            "GPUCommandEncoder",
            [
                {
                    "target": "GPUCommandEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>beginRenderPass(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Begins encoding a render pass described by |descriptor|.\r",
                        "\r",
                        "        <div algorithm=GPUCommandEncoder.beginRenderPass>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUCommandEncoder}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUCommandEncoder/beginRenderPass(descriptor)\">\r",
                        "                    |descriptor|: Description of the {{GPURenderPassEncoder}} to create.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{GPURenderPassEncoder}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. For each non-`null` |colorAttachment| in |descriptor|.{{GPURenderPassDescriptor/colorAttachments}}:\r",
                        "                    1. If |colorAttachment|.{{GPURenderPassColorAttachment/clearValue}} is not `null`.\r",
                        "                        1. [=?=] [$validate GPUColor shape$](|colorAttachment|.{{GPURenderPassColorAttachment/clearValue}}).\r",
                        "                1. Let |pass| be a new {{GPURenderPassEncoder}} object.\r",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |pass|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|.\r",
                        "                    If it returns false, make |pass| [=invalid=] and return.\r",
                        "                1. Set |this|.{{GPUCommandsMixin/[[state]]}} to \"[=encoder state/locked=]\".\r",
                        "                1. If any of the following requirements are unmet, make |pass| [=invalid=] and return.\r",
                        "                    <div class=validusage>\r",
                        "                        - |descriptor| must meet the [$GPURenderPassDescriptor/Valid Usage$] rules\r",
                        "                            given device |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "                        - The set of attachments in |descriptor|.{{GPURenderPassDescriptor/colorAttachments}}\r",
                        "                            must be pairwise disjoint.\r",
                        "                            That is, no two attachments may refer to the same region, as defined by\r",
                        "                            the {{GPURenderPassColorAttachment/view}}'s [=texture subresource=]\r",
                        "                            range and (for {{GPUTextureViewDimension/\"3d\"}} attachments)\r",
                        "                            the attachment's {{GPURenderPassColorAttachment/depthSlice}}.\r",
                        "                    </div>\r",
                        "                1. Consider each [=texture subresource=] viewed by a non-`null` element of\r",
                        "                    |descriptor|.{{GPURenderPassDescriptor/colorAttachments}} to be used as\r",
                        "                    an [=internal usage/attachment=] for the duration of the render pass.\r",
                        "\r",
                        "                    If a subresource is seen more than once, consider it used only once.\r",
                        "                    (Attachments are already checked for overlaps in the validation rules above.)\r",
                        "                1. Let |depthStencilAttachment| be |descriptor|.{{GPURenderPassDescriptor/depthStencilAttachment}},\r",
                        "                    or `null` if not [=map/exist|provided=].\r",
                        "                1. If |depthStencilAttachment| is not `null`:\r",
                        "                    1. Let |depthStencilView| be |depthStencilAttachment|.{{GPURenderPassDepthStencilAttachment/view}}.\r",
                        "                    1. Consider the [=aspect/depth=] [=GPUTextureView/subresource=] of |depthStencilView|\r",
                        "                        (if any) used for the duration of the render pass, as [=internal usage/attachment-read=] if\r",
                        "                        |depthStencilAttachment|.{{GPURenderPassDepthStencilAttachment/depthReadOnly}} is true,\r",
                        "                        or as [=internal usage/attachment=] otherwise.\r",
                        "                    1. Consider the [=aspect/stencil=] [=GPUTextureView/subresource=] of |depthStencilView|\r",
                        "                        (if any) used for the duration of the render pass, as [=internal usage/attachment-read=] if\r",
                        "                        |depthStencilAttachment|.{{GPURenderPassDepthStencilAttachment/stencilReadOnly}} is true,\r",
                        "                        or as [=internal usage/attachment=] otherwise.\r",
                        "                    1. Set |pass|.{{GPURenderCommandsMixin/[[depthReadOnly]]}} to |depthStencilAttachment|.{{GPURenderPassDepthStencilAttachment/depthReadOnly}}.\r",
                        "                    1. Set |pass|.{{GPURenderCommandsMixin/[[stencilReadOnly]]}} to |depthStencilAttachment|.{{GPURenderPassDepthStencilAttachment/stencilReadOnly}}.\r",
                        "                1. Set |pass|.{{GPURenderCommandsMixin/[[layout]]}} to [$derive render targets layout from pass$](|descriptor|).\r",
                        "                1. If |descriptor|.{{GPURenderPassDescriptor/timestampWrites}} is [=map/exist|provided=]:\r",
                        "                    1. Let |timestampWrites| be |descriptor|.{{GPURenderPassDescriptor/timestampWrites}}.\r",
                        "                    1. If |timestampWrites|.{{GPURenderPassTimestampWrites/beginningOfPassWriteIndex}}\r",
                        "                        is [=map/exist|provided=],\r",
                        "                        [=list/append=] a [=GPU command=] to |this|.{{GPUCommandsMixin/[[commands]]}}\r",
                        "                        with the following steps:\r",
                        "\r",
                        "                        <div data-timeline=queue>\r",
                        "                            1. Before the pass commands begin executing,\r",
                        "                                write the [$current queue timestamp$] into index\r",
                        "                                |timestampWrites|.{{GPURenderPassTimestampWrites/beginningOfPassWriteIndex}}\r",
                        "                                of |timestampWrites|.{{GPURenderPassTimestampWrites/querySet}}.\r",
                        "                        </div>\r",
                        "                    1. If |timestampWrites|.{{GPURenderPassTimestampWrites/endOfPassWriteIndex}}\r",
                        "                        is [=map/exist|provided=], set |pass|.{{GPURenderPassEncoder/[[endTimestampWrite]]}}\r",
                        "                        to a [=GPU command=] with the following steps:\r",
                        "\r",
                        "                        <div data-timeline=queue>\r",
                        "                            1. After the pass commands finish executing,\r",
                        "                                write the [$current queue timestamp$] into index\r",
                        "                                |timestampWrites|.{{GPURenderPassTimestampWrites/endOfPassWriteIndex}}\r",
                        "                                of |timestampWrites|.{{GPURenderPassTimestampWrites/querySet}}.\r",
                        "                        </div>\r",
                        "                1. Set |pass|.{{GPURenderCommandsMixin/[[drawCount]]}} to 0.\r",
                        "                1. Set |pass|.{{GPURenderPassEncoder/[[maxDrawCount]]}} to |descriptor|.{{GPURenderPassDescriptor/maxDrawCount}}.\r",
                        "\r",
                        "                1. [$Enqueue a command$] on |this| which issues the subsequent steps on the\r",
                        "                    [=Queue timeline=] when executed.\r",
                        "            </div>\r",
                        "            <div data-timeline=queue>\r",
                        "                [=Queue timeline=] steps:\r",
                        "\r",
                        "                1. Let the {{GPUCommandBuffer/[[renderState]]}} of the currently executing\r",
                        "                    {{GPUCommandBuffer}} be a new [=RenderState=].\r",
                        "                1. Issue: Perform attachment loads/clears.\r",
                        "            </div>\r",
                        "\r",
                        "            Issue: specify the behavior of read-only depth/stencil\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>beginComputePass(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Begins encoding a compute pass described by |descriptor|.\r",
                        "\r",
                        "        <div algorithm=GPUCommandEncoder.beginComputePass>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUCommandEncoder}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUCommandEncoder/beginComputePass(descriptor)\">\r",
                        "                    descriptor:\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{GPUComputePassEncoder}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let |pass| be a new {{GPUComputePassEncoder}} object.\r",
                        "                1. Issue the |initialization steps| on the [=Device timeline=] of |this|.\r",
                        "                1. Return |pass|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |initialization steps|:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|.\r",
                        "                    If it returns false, make |pass| [=invalid=] and return.\r",
                        "                1. Set |this|.{{GPUCommandsMixin/[[state]]}} to \"[=encoder state/locked=]\".\r",
                        "                1. If any of the following requirements are unmet, make |pass| [=invalid=] and return.\r",
                        "                    <div class=validusage>\r",
                        "                        - If |descriptor|.{{GPUComputePassDescriptor/timestampWrites}} is [=map/exist|provided=]:\r",
                        "                            - [$Validate timestampWrites$](|this|.{{GPUObjectBase/[[device]]}},\r",
                        "                                |descriptor|.{{GPUComputePassDescriptor/timestampWrites}})\r",
                        "                                must return true.\r",
                        "                    </div>\r",
                        "                1. If |descriptor|.{{GPUComputePassDescriptor/timestampWrites}} is [=map/exist|provided=]:\r",
                        "                    1. Let |timestampWrites| be |descriptor|.{{GPUComputePassDescriptor/timestampWrites}}.\r",
                        "                    1. If |timestampWrites|.{{GPUComputePassTimestampWrites/beginningOfPassWriteIndex}}\r",
                        "                        is [=map/exist|provided=],\r",
                        "                        [=list/append=] a [=GPU command=] to |this|.{{GPUCommandsMixin/[[commands]]}}\r",
                        "                        with the following steps:\r",
                        "\r",
                        "                        <div data-timeline=queue>\r",
                        "                            1. Before the pass commands begin executing,\r",
                        "                                write the [$current queue timestamp$] into index\r",
                        "                                |timestampWrites|.{{GPUComputePassTimestampWrites/beginningOfPassWriteIndex}}\r",
                        "                                of |timestampWrites|.{{GPUComputePassTimestampWrites/querySet}}.\r",
                        "                        </div>\r",
                        "                    1. If |timestampWrites|.{{GPUComputePassTimestampWrites/endOfPassWriteIndex}}\r",
                        "                        is [=map/exist|provided=], set |pass|.{{GPUComputePassEncoder/[[endTimestampWrite]]}}\r",
                        "                        to a [=GPU command=] with the following steps:\r",
                        "\r",
                        "                        <div data-timeline=queue>\r",
                        "                            1. After the pass commands finish executing,\r",
                        "                                write the [$current queue timestamp$] into index\r",
                        "                                |timestampWrites|.{{GPUComputePassTimestampWrites/endOfPassWriteIndex}}\r",
                        "                                of |timestampWrites|.{{GPUComputePassTimestampWrites/querySet}}.\r",
                        "                        </div>\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPUCommandEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>copyBufferToBuffer(source, sourceOffset, destination, destinationOffset, size)</dfn>\r",
                        "    ::\r",
                        "        Encode a command into the {{GPUCommandEncoder}} that copies data from a sub-region of a\r",
                        "        {{GPUBuffer}} to a sub-region of another {{GPUBuffer}}.\r",
                        "\r",
                        "        <div algorithm=GPUCommandEncoder.copyBufferToBuffer>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUCommandEncoder}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUCommandEncoder/copyBufferToBuffer(source, sourceOffset, destination, destinationOffset, size)\">\r",
                        "                    |source|: The {{GPUBuffer}} to copy from.\r",
                        "                    |sourceOffset|: Offset in bytes into |source| to begin copying from.\r",
                        "                    |destination|: The {{GPUBuffer}} to copy to.\r",
                        "                    |destinationOffset|: Offset in bytes into |destination| to place the copied data.\r",
                        "                    |size|: Bytes to copy.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. If any of the following conditions are unsatisfied make |this| [=invalid=] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |source| is [$valid to use with$] |this|.\r",
                        "                        - |destination| is [$valid to use with$] |this|.\r",
                        "                        - |source|.{{GPUBuffer/usage}} contains {{GPUBufferUsage/COPY_SRC}}.\r",
                        "                        - |destination|.{{GPUBuffer/usage}} contains {{GPUBufferUsage/COPY_DST}}.\r",
                        "                        - |size| is a multiple of 4.\r",
                        "                        - |sourceOffset| is a multiple of 4.\r",
                        "                        - |destinationOffset| is a multiple of 4.\r",
                        "                        - |source|.{{GPUBuffer/size}} &ge; (|sourceOffset| + |size|).\r",
                        "                        - |destination|.{{GPUBuffer/size}} &ge; (|destinationOffset| + |size|).\r",
                        "                        - |source| and |destination| are not the same {{GPUBuffer}}.\r",
                        "                    </div>\r",
                        "\r",
                        "                1. [$Enqueue a command$] on |this| which issues the subsequent steps on the\r",
                        "                    [=Queue timeline=] when executed.\r",
                        "            </div>\r",
                        "            <div data-timeline=queue>\r",
                        "                [=Queue timeline=] steps:\r",
                        "\r",
                        "                1. Copy |size| bytes of |source|, beginning at |sourceOffset|, into |destination|,\r",
                        "                    beginning at |destinationOffset|.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>clearBuffer(buffer, offset, size)</dfn>\r",
                        "    ::\r",
                        "        Encode a command into the {{GPUCommandEncoder}} that fills a sub-region of a\r",
                        "        {{GPUBuffer}} with zeros.\r",
                        "\r",
                        "        <div algorithm=GPUCommandEncoder.clearBuffer>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUCommandEncoder}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUCommandEncoder/clearBuffer(buffer, offset, size)\">\r",
                        "                    |buffer|: The {{GPUBuffer}} to clear.\r",
                        "                    |offset|: Offset in bytes into |buffer| where the sub-region to clear begins.\r",
                        "                    |size|: Size in bytes of the sub-region to clear. Defaults to the size of the buffer minus |offset|.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. If |size| is missing, set |size| to `max(0, |buffer|.{{GPUBuffer/size}} - |offset|)`.\r",
                        "                1. If any of the following conditions are unsatisfied make |this| [=invalid=] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |buffer| is [$valid to use with$] |this|.\r",
                        "                        - |buffer|.{{GPUBuffer/usage}} contains {{GPUBufferUsage/COPY_DST}}.\r",
                        "                        - |size| is a multiple of 4.\r",
                        "                        - |offset| is a multiple of 4.\r",
                        "                        - |buffer|.{{GPUBuffer/size}} &ge; (|offset| + |size|).\r",
                        "                    </div>\r",
                        "\r",
                        "                1. [$Enqueue a command$] on |this| which issues the subsequent steps on the\r",
                        "                    [=Queue timeline=] when executed.\r",
                        "            </div>\r",
                        "            <div data-timeline=queue>\r",
                        "                [=Queue timeline=] steps:\r",
                        "\r",
                        "                1. Set |size| bytes of |buffer| to `0` starting at |offset|.\r",
                        "            </div>\r",
                        "\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPUCommandEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>copyBufferToTexture(source, destination, copySize)</dfn>\r",
                        "    ::\r",
                        "        Encode a command into the {{GPUCommandEncoder}} that copies data from a sub-region of a\r",
                        "        {{GPUBuffer}} to a sub-region of one or multiple continuous [=texture subresources=].\r",
                        "\r",
                        "        <div algorithm=GPUCommandEncoder.copyBufferToTexture>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUCommandEncoder}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUCommandEncoder/copyBufferToTexture(source, destination, copySize)\">\r",
                        "                    |source|: Combined with |copySize|, defines the region of the source buffer.\r",
                        "                    |destination|: Combined with |copySize|, defines the region of the destination [=texture subresource=].\r",
                        "                    |copySize|:\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. [=?=] [$validate GPUOrigin3D shape$](|destination|.{{GPUImageCopyTexture/origin}}).\r",
                        "                1. [=?=] [$validate GPUExtent3D shape$](|copySize|).\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|.{{GPUObjectBase/[[device]]}}:\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - Let |dstTexture| be |destination|.{{GPUImageCopyTexture/texture}}.\r",
                        "                        - [$validating GPUImageCopyBuffer$](|source|) returns `true`.\r",
                        "                        - |source|.{{GPUImageCopyBuffer/buffer}}.{{GPUBuffer/usage}} contains {{GPUBufferUsage/COPY_SRC}}.\r",
                        "                        - [$validating GPUImageCopyTexture$](|destination|, |copySize|) returns `true`.\r",
                        "                        - |dstTexture|.{{GPUTexture/usage}} contains {{GPUTextureUsage/COPY_DST}}.\r",
                        "                        - |dstTexture|.{{GPUTexture/sampleCount}} is 1.\r",
                        "                        - Let |aspectSpecificFormat| = |dstTexture|.{{GPUTexture/format}}.\r",
                        "                        - If |dstTexture|.{{GPUTexture/format}} is a [=depth-or-stencil format=]:\r",
                        "                            - |destination|.{{GPUImageCopyTexture/aspect}} must refer to a single aspect of\r",
                        "                                |dstTexture|.{{GPUTexture/format}}.\r",
                        "                            - That aspect must be a valid image copy destination according to [[#depth-formats]].\r",
                        "                            - Set |aspectSpecificFormat| to the [=aspect-specific format=] according to [[#depth-formats]].\r",
                        "                        - [=validating texture copy range=](|destination|, |copySize|) return `true`.\r",
                        "                        - If |dstTexture|.{{GPUTexture/format}} is not a [=depth-or-stencil format=]:\r",
                        "                            - |source|.{{GPUImageDataLayout/offset}} is a multiple of the\r",
                        "                                [=texel block copy footprint=] of |dstTexture|.{{GPUTexture/format}}.\r",
                        "                        - If |dstTexture|.{{GPUTexture/format}} is a [=depth-or-stencil format=]:\r",
                        "                            - |source|.{{GPUImageDataLayout/offset}} is a multiple of 4.\r",
                        "                        - [$validating linear texture data$](|source|,\r",
                        "                            |source|.{{GPUImageCopyBuffer/buffer}}.{{GPUBuffer/size}},\r",
                        "                            |aspectSpecificFormat|,\r",
                        "                            |copySize|) succeeds.\r",
                        "                    </div>\r",
                        "\r",
                        "                1. [$Enqueue a command$] on |this| which issues the subsequent steps on the\r",
                        "                    [=Queue timeline=] when executed.\r",
                        "            </div>\r",
                        "            <div data-timeline=queue>\r",
                        "                [=Queue timeline=] steps:\r",
                        "\r",
                        "                Issue: Define copy, including provision for snorm.\r",
                        "            </div>\r",
                        "\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>copyTextureToBuffer(source, destination, copySize)</dfn>\r",
                        "    ::\r",
                        "        Encode a command into the {{GPUCommandEncoder}} that copies data from a sub-region of one or\r",
                        "        multiple continuous [=texture subresources=] to a sub-region of a {{GPUBuffer}}.\r",
                        "\r",
                        "        <div algorithm=GPUCommandEncoder.copyTextureToBuffer>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUCommandEncoder}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUCommandEncoder/copyTextureToBuffer(source, destination, copySize)\">\r",
                        "                    |source|: Combined with |copySize|, defines the region of the source [=texture subresources=].\r",
                        "                    |destination|: Combined with |copySize|, defines the region of the destination buffer.\r",
                        "                    |copySize|:\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. [=?=] [$validate GPUOrigin3D shape$](|source|.{{GPUImageCopyTexture/origin}}).\r",
                        "                1. [=?=] [$validate GPUExtent3D shape$](|copySize|).\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|.{{GPUObjectBase/[[device]]}}:\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - Let |srcTexture| be |source|.{{GPUImageCopyTexture/texture}}.\r",
                        "                        - [$validating GPUImageCopyTexture$](|source|, |copySize|) returns `true`.\r",
                        "                        - |srcTexture|.{{GPUTexture/usage}} contains {{GPUTextureUsage/COPY_SRC}}.\r",
                        "                        - |srcTexture|.{{GPUTexture/sampleCount}} is 1.\r",
                        "                        - Let |aspectSpecificFormat| = |srcTexture|.{{GPUTexture/format}}.\r",
                        "                        - If |srcTexture|.{{GPUTexture/format}} is a [=depth-or-stencil format=] format:\r",
                        "                            - |source|.{{GPUImageCopyTexture/aspect}} must refer to a single aspect of\r",
                        "                                |srcTexture|.{{GPUTexture/format}}.\r",
                        "                            - That aspect must be a valid image copy source according to [[#depth-formats]].\r",
                        "                            - Set |aspectSpecificFormat| to the [=aspect-specific format=] according to [[#depth-formats]].\r",
                        "                        - [$validating GPUImageCopyBuffer$](|destination|) returns `true`.\r",
                        "                        - |destination|.{{GPUImageCopyBuffer/buffer}}.{{GPUBuffer/usage}} contains\r",
                        "                            {{GPUBufferUsage/COPY_DST}}.\r",
                        "                        - [=validating texture copy range=](|source|, |copySize|) returns `true`.\r",
                        "                        - If |srcTexture|.{{GPUTexture/format}} is not a [=depth-or-stencil format=]:\r",
                        "                            - |destination|.{{GPUImageDataLayout/offset}} is a multiple of the\r",
                        "                                [=texel block copy footprint=] of |srcTexture|.{{GPUTexture/format}}.\r",
                        "                        - If |srcTexture|.{{GPUTexture/format}} is a [=depth-or-stencil format=]:\r",
                        "                            - |destination|.{{GPUImageDataLayout/offset}} is a multiple of 4.\r",
                        "                        - [$validating linear texture data$](|destination|,\r",
                        "                            |destination|.{{GPUImageCopyBuffer/buffer}}.{{GPUBuffer/size}},\r",
                        "                            |aspectSpecificFormat|,\r",
                        "                            |copySize|) succeeds.\r",
                        "                    </div>\r",
                        "\r",
                        "                1. [$Enqueue a command$] on |this| which issues the subsequent steps on the\r",
                        "                    [=Queue timeline=] when executed.\r",
                        "            </div>\r",
                        "            <div data-timeline=queue>\r",
                        "                [=Queue timeline=] steps:\r",
                        "\r",
                        "                Issue: Define copy, including provision for snorm.\r",
                        "            </div>\r",
                        "\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>copyTextureToTexture(source, destination, copySize)</dfn>\r",
                        "    ::\r",
                        "        Encode a command into the {{GPUCommandEncoder}} that copies data from a sub-region of one\r",
                        "        or multiple contiguous [=texture subresources=] to another sub-region of one or\r",
                        "        multiple continuous [=texture subresources=].\r",
                        "\r",
                        "        <div algorithm=GPUCommandEncoder.copyTextureToTexture>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUCommandEncoder}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUCommandEncoder/copyTextureToTexture(source, destination, copySize)\">\r",
                        "                    |source|: Combined with |copySize|, defines the region of the source [=texture subresources=].\r",
                        "                    |destination|: Combined with |copySize|, defines the region of the destination [=texture subresources=].\r",
                        "                    |copySize|:\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. [=?=] [$validate GPUOrigin3D shape$](|source|.{{GPUImageCopyTexture/origin}}).\r",
                        "                1. [=?=] [$validate GPUOrigin3D shape$](|destination|.{{GPUImageCopyTexture/origin}}).\r",
                        "                1. [=?=] [$validate GPUExtent3D shape$](|copySize|).\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|.{{GPUObjectBase/[[device]]}}:\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - Let |srcTexture| be |source|.{{GPUImageCopyTexture/texture}}.\r",
                        "                        - Let |dstTexture| be |destination|.{{GPUImageCopyTexture/texture}}.\r",
                        "                        - [$validating GPUImageCopyTexture$](|source|, |copySize|) returns `true`.\r",
                        "                        - |srcTexture|.{{GPUTexture/usage}} contains {{GPUTextureUsage/COPY_SRC}}.\r",
                        "                        - [$validating GPUImageCopyTexture$](|destination|, |copySize|) returns `true`.\r",
                        "                        - |dstTexture|.{{GPUTexture/usage}} contains {{GPUTextureUsage/COPY_DST}}.\r",
                        "                        - |srcTexture|.{{GPUTexture/sampleCount}} is equal to |dstTexture|.{{GPUTexture/sampleCount}}.\r",
                        "                        - |srcTexture|.{{GPUTexture/format}} and |dstTexture|.{{GPUTexture/format}}\r",
                        "                            must be [=copy-compatible=].\r",
                        "                        - If |srcTexture|.{{GPUTexture/format}} is a depth-stencil format:\r",
                        "                            - |source|.{{GPUImageCopyTexture/aspect}} and |destination|.{{GPUImageCopyTexture/aspect}}\r",
                        "                                must both refer to all aspects of |srcTexture|.{{GPUTexture/format}}\r",
                        "                                and |dstTexture|.{{GPUTexture/format}}, respectively.\r",
                        "                        - [=validating texture copy range=](|source|, |copySize|) returns `true`.\r",
                        "                        - [=validating texture copy range=](|destination|, |copySize|) returns `true`.\r",
                        "                        - The [$set of subresources for texture copy$](|source|, |copySize|) and\r",
                        "                            the [$set of subresources for texture copy$](|destination|, |copySize|) are disjoint.\r",
                        "                    </div>\r",
                        "\r",
                        "                1. [$Enqueue a command$] on |this| which issues the subsequent steps on the\r",
                        "                    [=Queue timeline=] when executed.\r",
                        "            </div>\r",
                        "            <div data-timeline=queue>\r",
                        "                [=Queue timeline=] steps:\r",
                        "\r",
                        "                Issue: Define copy, including provision for snorm.\r",
                        "            </div>\r",
                        "\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPUCommandEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>resolveQuerySet(querySet, firstQuery, queryCount, destination, destinationOffset)</dfn>\r",
                        "    ::\r",
                        "        Resolves query results from a {{GPUQuerySet}} out into a range of a {{GPUBuffer}}.\r",
                        "\r",
                        "        <div algorithm=GPUCommandEncoder.resolveQuerySet>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUCommandEncoder}} this.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUCommandEncoder/resolveQuerySet(querySet, firstQuery, queryCount, destination, destinationOffset)\">\r",
                        "                    querySet:\r",
                        "                    firstQuery:\r",
                        "                    queryCount:\r",
                        "                    destination:\r",
                        "                    destinationOffset:\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                        |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |querySet| is [$valid to use with$] |this|.\r",
                        "                        - |destination| is [$valid to use with$] |this|.\r",
                        "                        - |destination|.{{GPUBuffer/usage}} contains {{GPUBufferUsage/QUERY_RESOLVE}}.\r",
                        "                        - |firstQuery| &lt; the number of queries in |querySet|.\r",
                        "                        - (|firstQuery| + |queryCount|) &le; the number of queries in |querySet|.\r",
                        "                        - |destinationOffset| is a multiple of 256.\r",
                        "                        - |destinationOffset| + 8 &times; |queryCount| &le; |destination|.{{GPUBuffer/size}}.\r",
                        "                    </div>\r",
                        "\r",
                        "                1. [$Enqueue a command$] on |this| which issues the subsequent steps on the\r",
                        "                    [=Queue timeline=] when executed.\r",
                        "            </div>\r",
                        "            <div data-timeline=queue>\r",
                        "                [=Queue timeline=] steps:\r",
                        "\r",
                        "                1. Let |queryIndex| be |firstQuery|.\r",
                        "                1. Let |offset| be |destinationOffset|.\r",
                        "                1. While |queryIndex| &lt; |firstQuery| + |queryCount|:\r",
                        "                    1. Set 8 bytes of |destination|, beginning at |offset|, to be the value of\r",
                        "                        |querySet| at |queryIndex|.\r",
                        "                    1. Set |queryIndex| to be |queryIndex| + 1.\r",
                        "                    1. Set |offset| to be |offset| + 8.\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPUCommandEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>finish(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Completes recording of the commands sequence and returns a corresponding {{GPUCommandBuffer}}.\r",
                        "\r",
                        "        <div algorithm=GPUCommandEncoder.finish>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUCommandEncoder}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUCommandEncoder/finish(descriptor)\">\r",
                        "                    descriptor:\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{GPUCommandBuffer}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let |commandBuffer| be a new {{GPUCommandBuffer}}.\r",
                        "                1. Issue the |finish steps| on the [=Device timeline=] of\r",
                        "                            |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "                1. Return |commandBuffer|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |finish steps|:\r",
                        "\r",
                        "                1. Let |validationSucceeded| be `true` if all of the following requirements are met, and `false` otherwise.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this| must be [=valid=].\r",
                        "                        - |this|.{{GPUCommandsMixin/[[state]]}} must be \"[=encoder state/open=]\".\r",
                        "                        - |this|.{{GPUDebugCommandsMixin/[[debug_group_stack]]}} must [=list/is empty|be empty=].\r",
                        "                        - Every [=usage scope=] contained in |this| must satisfy the [=usage scope validation=].\r",
                        "                    </div>\r",
                        "                1. Set |this|.{{GPUCommandsMixin/[[state]]}} to \"[=encoder state/ended=]\".\r",
                        "                1. If |validationSucceeded| is `false`, then:\r",
                        "                    1. [$Generate a validation error$].\r",
                        "                    1. Return a new [=invalid=] {{GPUCommandBuffer}}.\r",
                        "                1. Set |commandBuffer|.{{GPUCommandBuffer/[[command_list]]}} to\r",
                        "                    |this|.{{GPUCommandsMixin/[[commands]]}}.\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                }
            ]
        ],
        [
            "GPUBindingCommandsMixin",
            [
                {
                    "target": "GPUBindingCommandsMixin",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[bind_groups]]</dfn>, of type [=ordered map=]&lt;{{GPUIndex32}}, {{GPUBindGroup}}&gt;\r",
                        "    ::\r",
                        "        The current {{GPUBindGroup}} for each index, initially empty.\r",
                        "\r",
                        "    : <dfn>\\[[dynamic_offsets]]</dfn>, of type [=ordered map=]&lt;{{GPUIndex32}}, [=list=]&lt;{{GPUBufferDynamicOffset}}&gt; &gt;\r",
                        "    ::\r",
                        "        The current dynamic offsets for each {{GPUBindingCommandsMixin/[[bind_groups]]}} entry, initially empty.\r"
                    ]
                },
                {
                    "target": "GPUBindingCommandsMixin",
                    "type": "method",
                    "lines": [
                        "    : <dfn>setBindGroup(index, bindGroup, dynamicOffsets)</dfn>\r",
                        "    ::\r",
                        "        Sets the current {{GPUBindGroup}} for the given index.\r",
                        "\r",
                        "        <div algorithm=GPUBindingCommandsMixin.setBindGroup>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUBindingCommandsMixin}} this.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <!-- TODO(tabatkins/bikeshed#1740, plinss/widlparser#56):\r",
                        "                The argumentdef feature doesn't work with overloaded functions, and it ends up\r",
                        "                expecting this to define the arguments for the 5-arg variant of the method, despite\r",
                        "                the \"for\" explicitly pointing at the 3-arg variant.\r",
                        "                So, we don't use argumentdef for this method. -->\r",
                        "\r",
                        "                <dl dfn-type=argument dfn-for=\"GPUBindingCommandsMixin/setBindGroup(index, bindGroup, dynamicOffsets)\">\r",
                        "                    : <dfn>|index|</dfn>, of type {{GPUIndex32}}, non-nullable, required\r",
                        "                    ::\r",
                        "                        The index to set the bind group at.\r",
                        "\r",
                        "                    : <dfn>|bindGroup|</dfn>, of type {{GPUBindGroup}}, nullable, required\r",
                        "                    ::\r",
                        "                        Bind group to use for subsequent render or compute commands.\r",
                        "\r",
                        "                    : <dfn>|dynamicOffsets|</dfn>, of type [=sequence=]&lt;{{GPUBufferDynamicOffset}}&gt;, non-nullable, defaulting to `[]`\r",
                        "                    ::\r",
                        "                        Array containing buffer offsets in bytes for each entry in\r",
                        "                        |bindGroup| marked as {{GPUBindGroupLayoutEntry/buffer}}.{{GPUBufferBindingLayout/hasDynamicOffset}}.\r"
                    ]
                }
            ]
        ],
        [
            "GPUDebugCommandsMixin",
            [
                {
                    "target": "GPUDebugCommandsMixin",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[debug_group_stack]]</dfn>, of type [=stack=]&lt;{{USVString}}&gt;\r",
                        "    ::\r",
                        "        A stack of active debug group labels.\r"
                    ]
                },
                {
                    "target": "GPUDebugCommandsMixin",
                    "type": "method",
                    "lines": [
                        "    : <dfn>pushDebugGroup(groupLabel)</dfn>\r",
                        "    ::\r",
                        "        Begins a labeled debug group containing subsequent commands.\r",
                        "\r",
                        "        <div algorithm=GPUDebugCommandsMixin.pushDebugGroup>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDebugCommandsMixin}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUDebugCommandsMixin/pushDebugGroup(groupLabel)\">\r",
                        "                    |groupLabel|: The label for the command group.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. [=stack/Push=] |groupLabel| onto |this|.{{GPUDebugCommandsMixin/[[debug_group_stack]]}}.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>popDebugGroup()</dfn>\r",
                        "    ::\r",
                        "        Ends the labeled debug group most recently started by {{GPUDebugCommandsMixin/pushDebugGroup()}}.\r",
                        "\r",
                        "        <div algorithm=GPUDebugCommandsMixin.popDebugGroup>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDebugCommandsMixin}} |this|.\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. If any of the following requirements are unmet, make |this| [=invalid=], and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this|.{{GPUDebugCommandsMixin/[[debug_group_stack]]}} must not [=list/is empty|be empty=].\r",
                        "                    </div>\r",
                        "                1. [=stack/Pop=] an entry off of |this|.{{GPUDebugCommandsMixin/[[debug_group_stack]]}}.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>insertDebugMarker(markerLabel)</dfn>\r",
                        "    ::\r",
                        "        Marks a point in a stream of commands with a label.\r",
                        "\r",
                        "        <div algorithm=GPUDebugCommandsMixin.insertDebugMarker>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUDebugCommandsMixin}} this.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUDebugCommandsMixin/insertDebugMarker(markerLabel)\">\r",
                        "                    markerLabel: The label to insert.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                }
            ]
        ],
        [
            "GPUComputePassEncoder",
            [
                {
                    "target": "GPUComputePassEncoder",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[command_encoder]]</dfn>, of type {{GPUCommandEncoder}}, readonly\r",
                        "    ::\r",
                        "        The {{GPUCommandEncoder}} that created this compute pass encoder.\r",
                        "\r",
                        "    : <dfn>\\[[pipeline]]</dfn>, of type {{GPUComputePipeline}}, readonly\r",
                        "    ::\r",
                        "        The current {{GPUComputePipeline}}, initially `null`.\r",
                        "\r",
                        "    : <dfn>\\[[endTimestampWrite]]</dfn>, of type [=GPU command=]?, readonly, defaulting to `null`\r",
                        "    ::\r",
                        "        [=GPU command=], if any, writing a timestamp when the pass ends.\r"
                    ]
                },
                {
                    "target": "GPUComputePassEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>setPipeline(pipeline)</dfn>\r",
                        "    ::\r",
                        "        Sets the current {{GPUComputePipeline}}.\r",
                        "\r",
                        "        <div algorithm=GPUComputePassEncoder.setPipeline>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUComputePassEncoder}} this.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUComputePassEncoder/setPipeline(pipeline)\">\r",
                        "                    |pipeline|: The compute pipeline to use for subsequent dispatch commands.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |pipeline| is [$valid to use with$] |this|.\r",
                        "                    </div>\r",
                        "                1. Set |this|.{{GPUComputePassEncoder/[[pipeline]]}} to be |pipeline|.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>dispatchWorkgroups(workgroupCountX, workgroupCountY, workgroupCountZ)</dfn>\r",
                        "    ::\r",
                        "        Dispatch work to be performed with the current {{GPUComputePipeline}}.\r",
                        "        See [[#computing-operations]] for the detailed specification.\r",
                        "\r",
                        "        <div algorithm=GPUComputePassEncoder.dispatch>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUComputePassEncoder}} this.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUComputePassEncoder/dispatchWorkgroups(workgroupCountX, workgroupCountY, workgroupCountZ)\">\r",
                        "                    |workgroupCountX|: X dimension of the grid of workgroups to dispatch.\r",
                        "                    |workgroupCountY|: Y dimension of the grid of workgroups to dispatch.\r",
                        "                    |workgroupCountZ|: Z dimension of the grid of workgroups to dispatch.\r",
                        "                </pre>\r",
                        "\r",
                        "                <div class=note heading>\r",
                        "                    The `x`, `y`, and `z` values passed to {{GPUComputePassEncoder/dispatchWorkgroups()}}\r",
                        "                    and {{GPUComputePassEncoder/dispatchWorkgroupsIndirect()}} are the number of\r",
                        "                    *workgroups* to dispatch for each dimension, *not* the number of shader invocations\r",
                        "                    to perform across each dimension. This matches the behavior of modern native GPU\r",
                        "                    APIs, but differs from the behavior of OpenCL.\r",
                        "\r",
                        "                    This means that if a {{GPUShaderModule}} defines an entry point with\r",
                        "                    `@workgroup_size(4, 4)`, and work is dispatched to it with the call\r",
                        "                    `computePass.dispatchWorkgroups(8, 8);` the entry point will be invoked 1024 times\r",
                        "                    total: Dispatching a 4x4 workgroup 8 times along both the X and Y axes.\r",
                        "                    (`4*4*8*8=1024`)\r",
                        "                </div>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - [$Validate encoder bind groups$](|this|, |this|.{{GPUComputePassEncoder/[[pipeline]]}})\r",
                        "                            is `true`.\r",
                        "                        - all of |workgroupCountX|, |workgroupCountY| and |workgroupCountZ| are &le;\r",
                        "                            |this|.device.limits.{{supported limits/maxComputeWorkgroupsPerDimension}}.\r",
                        "                    </div>\r",
                        "\r",
                        "                1. Let |passState| be a snapshot of |this|'s current state.\r",
                        "                1. [$Enqueue a command$] on |this| which issues the subsequent steps on the\r",
                        "                    [=Queue timeline=].\r",
                        "            </div>\r",
                        "            <div data-timeline=queue>\r",
                        "                [=Queue timeline=] steps:\r",
                        "\r",
                        "                1. Execute a grid of workgroups with dimensions [|workgroupCountX|, |workgroupCountY|,\r",
                        "                    |workgroupCountZ|] with |passState|.{{GPUComputePassEncoder/[[pipeline]]}} using\r",
                        "                    |passState|.{{GPUBindingCommandsMixin/[[bind_groups]]}}.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>dispatchWorkgroupsIndirect(indirectBuffer, indirectOffset)</dfn>\r",
                        "    ::\r",
                        "        Dispatch work to be performed with the current {{GPUComputePipeline}} using parameters read\r",
                        "        from a {{GPUBuffer}}.\r",
                        "        See [[#computing-operations]] for the detailed specification.\r",
                        "\r",
                        "        The <dfn dfn for=\"\">indirect dispatch parameters</dfn> encoded in the buffer must be a tightly\r",
                        "        packed block of **three 32-bit unsigned integer values (12 bytes total)**,\r",
                        "        given in the same order as the arguments for {{GPUComputePassEncoder/dispatchWorkgroups()}}.\r",
                        "        For example:\r",
                        "\r",
                        "        <pre highlight=js>\r",
                        "            let dispatchIndirectParameters = new Uint32Array(3);\r",
                        "            dispatchIndirectParameters[0] = workgroupCountX;\r",
                        "            dispatchIndirectParameters[1] = workgroupCountY;\r",
                        "            dispatchIndirectParameters[2] = workgroupCountZ;\r",
                        "        </pre>\r",
                        "\r",
                        "        <div algorithm=GPUComputePassEncoder.dispatchIndirect>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUComputePassEncoder}} this.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUComputePassEncoder/dispatchWorkgroupsIndirect(indirectBuffer, indirectOffset)\">\r",
                        "                    |indirectBuffer|: Buffer containing the [=indirect dispatch parameters=].\r",
                        "                    |indirectOffset|: Offset in bytes into |indirectBuffer| where the dispatch data begins.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - [$Validate encoder bind groups$](|this|, |this|.{{GPUComputePassEncoder/[[pipeline]]}})\r",
                        "                            is `true`.\r",
                        "                        - |indirectBuffer| is [$valid to use with$] |this|.\r",
                        "                        - |indirectBuffer|.{{GPUBuffer/usage}} contains {{GPUBufferUsage/INDIRECT}}.\r",
                        "                        - |indirectOffset| + sizeof([=indirect dispatch parameters=]) &le;\r",
                        "                            |indirectBuffer|.{{GPUBuffer/size}}.\r",
                        "                        - |indirectOffset| is a multiple of 4.\r",
                        "                    </div>\r",
                        "                1. Add |indirectBuffer| to the [=usage scope=] as {{GPUBufferUsage/INDIRECT}}.\r",
                        "\r",
                        "                1. Let |passState| be a snapshot of |this|'s current state.\r",
                        "                1. [$Enqueue a command$] on |this| which issues the subsequent steps on the\r",
                        "                    [=Queue timeline=].\r",
                        "            </div>\r",
                        "            <div data-timeline=queue>\r",
                        "                [=Queue timeline=] steps:\r",
                        "\r",
                        "                1. Let |workgroupCountX| be an unsigned 32-bit integer read from |indirectBuffer| at\r",
                        "                    |indirectOffset| bytes.\r",
                        "                1. Let |workgroupCountY| be an unsigned 32-bit integer read from |indirectBuffer| at\r",
                        "                    (|indirectOffset| + 4) bytes.\r",
                        "                1. Let |workgroupCountZ| be an unsigned 32-bit integer read from |indirectBuffer| at\r",
                        "                    (|indirectOffset| + 8) bytes.\r",
                        "                1. If |workgroupCountX|, |workgroupCountY|, or |workgroupCountZ| is greater than\r",
                        "                    |this|.device.limits.{{supported limits/maxComputeWorkgroupsPerDimension}},\r",
                        "                    stop.\r",
                        "                1. Execute a grid of workgroups with dimensions [|workgroupCountX|, |workgroupCountY|,\r",
                        "                    |workgroupCountZ|] with |passState|.{{GPUComputePassEncoder/[[pipeline]]}} using\r",
                        "                    |passState|.{{GPUBindingCommandsMixin/[[bind_groups]]}}.\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPUComputePassEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>end()</dfn>\r",
                        "    ::\r",
                        "        Completes recording of the compute pass commands sequence.\r",
                        "\r",
                        "        <div algorithm=GPUComputePassEncoder.end>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUComputePassEncoder}} |this|.\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. Let |parentEncoder| be |this|.{{GPURenderPassEncoder/[[command_encoder]]}}.\r",
                        "                1. If any of the following requirements are unmet,\r",
                        "                    [$generate a validation error$] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this|.{{GPUCommandsMixin/[[state]]}} must be \"[=encoder state/open=]\".\r",
                        "                        - |parentEncoder|.{{GPUCommandsMixin/[[state]]}} must be \"[=encoder state/locked=]\".\r",
                        "                    </div>\r",
                        "                1. Set |this|.{{GPUCommandsMixin/[[state]]}} to \"[=encoder state/ended=]\".\r",
                        "                1. Set |parentEncoder|.{{GPUCommandsMixin/[[state]]}} to \"[=encoder state/open=]\".\r",
                        "                1. If any of the following requirements are unmet, make\r",
                        "                    |parentEncoder| [=invalid=] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this| must be [=valid=].\r",
                        "                        - |this|.{{GPUDebugCommandsMixin/[[debug_group_stack]]}} must [=list/is empty|be empty=].\r",
                        "                    </div>\r",
                        "                1. [=list/Extend=] |parentEncoder|.{{GPUCommandsMixin/[[commands]]}}\r",
                        "                    with |this|.{{GPUCommandsMixin/[[commands]]}}.\r",
                        "                1. If |this|.{{GPUComputePassEncoder/[[endTimestampWrite]]}} is not `null`:\r",
                        "                    1. [=list/Extend=] |parentEncoder|.{{GPUCommandsMixin/[[commands]]}}\r",
                        "                        with |this|.{{GPUComputePassEncoder/[[endTimestampWrite]]}}.\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                }
            ]
        ],
        [
            "GPUComputePassTimestampWrites",
            [
                {
                    "target": "GPUComputePassTimestampWrites",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>querySet</dfn>\r",
                        "    ::\r",
                        "        The {{GPUQuerySet}}, of type {{GPUQueryType/\"timestamp\"}}, that the query results will be\r",
                        "        written to.\r",
                        "\r",
                        "    : <dfn>beginningOfPassWriteIndex</dfn>\r",
                        "    ::\r",
                        "        If defined, indicates the query index in {{GPURenderPassTimestampWrites/querySet}} into\r",
                        "        which the timestamp at the beginning of the compute pass will be written.\r",
                        "\r",
                        "    : <dfn>endOfPassWriteIndex</dfn>\r",
                        "    ::\r",
                        "        If defined, indicates the query index in {{GPURenderPassTimestampWrites/querySet}} into\r",
                        "        which the timestamp at the end of the compute pass will be written.\r"
                    ]
                }
            ]
        ],
        [
            "GPUComputePassDescriptor",
            [
                {
                    "target": "GPUComputePassDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>timestampWrites</dfn>\r",
                        "    ::\r",
                        "        Defines which timestamp values will be written for this pass, and where to write them to.\r"
                    ]
                }
            ]
        ],
        [
            "GPURenderPassEncoder",
            [
                {
                    "target": "GPURenderPassEncoder",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[command_encoder]]</dfn>, of type {{GPUCommandEncoder}}, readonly\r",
                        "    ::\r",
                        "        The {{GPUCommandEncoder}} that created this render pass encoder.\r",
                        "\r",
                        "    : <dfn>\\[[attachment_size]]</dfn>, readonly\r",
                        "    ::\r",
                        "        Set to the following extents:\r",
                        "\r",
                        "        - `width, height` = the dimensions of the pass's render attachments\r",
                        "\r",
                        "    : <dfn>\\[[occlusion_query_set]]</dfn>, of type {{GPUQuerySet}}, readonly\r",
                        "    ::\r",
                        "        The {{GPUQuerySet}} to store occlusion query results for the pass, which is initialized with\r",
                        "        {{GPURenderPassDescriptor}}.{{GPURenderPassDescriptor/occlusionQuerySet}} at pass creation time.\r",
                        "\r",
                        "    : <dfn>\\[[occlusion_query_active]]</dfn>, of type {{boolean}}\r",
                        "    ::\r",
                        "        Whether the pass's {{GPURenderPassEncoder/[[occlusion_query_set]]}} is being written.\r",
                        "\r",
                        "    : <dfn>\\[[endTimestampWrite]]</dfn>, of type [=GPU command=]?, readonly, defaulting to `null`\r",
                        "    ::\r",
                        "        [=GPU command=], if any, writing a timestamp when the pass ends.\r",
                        "\r",
                        "    : <dfn>\\[[maxDrawCount]]</dfn> of type {{GPUSize64}}, readonly\r",
                        "    ::\r",
                        "        The maximum number of draws allowed in this pass.\r"
                    ]
                },
                {
                    "target": "GPURenderPassEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>end()</dfn>\r",
                        "    ::\r",
                        "        Completes recording of the render pass commands sequence.\r",
                        "\r",
                        "        <div algorithm=GPURenderPassEncoder.end>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPURenderPassEncoder}} |this|.\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. Let |parentEncoder| be |this|.{{GPURenderPassEncoder/[[command_encoder]]}}.\r",
                        "                1. If any of the following requirements are unmet,\r",
                        "                    [$generate a validation error$] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this|.{{GPUCommandsMixin/[[state]]}} must be \"[=encoder state/open=]\".\r",
                        "                        - |parentEncoder|.{{GPUCommandsMixin/[[state]]}} must be \"[=encoder state/locked=]\".\r",
                        "                    </div>\r",
                        "                1. Set |this|.{{GPUCommandsMixin/[[state]]}} to \"[=encoder state/ended=]\".\r",
                        "                1. Set |parentEncoder|.{{GPUCommandsMixin/[[state]]}} to \"[=encoder state/open=]\".\r",
                        "                1. If any of the following requirements are unmet, make\r",
                        "                    |parentEncoder| [=invalid=] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this| must be [=valid=].\r",
                        "                        - |this|.{{GPUDebugCommandsMixin/[[debug_group_stack]]}} must [=list/is empty|be empty=].\r",
                        "                        - |this|.{{GPURenderPassEncoder/[[occlusion_query_active]]}} must be `false`.\r",
                        "                        - |this|.{{GPURenderCommandsMixin/[[drawCount]]}} must be &le; |this|.{{GPURenderPassEncoder/[[maxDrawCount]]}}.\r",
                        "                    </div>\r",
                        "                1. [=list/Extend=] |parentEncoder|.{{GPUCommandsMixin/[[commands]]}}\r",
                        "                    with |this|.{{GPUCommandsMixin/[[commands]]}}.\r",
                        "                1. If |this|.{{GPURenderPassEncoder/[[endTimestampWrite]]}} is not `null`:\r",
                        "                    1. [=list/Extend=] |parentEncoder|.{{GPUCommandsMixin/[[commands]]}}\r",
                        "                        with |this|.{{GPURenderPassEncoder/[[endTimestampWrite]]}}.\r",
                        "                1. [$Enqueue a render command$] on |this| which issues the subsequent steps on the\r",
                        "                    [=Queue timeline=] with |renderState| when executed.\r",
                        "            </div>\r",
                        "            <div data-timeline=queue>\r",
                        "                [=Queue timeline=] steps:\r",
                        "\r",
                        "                1. Issue: Perform the attachment stores/discards.\r",
                        "                1. Let |renderState| be `null`.\r",
                        "            </div>\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPURenderPassEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>setViewport(x, y, width, height, minDepth, maxDepth)</dfn>\r",
                        "    ::\r",
                        "        Sets the viewport used during the rasterization stage to linearly map from\r",
                        "          [=NDC|normalized device coordinates=] to [=viewport coordinates=].\r",
                        "\r",
                        "        <div algorithm=GPURenderPassEncoder.setViewport>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPURenderPassEncoder}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPURenderPassEncoder/setViewport(x, y, width, height, minDepth, maxDepth)\">\r",
                        "                    |x|: Minimum X value of the viewport in pixels.\r",
                        "                    |y|: Minimum Y value of the viewport in pixels.\r",
                        "                    |width|: Width of the viewport in pixels.\r",
                        "                    |height|: Height of the viewport in pixels.\r",
                        "                    |minDepth|: Minimum depth value of the viewport.\r",
                        "                    |maxDepth|: Maximum depth value of the viewport.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=]\r",
                        "                    and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |x| &ge; `0`\r",
                        "                        - |y| &ge; `0`\r",
                        "                        - |width| &ge; `0`\r",
                        "                        - |height| &ge; `0`\r",
                        "                        - |x| + |width| &le; |this|.{{GPURenderPassEncoder/[[attachment_size]]}}.width\r",
                        "                        - |y| + |height| &le; |this|.{{GPURenderPassEncoder/[[attachment_size]]}}.height\r",
                        "                        - 0.0 &le; |minDepth| &le; 1.0\r",
                        "                        - 0.0 &le; |maxDepth| &le; 1.0\r",
                        "                        - |minDepth| &lt; |maxDepth|\r",
                        "                    </div>\r",
                        "\r",
                        "                1. [$Enqueue a render command$] on |this| which issues the subsequent steps on the\r",
                        "                    [=Queue timeline=] with |renderState| when executed.\r",
                        "            </div>\r",
                        "            <div data-timeline=queue>\r",
                        "                [=Queue timeline=] steps:\r",
                        "\r",
                        "                1. Round |x|, |y|, |width|, and |height| to some uniform precision, no less precise than integer rounding.\r",
                        "                1. Set |renderState|.{{RenderState/[[viewport]]}} to the extents |x|, |y|, |width|, |height|, |minDepth|, and |maxDepth|.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>setScissorRect(x, y, width, height)</dfn>\r",
                        "    ::\r",
                        "        Sets the scissor rectangle used during the rasterization stage.\r",
                        "        After transformation into [=viewport coordinates=] any fragments which fall outside the scissor\r",
                        "        rectangle will be discarded.\r",
                        "\r",
                        "        <div algorithm=GPURenderPassEncoder.setScissorRect>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPURenderPassEncoder}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPURenderPassEncoder/setScissorRect(x, y, width, height)\">\r",
                        "                    |x|: Minimum X value of the scissor rectangle in pixels.\r",
                        "                    |y|: Minimum Y value of the scissor rectangle in pixels.\r",
                        "                    |width|: Width of the scissor rectangle in pixels.\r",
                        "                    |height|: Height of the scissor rectangle in pixels.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=]\r",
                        "                    and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |x|+|width| &le;\r",
                        "                            |this|.{{GPURenderPassEncoder/[[attachment_size]]}}.width.\r",
                        "                        - |y|+|height| &le;\r",
                        "                            |this|.{{GPURenderPassEncoder/[[attachment_size]]}}.height.\r",
                        "                    </div>\r",
                        "\r",
                        "                1. [$Enqueue a render command$] on |this| which issues the subsequent steps on the\r",
                        "                    [=Queue timeline=] with |renderState| when executed.\r",
                        "            </div>\r",
                        "            <div data-timeline=queue>\r",
                        "                [=Queue timeline=] steps:\r",
                        "\r",
                        "                1. Set |renderState|.{{RenderState/[[scissorRect]]}} to the extents |x|, |y|, |width|, and |height|.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>setBlendConstant(color)</dfn>\r",
                        "    ::\r",
                        "        Sets the constant blend color and alpha values used with {{GPUBlendFactor/\"constant\"}}\r",
                        "        and {{GPUBlendFactor/\"one-minus-constant\"}} {{GPUBlendFactor}}s.\r",
                        "\r",
                        "        <div algorithm=GPURenderPassEncoder.setBlendConstant>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPURenderPassEncoder}} this.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPURenderPassEncoder/setBlendConstant(color)\">\r",
                        "                    |color|: The color to use when blending.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. [=?=] [$validate GPUColor shape$](|color|).\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. [$Enqueue a render command$] on |this| which issues the subsequent steps on the\r",
                        "                    [=Queue timeline=] with |renderState| when executed.\r",
                        "            </div>\r",
                        "            <div data-timeline=queue>\r",
                        "                [=Queue timeline=] steps:\r",
                        "\r",
                        "                1. Set |renderState|.{{RenderState/[[blendConstant]]}} to |color|.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>setStencilReference(reference)</dfn>\r",
                        "    ::\r",
                        "        Sets the {{RenderState/[[stencilReference]]}} value used during stencil tests with\r",
                        "        the {{GPUStencilOperation/\"replace\"}} {{GPUStencilOperation}}.\r",
                        "\r",
                        "        <div algorithm=GPURenderPassEncoder.setStencilReference>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPURenderPassEncoder}} this.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPURenderPassEncoder/setStencilReference(reference)\">\r",
                        "                    |reference|: The new stencil reference value.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. [$Enqueue a render command$] on |this| which issues the subsequent steps on the\r",
                        "                    [=Queue timeline=] with |renderState| when executed.\r",
                        "            </div>\r",
                        "            <div data-timeline=queue>\r",
                        "                [=Queue timeline=] steps:\r",
                        "\r",
                        "                1. Set |renderState|.{{RenderState/[[stencilReference]]}} to |reference|.\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPURenderPassEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>beginOcclusionQuery(queryIndex)</dfn>\r",
                        "    ::\r",
                        "        <div algorithm=GPURenderPassEncoder.beginOcclusionQuery>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPURenderPassEncoder}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPURenderPassEncoder/beginOcclusionQuery(queryIndex)\">\r",
                        "                    |queryIndex|: The index of the query in the query set.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this|.{{GPURenderPassEncoder/[[occlusion_query_set]]}} is not `null`.\r",
                        "                        - |queryIndex| &lt; |this|.{{GPURenderPassEncoder/[[occlusion_query_set]]}}.{{GPUQuerySet/count}}.\r",
                        "                        - The query at same |queryIndex| must not have been previously written to in this pass.\r",
                        "                        - |this|.{{GPURenderPassEncoder/[[occlusion_query_active]]}} is `false`.\r",
                        "                    </div>\r",
                        "                1. Set |this|.{{GPURenderPassEncoder/[[occlusion_query_active]]}} to `true`.\r",
                        "\r",
                        "                1. [$Enqueue a render command$] on |this| which issues the subsequent steps on the\r",
                        "                    [=Queue timeline=] with |renderState| when executed.\r",
                        "            </div>\r",
                        "            <div data-timeline=queue>\r",
                        "                [=Queue timeline=] steps:\r",
                        "\r",
                        "                1. Set |renderState|.{{RenderState/[[occlusionQueryIndex]]}} to |queryIndex|.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>endOcclusionQuery()</dfn>\r",
                        "    ::\r",
                        "        <div algorithm=GPURenderPassEncoder.endOcclusionQuery>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPURenderPassEncoder}} this.\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this|.{{GPURenderPassEncoder/[[occlusion_query_active]]}} is `true`.\r",
                        "                    </div>\r",
                        "                1. Set |this|.{{GPURenderPassEncoder/[[occlusion_query_active]]}} to `false`.\r",
                        "\r",
                        "                1. [$Enqueue a render command$] on |this| which issues the subsequent steps on the\r",
                        "                    [=Queue timeline=] with |renderState| when executed.\r",
                        "            </div>\r",
                        "            <div data-timeline=queue>\r",
                        "                [=Queue timeline=] steps:\r",
                        "\r",
                        "                1. Let |passingFragments| be non-zero if any fragment samples passed all per-fragment\r",
                        "                    tests since the corresponding {{GPURenderPassEncoder/beginOcclusionQuery()}}\r",
                        "                    command was executed, and zero otherwise.\r",
                        "\r",
                        "                    Note: If no draw calls occurred, |passingFragments| is zero.\r",
                        "                1. Write |passingFragments| into\r",
                        "                    |this|.{{GPURenderPassEncoder/[[occlusion_query_set]]}} at index\r",
                        "                    |renderState|.{{RenderState/[[occlusionQueryIndex]]}}.\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                },
                {
                    "target": "GPURenderPassEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>executeBundles(bundles)</dfn>\r",
                        "    ::\r",
                        "        Executes the commands previously recorded into the given {{GPURenderBundle}}s as part of\r",
                        "        this render pass.\r",
                        "\r",
                        "        When a {{GPURenderBundle}} is executed, it does not inherit the render pass's pipeline, bind\r",
                        "        groups, or vertex and index buffers. After a {{GPURenderBundle}} has executed, the render\r",
                        "        pass's pipeline, bind group, and vertex/index buffer state is cleared\r",
                        "        (to the initial, empty values).\r",
                        "\r",
                        "        Note: The state is cleared, not restored to the previous state.\r",
                        "        This occurs even if zero {{GPURenderBundle|GPURenderBundles}} are executed.\r",
                        "\r",
                        "        <div algorithm=GPURenderPassEncoder.executeBundles>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPURenderPassEncoder}} this.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPURenderPassEncoder/executeBundles(bundles)\">\r",
                        "                    |bundles|: List of render bundles to execute.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=]\r",
                        "                    and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - For each |bundle| in |bundles|:\r",
                        "                            - |bundle| must be [$valid to use with$] |this|.\r",
                        "                            - |this|.{{GPURenderCommandsMixin/[[layout]]}} must equal |bundle|.{{GPURenderBundle/[[layout]]}}.\r",
                        "                            - If |this|.{{GPURenderCommandsMixin/[[depthReadOnly]]}} is true, |bundle|.{{GPURenderBundle/[[depthReadOnly]]}} must be true.\r",
                        "                            - If |this|.{{GPURenderCommandsMixin/[[stencilReadOnly]]}} is true, |bundle|.{{GPURenderBundle/[[stencilReadOnly]]}} must be true.\r",
                        "                    </div>\r",
                        "\r",
                        "                1. For each |bundle| in |bundles|:\r",
                        "                    1. Increment |this|.{{GPURenderCommandsMixin/[[drawCount]]}} by |bundle|.{{GPURenderBundle/[[drawCount]]}}.\r",
                        "\r",
                        "                1. [=map/Clear=] |this|.{{GPUBindingCommandsMixin/[[bind_groups]]}}.\r",
                        "                1. Set |this|.{{GPURenderCommandsMixin/[[pipeline]]}} to `null`.\r",
                        "                1. Set |this|.{{GPURenderCommandsMixin/[[index_buffer]]}} to `null`.\r",
                        "                1. [=map/Clear=] |this|.{{GPURenderCommandsMixin/[[vertex_buffers]]}}.\r",
                        "\r",
                        "                1. Let |passState| be a snapshot of |this|'s current state.\r",
                        "                1. [$Enqueue a render command$] on |this| which issues the subsequent steps on the\r",
                        "                    [=Queue timeline=] with |renderState| when executed.\r",
                        "            </div>\r",
                        "            <div data-timeline=queue>\r",
                        "                [=Queue timeline=] steps:\r",
                        "\r",
                        "                1. For each |bundle| in |bundles|:\r",
                        "                    1. Execute each command in |bundle|.{{GPURenderBundle/[[command_list]]}}\r",
                        "                        with |passState| and |renderState|.\r",
                        "\r",
                        "                        Note: |renderState| cannot be changed by executing render bundles.\r",
                        "                        Also note, no mutable |passState| state is visible to render bundles.\r",
                        "            </div>\r",
                        "\r",
                        "        </div>\r"
                    ]
                }
            ]
        ],
        [
            "RenderState",
            [
                {
                    "target": "RenderState",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[occlusionQueryIndex]]</dfn>, of type {{GPUSize32}}\r",
                        "    ::\r",
                        "        The index into {{GPURenderPassEncoder/[[occlusion_query_set]]}} at which to store the\r",
                        "        occlusion query results.\r",
                        "\r",
                        "    : <dfn>\\[[viewport]]</dfn>\r",
                        "    ::  Current viewport rectangle and depth range. Initially set to the following values:\r",
                        "        - `x, y` = `0.0, 0.0`\r",
                        "        - `width, height` = the dimensions of the pass's render targets\r",
                        "        - `minDepth, maxDepth` = `0.0, 1.0`\r",
                        "\r",
                        "    : <dfn>\\[[scissorRect]]</dfn>\r",
                        "    ::  Current scissor rectangle. Initially set to the following values:\r",
                        "        - `x, y` = `0, 0`\r",
                        "        - `width, height` = the dimensions of the pass's render targets\r",
                        "\r",
                        "    : <dfn>\\[[blendConstant]]</dfn>, of type {{GPUColor}}\r",
                        "    ::  Current blend constant value, initially `[0, 0, 0, 0]`.\r",
                        "\r",
                        "    : <dfn>\\[[stencilReference]]</dfn>, of type {{GPUStencilValue}}\r",
                        "    ::  Current stencil reference value, initially `0`.\r"
                    ]
                }
            ]
        ],
        [
            "GPURenderPassTimestampWrites",
            [
                {
                    "target": "GPURenderPassTimestampWrites",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>querySet</dfn>\r",
                        "    ::\r",
                        "        The {{GPUQuerySet}}, of type {{GPUQueryType/\"timestamp\"}}, that the query results will be\r",
                        "        written to.\r",
                        "\r",
                        "    : <dfn>beginningOfPassWriteIndex</dfn>\r",
                        "    ::\r",
                        "        If defined, indicates the query index in {{GPURenderPassTimestampWrites/querySet}} into\r",
                        "        which the timestamp at the beginning of the render pass will be written.\r",
                        "\r",
                        "    : <dfn>endOfPassWriteIndex</dfn>\r",
                        "    ::\r",
                        "        If defined, indicates the query index in {{GPURenderPassTimestampWrites/querySet}} into\r",
                        "        which the timestamp at the end of the render pass will be written.\r"
                    ]
                }
            ]
        ],
        [
            "GPURenderPassDescriptor",
            [
                {
                    "target": "GPURenderPassDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>colorAttachments</dfn>\r",
                        "    ::\r",
                        "        The set of {{GPURenderPassColorAttachment}} values in this sequence defines which\r",
                        "        color attachments will be output to when executing this render pass.\r",
                        "\r",
                        "        Due to [=compatible usage list|usage compatibility=], no color attachment\r",
                        "        may alias another attachment or any resource used inside the render pass.\r",
                        "\r",
                        "    : <dfn>depthStencilAttachment</dfn>\r",
                        "    ::\r",
                        "        The {{GPURenderPassDepthStencilAttachment}} value that defines the depth/stencil\r",
                        "        attachment that will be output to and tested against when executing this render pass.\r",
                        "\r",
                        "        Due to [=compatible usage list|usage compatibility=], no writable depth/stencil attachment\r",
                        "        may alias another attachment or any resource used inside the render pass.\r",
                        "\r",
                        "    : <dfn>occlusionQuerySet</dfn>\r",
                        "    ::\r",
                        "        The {{GPUQuerySet}} value defines where the occlusion query results will be stored for this pass.\r",
                        "\r",
                        "    : <dfn>timestampWrites</dfn>\r",
                        "    ::\r",
                        "        Defines which timestamp values will be written for this pass, and where to write them to.\r",
                        "\r",
                        "    : <dfn>maxDrawCount</dfn>\r",
                        "    ::\r",
                        "        The maximum number of draw calls that will be done in the render pass. Used by some\r",
                        "        implementations to size work injected before the render pass. Keeping the default value\r",
                        "        is a good default, unless it is known that more draw calls will be done.\r"
                    ]
                }
            ]
        ],
        [
            "GPURenderPassColorAttachment",
            [
                {
                    "target": "GPURenderPassColorAttachment",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>view</dfn>\r",
                        "    ::\r",
                        "        A {{GPUTextureView}} describing the texture [=subresource=] that will be output to for this\r",
                        "        color attachment.\r",
                        "\r",
                        "    : <dfn>depthSlice</dfn>\r",
                        "    ::\r",
                        "        Indicates the depth slice index of {{GPUTextureViewDimension/\"3d\"}} {{GPURenderPassColorAttachment/view}}\r",
                        "        that will be output to for this color attachment.\r",
                        "\r",
                        "    : <dfn>resolveTarget</dfn>\r",
                        "    ::\r",
                        "        A {{GPUTextureView}} describing the texture [=subresource=] that will receive the resolved\r",
                        "        output for this color attachment if {{GPURenderPassColorAttachment/view}} is\r",
                        "        multisampled.\r",
                        "\r",
                        "    : <dfn>clearValue</dfn>\r",
                        "    ::\r",
                        "        Indicates the value to clear {{GPURenderPassColorAttachment/view}} to prior to executing the\r",
                        "        render pass. If not [=map/exist|provided=], defaults to `{r: 0, g: 0, b: 0, a: 0}`. Ignored\r",
                        "        if {{GPURenderPassColorAttachment/loadOp}} is not {{GPULoadOp/\"clear\"}}.\r",
                        "\r",
                        "        The components of {{GPURenderPassColorAttachment/clearValue}} are all double values.\r",
                        "        They are converted [$to a texel value of texture format$] matching the render attachment.\r",
                        "        If conversion fails, a validation error is generated.\r",
                        "\r",
                        "    : <dfn>loadOp</dfn>\r",
                        "    ::\r",
                        "        Indicates the load operation to perform on {{GPURenderPassColorAttachment/view}} prior to\r",
                        "        executing the render pass.\r",
                        "\r",
                        "        Note: It is recommended to prefer clearing; see {{GPULoadOp/\"clear\"}} for details.\r",
                        "\r",
                        "    : <dfn>storeOp</dfn>\r",
                        "    ::\r",
                        "        The store operation to perform on {{GPURenderPassColorAttachment/view}}\r",
                        "        after executing the render pass.\r"
                    ]
                }
            ]
        ],
        [
            "GPURenderPassDepthStencilAttachment",
            [
                {
                    "target": "GPURenderPassDepthStencilAttachment",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>view</dfn>\r",
                        "    ::\r",
                        "        A {{GPUTextureView}} describing the texture [=subresource=] that will be output to\r",
                        "        and read from for this depth/stencil attachment.\r",
                        "\r",
                        "    : <dfn>depthClearValue</dfn>\r",
                        "    ::\r",
                        "        Indicates the value to clear {{GPURenderPassDepthStencilAttachment/view}}'s depth component\r",
                        "        to prior to executing the render pass. Ignored if {{GPURenderPassDepthStencilAttachment/depthLoadOp}}\r",
                        "        is not {{GPULoadOp/\"clear\"}}. Must be between 0.0 and 1.0, inclusive.\r",
                        "        <!-- POSTV1(unrestricted-depth): unless unrestricted depth is enabled -->\r",
                        "\r",
                        "    : <dfn>depthLoadOp</dfn>\r",
                        "    ::\r",
                        "        Indicates the load operation to perform on {{GPURenderPassDepthStencilAttachment/view}}'s\r",
                        "        depth component prior to executing the render pass.\r",
                        "\r",
                        "        Note: It is recommended to prefer clearing; see {{GPULoadOp/\"clear\"}} for details.\r",
                        "\r",
                        "    : <dfn>depthStoreOp</dfn>\r",
                        "    ::\r",
                        "        The store operation to perform on {{GPURenderPassDepthStencilAttachment/view}}'s\r",
                        "        depth component after executing the render pass.\r",
                        "\r",
                        "    : <dfn>depthReadOnly</dfn>\r",
                        "    ::\r",
                        "        Indicates that the depth component of {{GPURenderPassDepthStencilAttachment/view}}\r",
                        "        is read only.\r",
                        "\r",
                        "    : <dfn>stencilClearValue</dfn>\r",
                        "    ::\r",
                        "        Indicates the value to clear {{GPURenderPassDepthStencilAttachment/view}}'s stencil component\r",
                        "        to prior to executing the render pass. Ignored if {{GPURenderPassDepthStencilAttachment/stencilLoadOp}}\r",
                        "        is not {{GPULoadOp/\"clear\"}}.\r",
                        "\r",
                        "        The value will be converted to the type of the stencil aspect of |view| by taking the same\r",
                        "        number of LSBs as the number of bits in the stencil aspect of one texel block of |view|.\r",
                        "\r",
                        "    : <dfn>stencilLoadOp</dfn>\r",
                        "    ::\r",
                        "        Indicates the load operation to perform on {{GPURenderPassDepthStencilAttachment/view}}'s\r",
                        "        stencil component prior to executing the render pass.\r",
                        "\r",
                        "        Note: It is recommended to prefer clearing; see {{GPULoadOp/\"clear\"}} for details.\r",
                        "\r",
                        "    : <dfn>stencilStoreOp</dfn>\r",
                        "    ::\r",
                        "        The store operation to perform on {{GPURenderPassDepthStencilAttachment/view}}'s\r",
                        "        stencil component after executing the render pass.\r",
                        "\r",
                        "    : <dfn>stencilReadOnly</dfn>\r",
                        "    ::\r",
                        "        Indicates that the stencil component of {{GPURenderPassDepthStencilAttachment/view}}\r",
                        "        is read only.\r"
                    ]
                }
            ]
        ],
        [
            "GPULoadOp",
            [
                {
                    "target": "GPULoadOp",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"load\"</dfn>\r",
                        "    ::\r",
                        "        Loads the existing value for this attachment into the render pass.\r",
                        "\r",
                        "    : <dfn>\"clear\"</dfn>\r",
                        "    ::\r",
                        "        Loads a clear value for this attachment into the render pass.\r",
                        "\r",
                        "        Note:\r",
                        "        On some GPU hardware (primarily mobile), {{GPULoadOp/\"clear\"}} is significantly cheaper\r",
                        "        because it avoids loading data from main memory into tile-local memory.\r",
                        "        On other GPU hardware, there isn't a significant difference. As a result, it is\r",
                        "        recommended to use {{GPULoadOp/\"clear\"}} rather than {{GPULoadOp/\"load\"}} in cases where the\r",
                        "        initial value doesn't matter (e.g. the render target will be cleared using a skybox).\r"
                    ]
                }
            ]
        ],
        [
            "GPUStoreOp",
            [
                {
                    "target": "GPUStoreOp",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"store\"</dfn>\r",
                        "    ::\r",
                        "        Stores the resulting value of the render pass for this attachment.\r",
                        "\r",
                        "    : <dfn>\"discard\"</dfn>\r",
                        "    ::\r",
                        "        Discards the resulting value of the render pass for this attachment.\r"
                    ]
                }
            ]
        ],
        [
            "GPURenderPassLayout",
            [
                {
                    "target": "GPURenderPassLayout",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>colorFormats</dfn>\r",
                        "    ::\r",
                        "        A list of the {{GPUTextureFormat}}s of the color attachments for this pass or bundle.\r",
                        "\r",
                        "    : <dfn>depthStencilFormat</dfn>\r",
                        "    ::\r",
                        "        The {{GPUTextureFormat}} of the depth/stencil attachment for this pass or bundle.\r",
                        "\r",
                        "    : <dfn>sampleCount</dfn>\r",
                        "    ::\r",
                        "        Number of samples per pixel in the attachments for this pass or bundle.\r"
                    ]
                }
            ]
        ],
        [
            "GPURenderCommandsMixin",
            [
                {
                    "target": "GPURenderCommandsMixin",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[layout]]</dfn>, of type {{GPURenderPassLayout}}, readonly\r",
                        "    ::\r",
                        "        The layout of the render pass.\r",
                        "\r",
                        "    : <dfn>\\[[depthReadOnly]]</dfn>, of type boolean, readonly\r",
                        "    ::\r",
                        "        If `true`, indicates that the depth component is not modified.\r",
                        "\r",
                        "    : <dfn>\\[[stencilReadOnly]]</dfn>, of type boolean, readonly\r",
                        "    ::\r",
                        "        If `true`, indicates that the stencil component is not modified.\r",
                        "\r",
                        "    : <dfn>\\[[pipeline]]</dfn>, of type {{GPURenderPipeline}}\r",
                        "    ::\r",
                        "        The current {{GPURenderPipeline}}, initially `null`.\r",
                        "\r",
                        "    : <dfn>\\[[index_buffer]]</dfn>, of type {{GPUBuffer}}\r",
                        "    ::\r",
                        "        The current buffer to read index data from, initially `null`.\r",
                        "\r",
                        "    : <dfn>\\[[index_format]]</dfn>, of type {{GPUIndexFormat}}\r",
                        "    ::\r",
                        "        The format of the index data in {{GPURenderCommandsMixin/[[index_buffer]]}}.\r",
                        "\r",
                        "    : <dfn>\\[[index_buffer_offset]]</dfn>, of type {{GPUSize64}}\r",
                        "    ::\r",
                        "        The offset in bytes of the section of {{GPURenderCommandsMixin/[[index_buffer]]}} currently set.\r",
                        "\r",
                        "    : <dfn>\\[[index_buffer_size]]</dfn>, of type {{GPUSize64}}\r",
                        "    ::\r",
                        "        The size in bytes of the section of {{GPURenderCommandsMixin/[[index_buffer]]}} currently set,\r",
                        "        initially `0`.\r",
                        "\r",
                        "    : <dfn>\\[[vertex_buffers]]</dfn>, of type [=ordered map=]&lt;slot, {{GPUBuffer}}&gt;\r",
                        "    ::\r",
                        "        The current {{GPUBuffer}}s to read vertex data from for each slot, initially empty.\r",
                        "\r",
                        "    : <dfn>\\[[vertex_buffer_sizes]]</dfn>, of type [=ordered map=]&lt;slot, {{GPUSize64}}&gt;\r",
                        "    ::\r",
                        "        The size in bytes of the section of {{GPUBuffer}} currently set for each slot, initially\r",
                        "        empty.\r",
                        "\r",
                        "    : <dfn>\\[[drawCount]]</dfn>, of type {{GPUSize64}}\r",
                        "    ::\r",
                        "        The number of draw commands recorded in this encoder.\r"
                    ]
                },
                {
                    "target": "GPURenderCommandsMixin",
                    "type": "method",
                    "lines": [
                        "    : <dfn>setPipeline(pipeline)</dfn>\r",
                        "    ::\r",
                        "        Sets the current {{GPURenderPipeline}}.\r",
                        "\r",
                        "        <div algorithm=GPURenderCommandsMixin.setPipeline>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPURenderCommandsMixin}} this.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPURenderCommandsMixin/setPipeline(pipeline)\">\r",
                        "                    |pipeline|: The render pipeline to use for subsequent drawing commands.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. Let |pipelineTargetsLayout| be [$derive render targets layout from pipeline$](|pipeline|.{{GPURenderPipeline/[[descriptor]]}}).\r",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |pipeline| is [$valid to use with$] |this|.\r",
                        "                        - |this|.{{GPURenderCommandsMixin/[[layout]]}} [=render pass layout/equals=] |pipelineTargetsLayout|.\r",
                        "                        - If |pipeline|.{{GPURenderPipeline/[[writesDepth]]}}:\r",
                        "                            |this|.{{GPURenderCommandsMixin/[[depthReadOnly]]}} must be `false`.\r",
                        "                        - If |pipeline|.{{GPURenderPipeline/[[writesStencil]]}}:\r",
                        "                            |this|.{{GPURenderCommandsMixin/[[stencilReadOnly]]}} must be `false`.\r",
                        "                    </div>\r",
                        "                1. Set |this|.{{GPURenderCommandsMixin/[[pipeline]]}} to be |pipeline|.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>setIndexBuffer(buffer, indexFormat, offset, size)</dfn>\r",
                        "    ::\r",
                        "        Sets the current index buffer.\r",
                        "\r",
                        "        <div algorithm=GPURenderCommandsMixin.setIndexBuffer>\r",
                        "            **Called on:** {{GPURenderCommandsMixin}} this.\r",
                        "\r",
                        "            **Arguments:**\r",
                        "\r",
                        "            <pre class=argumentdef for=\"GPURenderCommandsMixin/setIndexBuffer(buffer, indexFormat, offset, size)\">\r",
                        "                |buffer|: Buffer containing index data to use for subsequent drawing commands.\r",
                        "                |indexFormat|: Format of the index data contained in |buffer|.\r",
                        "                |offset|: Offset in bytes into |buffer| where the index data begins. Defaults to `0`.\r",
                        "                |size|: Size in bytes of the index data in |buffer|.\r",
                        "                    Defaults to the size of the buffer minus the offset.\r",
                        "            </pre>\r",
                        "\r",
                        "            **Returns:** {{undefined}}\r",
                        "\r",
                        "            Issue the following steps on the [=Device timeline=] of |this|.{{GPUObjectBase/[[device]]}}:\r",
                        "\r",
                        "            <div class=device-timeline>\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. If |size| is missing, set |size| to max(0, |buffer|.{{GPUBuffer/size}} - |offset|).\r",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |buffer| is [$valid to use with$] |this|.\r",
                        "                        - |buffer|.{{GPUBuffer/usage}} contains {{GPUBufferUsage/INDEX}}.\r",
                        "                        - |offset| is a multiple of |indexFormat|'s byte size.\r",
                        "                        - |offset| + |size| &le; |buffer|.{{GPUBuffer/size}}.\r",
                        "                    </div>\r",
                        "                1. Add |buffer| to the [=usage scope=] as [=internal usage/input=].\r",
                        "                1. Set |this|.{{GPURenderCommandsMixin/[[index_buffer]]}} to be |buffer|.\r",
                        "                1. Set |this|.{{GPURenderCommandsMixin/[[index_format]]}} to be |indexFormat|.\r",
                        "                1. Set |this|.{{GPURenderCommandsMixin/[[index_buffer_offset]]}} to be |offset|.\r",
                        "                1. Set |this|.{{GPURenderCommandsMixin/[[index_buffer_size]]}} to be |size|.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>setVertexBuffer(slot, buffer, offset, size)</dfn>\r",
                        "    ::\r",
                        "        Sets the current vertex buffer for the given slot.\r",
                        "\r",
                        "        <div algorithm=GPURenderCommandsMixin.setVertexBuffer>\r",
                        "            **Called on:** {{GPURenderCommandsMixin}} this.\r",
                        "\r",
                        "            **Arguments:**\r",
                        "\r",
                        "            <pre class=argumentdef for=\"GPURenderCommandsMixin/setVertexBuffer(slot, buffer, offset, size)\">\r",
                        "                |slot|: The vertex buffer slot to set the vertex buffer for.\r",
                        "                |buffer|: Buffer containing vertex data to use for subsequent drawing commands.\r",
                        "                |offset|: Offset in bytes into |buffer| where the vertex data begins. Defaults to `0`.\r",
                        "                |size|: Size in bytes of the vertex data in |buffer|.\r",
                        "                    Defaults to the size of the buffer minus the offset.\r",
                        "            </pre>\r",
                        "\r",
                        "            **Returns:** {{undefined}}\r",
                        "\r",
                        "            Issue the following steps on the [=Device timeline=] of |this|.{{GPUObjectBase/[[device]]}}:\r",
                        "\r",
                        "            <div class=device-timeline>\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. Let |bufferSize| be 0 if |buffer| is `null`, or |buffer|.{{GPUBuffer/size}} if not.\r",
                        "                1. If |size| is missing, set |size| to max(0, |bufferSize| - |offset|).\r",
                        "                1. If any of the following requirements are unmet, make |this| [=invalid=] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |slot| must be &lt;\r",
                        "                            |this|.{{GPUObjectBase/[[device]]}}.{{device/[[limits]]}}.{{supported limits/maxVertexBuffers}}.\r",
                        "                        - |offset| must be a multiple of 4.\r",
                        "                        - |offset| + |size| must be &le; |bufferSize|.\r",
                        "                    </div>\r",
                        "                1. If |buffer| is `null`:\r",
                        "                    1. [=map/Remove=] |this|.{{GPURenderCommandsMixin/[[vertex_buffers]]}}[|slot|].\r",
                        "                    1. [=map/Remove=] |this|.{{GPURenderCommandsMixin/[[vertex_buffer_sizes]]}}[|slot|].\r",
                        "\r",
                        "                    Otherwise:\r",
                        "\r",
                        "                    1. If any of the following requirements are unmet, make |this| [=invalid=] and stop.\r",
                        "\r",
                        "                        <div class=validusage>\r",
                        "                            - |buffer| must be [$valid to use with$] |this|.\r",
                        "                            - |buffer|.{{GPUBuffer/usage}} must contain {{GPUBufferUsage/VERTEX}}.\r",
                        "                        </div>\r",
                        "                    1. Add |buffer| to the [=usage scope=] as [=internal usage/input=].\r",
                        "                    1. Set |this|.{{GPURenderCommandsMixin/[[vertex_buffers]]}}[|slot|] to be |buffer|.\r",
                        "                    1. Set |this|.{{GPURenderCommandsMixin/[[vertex_buffer_sizes]]}}[|slot|] to be |size|.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>draw(vertexCount, instanceCount, firstVertex, firstInstance)</dfn>\r",
                        "    ::\r",
                        "        Draws primitives.\r",
                        "        See [[#rendering-operations]] for the detailed specification.\r",
                        "\r",
                        "        <div algorithm=GPURenderCommandsMixin.draw>\r",
                        "            **Called on:** {{GPURenderCommandsMixin}} this.\r",
                        "\r",
                        "            **Arguments:**\r",
                        "\r",
                        "            <pre class=argumentdef for=\"GPURenderCommandsMixin/draw(vertexCount, instanceCount, firstVertex, firstInstance)\">\r",
                        "                |vertexCount|: The number of vertices to draw.\r",
                        "                |instanceCount|: The number of instances to draw.\r",
                        "                |firstVertex|: Offset into the vertex buffers, in vertices, to begin drawing from.\r",
                        "                |firstInstance|: First instance to draw.\r",
                        "            </pre>\r",
                        "\r",
                        "            **Returns:** {{undefined}}\r",
                        "\r",
                        "            Issue the following steps on the [=Device timeline=] of |this|.{{GPUObjectBase/[[device]]}}:\r",
                        "\r",
                        "            <div class=device-timeline>\r",
                        "                1. [$Validate the encoder state$] of |this|. If it returns false, stop.\r",
                        "                1. If any of the following conditions are unsatisfied, make |this| [=invalid=] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - It is [$valid to draw$] with |this|.\r",
                        "                        - Let |buffers| be |this|.{{GPURenderCommandsMixin/[[pipeline]]}}.{{GPURenderPipeline/[[descriptor]]}}.{{GPURenderPipelineDescriptor/vertex}}.{{GPUVertexState/buffers}}.\r",
                        "                        - For each {{GPUIndex32}} |slot| from `0` to |buffers|.length (non-inclusive):\r",
                        "                            - If |buffers|[|slot|] is `null`, [=iteration/continue=].\r",
                        "                            - Let |bufferSize| be |this|.{{GPURenderCommandsMixin/[[vertex_buffer_sizes]]}}[|slot|].\r",
                        "                            - Let |stride| be |buffers|[|slot|].{{GPUVertexBufferLayout/arrayStride}}.\r",
                        "                            - Let |lastStride| be max(|attribute|.{{GPUVertexAttribute/offset}} &plus; sizeof(|attribute|.{{GPUVertexAttribute/format}}))\r",
                        "                                for each |attribute| in |buffers|[|slot|].{{GPUVertexBufferLayout/attributes}}.\r",
                        "                            - Let |strideCount| be computed based on |buffers|[|slot|].{{GPUVertexBufferLayout/stepMode}}:\r",
                        "\r",
                        "                                <dl class=switch>\r",
                        "                                    : {{GPUVertexStepMode/\"vertex\"}}\r",
                        "                                    :: |firstVertex| &plus; |vertexCount|\r",
                        "                                    : {{GPUVertexStepMode/\"instance\"}}\r",
                        "                                    :: |firstInstance| &plus; |instanceCount|\r"
                    ]
                }
            ]
        ],
        [
            "GPURenderBundle",
            [
                {
                    "target": "GPURenderBundle",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[command_list]]</dfn>, of type [=list=]&lt;[=GPU command=]&gt;\r",
                        "    ::\r",
                        "        A [=list=] of [=GPU commands=] to be submitted to the {{GPURenderPassEncoder}} when the\r",
                        "        {{GPURenderBundle}} is executed.\r",
                        "\r",
                        "    : <dfn>\\[[layout]]</dfn>, of type {{GPURenderPassLayout}}\r",
                        "    ::\r",
                        "        The layout of the render bundle.\r",
                        "\r",
                        "    : <dfn>\\[[depthReadOnly]]</dfn>, of type boolean\r",
                        "    ::\r",
                        "        If `true`, indicates that the depth component is not modified by executing this render bundle.\r",
                        "\r",
                        "    : <dfn>\\[[stencilReadOnly]]</dfn>, of type boolean\r",
                        "    ::\r",
                        "        If `true`, indicates that the stencil component is not modified by executing this render bundle.\r",
                        "\r",
                        "    : <dfn>\\[[drawCount]]</dfn>, of type {{GPUSize64}}\r",
                        "    ::\r",
                        "        The number of draw commands in this {{GPURenderBundle}}.\r"
                    ]
                }
            ]
        ],
        [
            "GPURenderBundleEncoderDescriptor",
            [
                {
                    "target": "GPURenderBundleEncoderDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>depthReadOnly</dfn>\r",
                        "    ::\r",
                        "        If `true`, indicates that the render bundle does not modify the depth component of the\r",
                        "        {{GPURenderPassDepthStencilAttachment}} of any render pass the render bundle is executed\r",
                        "        in.\r",
                        "\r",
                        "    : <dfn>stencilReadOnly</dfn>\r",
                        "    ::\r",
                        "        If `true`, indicates that the render bundle does not modify the stencil component of the\r",
                        "        {{GPURenderPassDepthStencilAttachment}} of any render pass the render bundle is executed\r",
                        "        in.\r"
                    ]
                }
            ]
        ],
        [
            "GPURenderBundleEncoder",
            [
                {
                    "target": "GPURenderBundleEncoder",
                    "type": "method",
                    "lines": [
                        "    : <dfn>finish(descriptor)</dfn>\r",
                        "    ::\r",
                        "        Completes recording of the render bundle commands sequence.\r",
                        "\r",
                        "        <div algorithm=GPURenderBundleEncoder.finish>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPURenderBundleEncoder}} this.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPURenderBundleEncoder/finish(descriptor)\">\r",
                        "                    descriptor:\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{GPURenderBundle}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let |renderBundle| be a new {{GPURenderBundle}}.\r",
                        "                1. Issue the |finish steps| on the [=Device timeline=] of\r",
                        "                    |this|.{{GPUObjectBase/[[device]]}}.\r",
                        "                1. Return |renderBundle|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] |finish steps|:\r",
                        "\r",
                        "                1. Let |validationSucceeded| be `true` if all of the following requirements are met, and `false` otherwise.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |this| must be [=valid=].\r",
                        "                        - |this|.{{GPUCommandsMixin/[[state]]}} must be \"[=encoder state/open=]\".\r",
                        "                        - |this|.{{GPUDebugCommandsMixin/[[debug_group_stack]]}} must [=list/is empty|be empty=].\r",
                        "                        - Every [=usage scope=] contained in |this| must satisfy the [=usage scope validation=].\r",
                        "                    </div>\r",
                        "                1. Set |this|.{{GPUCommandsMixin/[[state]]}} to \"[=encoder state/ended=]\".\r",
                        "                1. If |validationSucceeded| is `false`, then:\r",
                        "                    1. [$Generate a validation error$].\r",
                        "                    1. Return a new [=invalid=] {{GPURenderBundle}}.\r",
                        "                1. Set |renderBundle|.{{GPURenderBundle/[[command_list]]}} to\r",
                        "                    |this|.{{GPUCommandsMixin/[[commands]]}}.\r",
                        "                1. Set |renderBundle|.{{GPURenderBundle/[[drawCount]]}} to\r",
                        "                    |this|.{{GPURenderCommandsMixin/[[drawCount]]}}.\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                }
            ]
        ],
        [
            "GPUQueue",
            [
                {
                    "target": "GPUQueue",
                    "type": "method",
                    "lines": [
                        "    : <dfn>writeBuffer(buffer, bufferOffset, data, dataOffset, size)</dfn>\r",
                        "    ::\r",
                        "        Issues a write operation of the provided data into a {{GPUBuffer}}.\r",
                        "\r",
                        "        <div algorithm=GPUQueue.writeBuffer>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUQueue}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUQueue/writeBuffer(buffer, bufferOffset, data, dataOffset, size)\">\r",
                        "                    |buffer|: The buffer to write to.\r",
                        "                    |bufferOffset|: Offset in bytes into |buffer| to begin writing at.\r",
                        "                    |data|: Data to write into |buffer|.\r",
                        "                    |dataOffset|: Offset in into |data| to begin writing from. Given in elements if\r",
                        "                        |data| is a `TypedArray` and bytes otherwise.\r",
                        "                    |size|: Size of content to write from |data| to |buffer|. Given in elements if\r",
                        "                        |data| is a `TypedArray` and bytes otherwise.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. If |data| is an {{ArrayBuffer}} or {{DataView}}, let the element type be \"byte\".\r",
                        "                    Otherwise, |data| is a TypedArray; let the element type be the type of the TypedArray.\r",
                        "                1. Let |dataSize| be the size of |data|, in elements.\r",
                        "                1. If |size| is missing,\r",
                        "                    let |contentsSize| be |dataSize| &minus; |dataOffset|.\r",
                        "                    Otherwise, let |contentsSize| be |size|.\r",
                        "                1. If any of the following conditions are unsatisfied,\r",
                        "                    throw {{OperationError}} and stop.\r",
                        "\r",
                        "                    <!-- Note: it's easiest to write the valid usage rules inline\r",
                        "                        here, because they depend on contentsSize above. -->\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |contentsSize| &ge; 0.\r",
                        "                        - |dataOffset| + |contentsSize| &le; |dataSize|.\r",
                        "                        - |contentsSize|, converted to bytes, is a multiple of 4 bytes.\r",
                        "                    </div>\r",
                        "                1. Let |dataContents| be [=get a copy of the buffer source|a copy of the bytes held by the buffer source=] |data|.\r",
                        "                1. Let |contents| be the |contentsSize| elements of |dataContents| starting at\r",
                        "                    an offset of |dataOffset| elements.\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. If any of the following conditions are unsatisfied,\r",
                        "                    [$generate a validation error$] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |buffer| is [$valid to use with$] |this|.\r",
                        "                        - |buffer|.{{GPUBuffer/[[internals]]}}.[=buffer internals/state=] is \"[=buffer internals/state/available=]\".\r",
                        "                        - |buffer|.{{GPUBuffer/usage}} includes {{GPUBufferUsage/COPY_DST}}.\r",
                        "                        - |bufferOffset|, converted to bytes, is a multiple of 4 bytes.\r",
                        "                        - |bufferOffset| + |contentsSize|, converted to bytes, &le; |buffer|.{{GPUBuffer/size}} bytes.\r",
                        "                    </div>\r",
                        "                1. Write |contents| into |buffer| starting at |bufferOffset|.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>writeTexture(destination, data, dataLayout, size)</dfn>\r",
                        "    ::\r",
                        "        Issues a write operation of the provided data into a {{GPUTexture}}.\r",
                        "\r",
                        "        <div algorithm=GPUQueue.writeTexture>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUQueue}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUQueue/writeTexture(destination, data, dataLayout, size)\">\r",
                        "                    |destination|: The [=texture subresource=] and origin to write to.\r",
                        "                    |data|: Data to write into |destination|.\r",
                        "                    |dataLayout|: Layout of the content in |data|.\r",
                        "                    |size|: Extents of the content to write from |data| to |destination|.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. [=?=] [$validate GPUOrigin3D shape$](|destination|.{{GPUImageCopyTexture/origin}}).\r",
                        "                1. [=?=] [$validate GPUExtent3D shape$](|size|).\r",
                        "                1. Let |dataBytes| be [=get a copy of the buffer source|a copy of the bytes held by the buffer source=] |data|.\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. Let |texture| be |destination|.{{GPUImageCopyTexture/texture}}.\r",
                        "                1. If any of the following conditions are unsatisfied,\r",
                        "                    [$generate a validation error$] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - [$validating GPUImageCopyTexture$](|destination|, |size|) returns `true`.\r",
                        "                        - |texture|.{{GPUTexture/usage}} includes {{GPUTextureUsage/COPY_DST}}.\r",
                        "                        - |texture|.{{GPUTexture/sampleCount}} is 1.\r",
                        "                        - [=validating texture copy range=](|destination|, |size|) return `true`.\r",
                        "                        - |destination|.{{GPUImageCopyTexture/aspect}} must refer to a single aspect of\r",
                        "                            |texture|.{{GPUTexture/format}}.\r",
                        "                        - That aspect must be a valid image copy destination according to [[#depth-formats]].\r",
                        "                        - Let |aspectSpecificFormat| = |texture|.{{GPUTexture/format}}.\r",
                        "                        - If |texture|.{{GPUTexture/format}} is a [=depth-or-stencil format=]:\r",
                        "                            - Set |aspectSpecificFormat| to the [=aspect-specific format=] of |texture|.{{GPUTexture/format}} according to [[#depth-formats]].\r",
                        "                        - [$validating linear texture data$](|dataLayout|,\r",
                        "                            |dataBytes|.[=byte sequence/length=],\r",
                        "                            |aspectSpecificFormat|,\r",
                        "                            |size|) succeeds.\r",
                        "\r",
                        "                        Note: unlike\r",
                        "                        {{GPUCommandEncoder}}.{{GPUCommandEncoder/copyBufferToTexture()}},\r",
                        "                        there is no alignment requirement on either\r",
                        "                        |dataLayout|.{{GPUImageDataLayout/bytesPerRow}} or |dataLayout|.{{GPUImageDataLayout/offset}}.\r",
                        "                    </div>\r",
                        "                1. Let |contents| be the contents of the [=images=] seen by\r",
                        "                    viewing |dataBytes| with |dataLayout| and |size|.\r",
                        "\r",
                        "                    Issue: Specify more formally.\r",
                        "\r",
                        "                    Note: This is described as copying all of |data| to the device timeline,\r",
                        "                    but in practice |data| could be much larger than necessary.\r",
                        "                    Implementations should optimize by copying only the necessary bytes.\r",
                        "                1. Issue the subsequent steps on the [=Queue timeline=] of |this|.\r",
                        "            </div>\r",
                        "            <div data-timeline=queue>\r",
                        "                [=Queue timeline=] steps:\r",
                        "\r",
                        "                1. Write |contents| into |destination|.\r",
                        "\r",
                        "                    Issue: Define copy, including provision for snorm.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>copyExternalImageToTexture(source, destination, copySize)</dfn>\r",
                        "    ::\r",
                        "        Issues a copy operation of the contents of a platform image/canvas\r",
                        "        into the destination texture.\r",
                        "\r",
                        "        This operation performs [[#color-space-conversions|color encoding]] into the destination\r",
                        "        encoding according to the parameters of {{GPUImageCopyTextureTagged}}.\r",
                        "\r",
                        "        Copying into a `-srgb` texture results in the same texture bytes, not the same decoded\r",
                        "        values, as copying into the corresponding non-`-srgb` format.\r",
                        "        Thus, after a copy operation, sampling the destination texture has\r",
                        "        different results depending on whether its format is `-srgb`, all else unchanged.\r",
                        "\r",
                        "        <!-- POSTV1(srgb-linear): If added, explain here how it interacts. -->\r",
                        "\r",
                        "        <div class=note heading>\r",
                        "            When copying from a `\"webgl\"`/`\"webgl2\"` context canvas, the\r",
                        "            [=WebGL Drawing Buffer=] may be not exist during certain points in the\r",
                        "            frame presentation cycle (after the image has been moved to the compositor\r",
                        "            for display). To avoid this, either:\r",
                        "\r",
                        "            - Issue {{GPUQueue/copyExternalImageToTexture()}} in the same [=task=] with\r",
                        "                WebGL rendering operation, to ensure the copy occurs before the WebGL\r",
                        "                canvas is presented.\r",
                        "            - If not possible, set the `preserveDrawingBuffer` option in\r",
                        "                {{WebGLContextAttributes}} to `true`, so that the drawing buffer will\r",
                        "                still contain a copy of the frame contents after they've been presented.\r",
                        "                Note, this extra copy may have a performance cost.\r",
                        "        </div>\r",
                        "\r",
                        "        <div algorithm=GPUQueue.copyExternalImageToTexture>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUQueue}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUQueue/copyExternalImageToTexture(source, destination, copySize)\">\r",
                        "                    |source|: source image and origin to copy to |destination|.\r",
                        "                    |destination|: The [=texture subresource=] and origin to write to, and its encoding metadata.\r",
                        "                    |copySize|: Extents of the content to write from |source| to |destination|.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. [=?=] [$validate GPUOrigin2D shape$](|source|.{{GPUImageCopyExternalImage/origin}}).\r",
                        "                1. [=?=] [$validate GPUOrigin3D shape$](|destination|.{{GPUImageCopyTexture/origin}}).\r",
                        "                1. [=?=] [$validate GPUExtent3D shape$](|copySize|).\r",
                        "                1. Let |sourceImage| be |source|.{{GPUImageCopyExternalImage/source}}\r",
                        "                1. If |sourceImage| <l spec=html>[=is not origin-clean=]</l>,\r",
                        "                    throw a {{SecurityError}} and stop.\r",
                        "                1. If any of the following requirements are unmet, throw an {{OperationError}} and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |source|.|origin|.[=GPUOrigin3D/x=] + |copySize|.[=GPUExtent3D/width=]\r",
                        "                            must be &le; the width of |sourceImage|.\r",
                        "                        - |source|.|origin|.[=GPUOrigin3D/y=] + |copySize|.[=GPUExtent3D/height=]\r",
                        "                            must be &le; the height of |sourceImage|.\r",
                        "                        - |source|.|origin|.[=GPUOrigin3D/z=] + |copySize|.[=GPUExtent3D/depthOrArrayLayers=]\r",
                        "                            must be &le; 1.\r",
                        "                    </div>\r",
                        "                1. Let |usability| be [=?=] [=check the usability of the image argument=](|source|).\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. Let |texture| be |destination|.{{GPUImageCopyTexture/texture}}.\r",
                        "                1. If any of the following requirements are unmet, [$generate a validation error$] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - |usability| must be `good`.\r",
                        "                        - |destination|.{{GPUImageCopyTexture/texture}} must be [$valid to use with$] |this|.\r",
                        "                        - [$validating GPUImageCopyTexture$](destination, copySize) must return `true`.\r",
                        "                        - [=validating texture copy range=](destination, copySize) must return `true`.\r",
                        "                        - |texture|.{{GPUTexture/usage}} must include both\r",
                        "                            {{GPUTextureUsage/RENDER_ATTACHMENT}} and {{GPUTextureUsage/COPY_DST}}.\r",
                        "                        - |texture|.{{GPUTexture/dimension}} must be {{GPUTextureDimension/\"2d\"}}.\r",
                        "                        - |texture|.{{GPUTexture/sampleCount}} must be 1.\r",
                        "                        - |texture|.{{GPUTexture/format}} must be one of the following\r",
                        "                            formats (which all support {{GPUTextureUsage/RENDER_ATTACHMENT}} usage):\r",
                        "                            - {{GPUTextureFormat/\"r8unorm\"}}\r",
                        "                            - {{GPUTextureFormat/\"r16float\"}}\r",
                        "                            - {{GPUTextureFormat/\"r32float\"}}\r",
                        "                            - {{GPUTextureFormat/\"rg8unorm\"}}\r",
                        "                            - {{GPUTextureFormat/\"rg16float\"}}\r",
                        "                            - {{GPUTextureFormat/\"rg32float\"}}\r",
                        "                            - {{GPUTextureFormat/\"rgba8unorm\"}}\r",
                        "                            - {{GPUTextureFormat/\"rgba8unorm-srgb\"}}\r",
                        "                            - {{GPUTextureFormat/\"bgra8unorm\"}}\r",
                        "                            - {{GPUTextureFormat/\"bgra8unorm-srgb\"}}\r",
                        "                            - {{GPUTextureFormat/\"rgb10a2unorm\"}}\r",
                        "                            - {{GPUTextureFormat/\"rgba16float\"}}\r",
                        "                            - {{GPUTextureFormat/\"rgba32float\"}}\r",
                        "                    </div>\r",
                        "                1. Issue: Do the actual copy.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>submit(commandBuffers)</dfn>\r",
                        "    ::\r",
                        "        Schedules the execution of the command buffers by the GPU on this queue.\r",
                        "\r",
                        "        Submitted command buffers cannot be used again.\r",
                        "\r",
                        "        <div algorithm=GPUQueue.submit>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUQueue}} this.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUQueue/submit(commandBuffers)\">\r",
                        "                    |commandBuffers|:\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |this|:\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. If any of the following requirements are unmet, [$generate a validation error$] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - Every {{GPUCommandBuffer}} in |commandBuffers| must be [$valid to use with$] |this|.\r",
                        "                        - For each of the following types of resources used by any command in any\r",
                        "                            element of |commandBuffers|:\r",
                        "\r",
                        "                            <dl class=switch>\r",
                        "                                : {{GPUBuffer}} |b|\r",
                        "                                :: |b|.{{GPUBuffer/[[internals]]}}.[=buffer internals/state=] must\r",
                        "                                    be \"[=buffer internals/state/available=]\".\r",
                        "                                : {{GPUTexture}} |t|\r",
                        "                                :: |t|.{{GPUTexture/[[destroyed]]}} must be `false`.\r",
                        "                                : {{GPUExternalTexture}} |et|\r",
                        "                                :: |et|.{{GPUExternalTexture/[[expired]]}} must be `false`.\r",
                        "                                : {{GPUQuerySet}} |qs|\r",
                        "                                :: |qs| must be in the [=query set state/available=] state.\r",
                        "                                    For occlusion queries, the {{GPURenderPassDescriptor/occlusionQuerySet}}\r",
                        "                                    in {{GPUCommandEncoder/beginRenderPass()}} is not \"used\" unless\r",
                        "                                    it is also used by {{GPURenderPassEncoder/beginOcclusionQuery()}}.\r"
                    ]
                }
            ]
        ],
        [
            "GPUQuerySet",
            [
                {
                    "target": "GPUQuerySet",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>type</dfn>\r",
                        "    ::\r",
                        "        The type of the queries managed by this {{GPUQuerySet}}.\r",
                        "\r",
                        "    : <dfn>count</dfn>\r",
                        "    ::\r",
                        "        The number of queries managed by this {{GPUQuerySet}}.\r"
                    ]
                },
                {
                    "target": "GPUQuerySet",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[state]]</dfn>, of type [=query set state=]\r",
                        "    ::\r",
                        "        The current state of the {{GPUQuerySet}}.\r"
                    ]
                },
                {
                    "target": "GPUQuerySet",
                    "type": "method",
                    "lines": [
                        "    : <dfn>destroy()</dfn>\r",
                        "    ::\r",
                        "        Destroys the {{GPUQuerySet}}.\r",
                        "\r",
                        "        <div algorithm=GPUQuerySet.destroy>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUQuerySet}} |this|.\r",
                        "\r",
                        "                **Returns:** {{undefined}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Set |this|.{{GPUQuerySet/[[state]]}} to [=query set state/destroyed=].\r",
                        "            </div>\r",
                        "        </div>\r"
                    ]
                }
            ]
        ],
        [
            "GPUQuerySetDescriptor",
            [
                {
                    "target": "GPUQuerySetDescriptor",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>type</dfn>\r",
                        "    ::\r",
                        "        The type of queries managed by {{GPUQuerySet}}.\r",
                        "\r",
                        "    : <dfn>count</dfn>\r",
                        "    ::\r",
                        "        The number of queries managed by {{GPUQuerySet}}.\r"
                    ]
                }
            ]
        ],
        [
            "GPUCanvasContext",
            [
                {
                    "target": "GPUCanvasContext",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>canvas</dfn>\r",
                        "    ::\r",
                        "        The canvas this context was created from.\r"
                    ]
                },
                {
                    "target": "GPUCanvasContext",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>\\[[configuration]]</dfn>, of type {{GPUCanvasConfiguration}}?, initially `null`\r",
                        "    ::\r",
                        "        The options this context is currently configured with.\r",
                        "\r",
                        "        `null` if the context has not been configured or has been\r",
                        "        {{GPUCanvasContext/unconfigure()|unconfigured}}.\r",
                        "\r",
                        "    : <dfn>\\[[textureDescriptor]]</dfn>, of type {{GPUTextureDescriptor}}?, initially `null`\r",
                        "    ::\r",
                        "        The currently configured texture descriptor, derived from the\r",
                        "        {{GPUCanvasContext/[[configuration]]}} and canvas.\r",
                        "\r",
                        "        `null` if the context has not been configured or has been\r",
                        "        {{GPUCanvasContext/unconfigure()|unconfigured}}.\r",
                        "\r",
                        "    : <dfn>\\[[drawingBuffer]]</dfn>, an image, initially\r",
                        "        a transparent black image with the same size as the canvas\r",
                        "    ::\r",
                        "        The drawing buffer is the working-copy image data of the canvas.\r",
                        "        It is exposed as writable by {{GPUCanvasContext/[[currentTexture]]}}\r",
                        "        (returned by {{GPUCanvasContext/getCurrentTexture()}}).\r",
                        "\r",
                        "        The drawing buffer is used to [$get a copy of the image contents of a context$], which\r",
                        "        occurs when the canvas is displayed or otherwise read. It may be transparent, even if\r",
                        "        {{GPUCanvasContext/[[configuration]]}}.{{GPUCanvasConfiguration/alphaMode}} is\r",
                        "        {{GPUCanvasAlphaMode/\"opaque\"}}. The {{GPUCanvasConfiguration/alphaMode}} only affects the\r",
                        "        result of the \"[$get a copy of the image contents of a context$]\" algorithm.\r",
                        "\r",
                        "        The drawing buffer outlives the {{GPUCanvasContext/[[currentTexture]]}} and contains the\r",
                        "        previously-rendered contents even after the canvas has been presented.\r",
                        "        It is only cleared in [$Replace the drawing buffer$].\r",
                        "\r",
                        "        Any time the drawing buffer is read, implementations must ensure that all previously\r",
                        "        submitted work (e.g. queue submissions) have completed writing to it via\r",
                        "        {{GPUCanvasContext/[[currentTexture]]}}.\r",
                        "\r",
                        "    : <dfn>\\[[currentTexture]]</dfn>, of type {{GPUTexture}}?, initially `null`\r",
                        "    ::\r",
                        "        The {{GPUTexture}} to draw into for the current frame.\r",
                        "        It exposes a writable view onto the underlying {{GPUCanvasContext/[[drawingBuffer]]}}.\r",
                        "        {{GPUCanvasContext/getCurrentTexture()}} populates this slot if `null`, then returns it.\r",
                        "\r",
                        "        In the steady-state of a visible canvas, any changes to the drawing buffer made through the\r",
                        "        currentTexture get presented when [$updating the rendering of a WebGPU canvas$].\r",
                        "        At or before that point, the texture is also destroyed\r",
                        "        and {{GPUCanvasContext/[[currentTexture]]}} is set to to `null`, signalling that\r",
                        "        a new one is to be created by the next call to {{GPUCanvasContext/getCurrentTexture()}}.\r",
                        "\r",
                        "        {{GPUTexture/destroy()|Destroying}} the currentTexture has no effect on the drawing buffer\r",
                        "        contents; it only terminates write-access to the drawing buffer early.\r",
                        "        During the same frame, {{GPUCanvasContext/getCurrentTexture()}} continues returning the\r",
                        "        same destroyed texture.\r",
                        "\r",
                        "        [$Expire the current texture$] sets the currentTexture to `null`.\r",
                        "        It is called by {{GPUCanvasContext/configure()}}, resizing the canvas,\r",
                        "        presentation, {{OffscreenCanvas/transferToImageBitmap()}}, and others.\r"
                    ]
                },
                {
                    "target": "GPUCanvasContext",
                    "type": "method",
                    "lines": [
                        "    : <dfn>configure(configuration)</dfn>\r",
                        "    ::\r",
                        "        Configures the context for this canvas.\r",
                        "        This clears the drawing buffer to transparent black (in [$Replace the drawing buffer$]).\r",
                        "\r",
                        "        <div algorithm=GPUCanvasContext.configure>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUCanvasContext}} |this|.\r",
                        "\r",
                        "                **Arguments:**\r",
                        "\r",
                        "                <pre class=argumentdef for=\"GPUCanvasContext/configure(configuration)\">\r",
                        "                    |configuration|: Desired configuration for the context.\r",
                        "                </pre>\r",
                        "\r",
                        "                **Returns:** undefined\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Let |device| be |configuration|.{{GPUCanvasConfiguration/device}}.\r",
                        "                1. [=?=] [$Validate texture format required features$] of\r",
                        "                    |configuration|.{{GPUCanvasConfiguration/format}} with |device|.{{GPUObjectBase/[[device]]}}.\r",
                        "                1. [=?=] [$Validate texture format required features$] of each element of\r",
                        "                    |configuration|.{{GPUTextureDescriptor/viewFormats}} with |device|.{{GPUObjectBase/[[device]]}}.\r",
                        "                1. Let |descriptor| be the\r",
                        "                    [$GPUTextureDescriptor for the canvas and configuration$](|this|.{{GPUCanvasContext/canvas}}, |configuration|).\r",
                        "                1. Set |this|.{{GPUCanvasContext/[[configuration]]}} to |configuration|.\r",
                        "                1. Set |this|.{{GPUCanvasContext/[[textureDescriptor]]}} to |descriptor|.\r",
                        "                1. [$Replace the drawing buffer$] of |this|, which resets\r",
                        "                    |this|.{{GPUCanvasContext/[[drawingBuffer]]}} with a bitmap with the new format and tags.\r",
                        "                1. Issue the subsequent steps on the [=Device timeline=] of |device|.\r",
                        "            </div>\r",
                        "            <div data-timeline=device>\r",
                        "                [=Device timeline=] steps:\r",
                        "\r",
                        "                1. If any of the following requirements are unmet, [$generate a validation error$] and stop.\r",
                        "\r",
                        "                    <div class=validusage>\r",
                        "                        - [$validating GPUTextureDescriptor$](|device|, |descriptor|)\r",
                        "                            must return true.\r",
                        "                        - [=Supported context formats=] must [=set/contain=]\r",
                        "                            |configuration|.{{GPUCanvasConfiguration/format}}.\r",
                        "                    </div>\r",
                        "\r",
                        "                    Note: This early validation remains valid until the next\r",
                        "                    {{GPUCanvasContext/configure()}} call, **except** for\r",
                        "                    validation of the {{GPUTextureDescriptor/size}}, which changes when\r",
                        "                    the canvas is resized.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>unconfigure()</dfn>\r",
                        "    ::\r",
                        "        Removes the context configuration. Destroys any textures produced while configured.\r",
                        "\r",
                        "        <div algorithm=GPUCanvasContext.unconfigure>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUCanvasContext}} |this|.\r",
                        "\r",
                        "                **Returns:** undefined\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. Set |this|.{{GPUCanvasContext/[[configuration]]}} to `null`.\r",
                        "                1. Set |this|.{{GPUCanvasContext/[[textureDescriptor]]}} to `null`.\r",
                        "                1. [$Replace the drawing buffer$] of |this|.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "    : <dfn>getCurrentTexture()</dfn>\r",
                        "    ::\r",
                        "        Get the {{GPUTexture}} that will be composited to the document by the {{GPUCanvasContext}}\r",
                        "        next.\r",
                        "\r",
                        "        <div class=note heading>\r",
                        "            An application **should** call {{GPUCanvasContext/getCurrentTexture()}}\r",
                        "            in the same task that renders to the canvas texture.\r",
                        "            Otherwise, the texture could get destroyed by these steps before the\r",
                        "            application is finished rendering to it.\r",
                        "\r",
                        "            The expiry task (defined below) is optional to implement.\r",
                        "            Even if implemented, task source priority is not normatively defined, so may happen as\r",
                        "            early as the next task, or as late as after all other task sources are empty\r",
                        "            (see [=automatic expiry task source=]).\r",
                        "            Expiry is only guaranteed when a visible canvas is displayed\r",
                        "            ([$updating the rendering of a WebGPU canvas$]) and in other\r",
                        "            callers of [$Replace the drawing buffer$].\r",
                        "        </div>\r",
                        "\r",
                        "        <div algorithm=GPUCanvasContext.getCurrentTexture>\r",
                        "            <div data-timeline=content>\r",
                        "                **Called on:** {{GPUCanvasContext}} |this|.\r",
                        "\r",
                        "                **Returns:** {{GPUTexture}}\r",
                        "\r",
                        "                [=Content timeline=] steps:\r",
                        "\r",
                        "                1. If |this|.{{GPUCanvasContext/[[configuration]]}} is `null`:\r",
                        "                    1. Throw an {{InvalidStateError}} and stop.\r",
                        "                1. [=Assert=] |this|.{{GPUCanvasContext/[[textureDescriptor]]}} is not `null`.\r",
                        "                1. Let |device| be |this|.{{GPUCanvasContext/[[configuration]]}}.{{GPUCanvasConfiguration/device}}.\r",
                        "                1. If |this|.{{GPUCanvasContext/[[currentTexture]]}} is `null`:\r",
                        "                    1. [$Replace the drawing buffer$] of |this|.\r",
                        "                    1. Set |this|.{{GPUCanvasContext/[[currentTexture]]}} to the result of calling\r",
                        "                        |device|.{{GPUDevice/createTexture()}} with |this|.{{GPUCanvasContext/[[textureDescriptor]]}},\r",
                        "                        except with the {{GPUTexture}}'s underlying storage pointing to\r",
                        "                        |this|.{{GPUCanvasContext/[[drawingBuffer]]}}.\r",
                        "\r",
                        "                        Note:\r",
                        "                        If the texture can't be created (e.g. due to validation failure or out-of-memory),\r",
                        "                        this generates and error and returns an [=invalid=] {{GPUTexture}}.\r",
                        "                        Some validation here is redundant with that done in {{GPUCanvasContext/configure()}}.\r",
                        "                        Implementations **must not** skip this redundant validation.\r",
                        "                1. **Optionally**, [$queue an automatic expiry task$] with device |device| and the following steps:\r",
                        "\r",
                        "                    <div data-timeline=content>\r",
                        "                        1. [$Expire the current texture$] of |this|.\r",
                        "\r",
                        "                            Note: If this already happened when\r",
                        "                            [$updating the rendering of a WebGPU canvas$], it has no effect.\r",
                        "                    </div>\r",
                        "                1. Return |this|.{{GPUCanvasContext/[[currentTexture]]}}.\r",
                        "            </div>\r",
                        "        </div>\r",
                        "\r",
                        "        Note: The same {{GPUTexture}} object will be returned by every\r",
                        "        call to {{GPUCanvasContext/getCurrentTexture()}} until \"[$Expire the current texture$]\"\r",
                        "        runs, even if that {{GPUTexture}} is destroyed, failed validation, or failed to allocate.\r"
                    ]
                }
            ]
        ],
        [
            "GPUCanvasConfiguration",
            [
                {
                    "target": "GPUCanvasConfiguration",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>device</dfn>\r",
                        "    ::\r",
                        "        The {{GPUDevice}} that textures returned by {{GPUCanvasContext/getCurrentTexture()}} will be\r",
                        "        compatible with.\r",
                        "\r",
                        "    : <dfn>format</dfn>\r",
                        "    ::\r",
                        "        The format that textures returned by {{GPUCanvasContext/getCurrentTexture()}} will have.\r",
                        "        Must be one of the [=Supported context formats=].\r",
                        "\r",
                        "    : <dfn>usage</dfn>\r",
                        "    ::\r",
                        "        The usage that textures returned by {{GPUCanvasContext/getCurrentTexture()}} will have.\r",
                        "        {{GPUTextureUsage/RENDER_ATTACHMENT}} is the default, but is not automatically included\r",
                        "        if the usage is explicitly set. Be sure to include {{GPUTextureUsage/RENDER_ATTACHMENT}}\r",
                        "        when setting a custom usage if you wish to use textures returned by\r",
                        "        {{GPUCanvasContext/getCurrentTexture()}} as color targets for a render pass.\r",
                        "\r",
                        "    : <dfn>viewFormats</dfn>\r",
                        "    ::\r",
                        "        The formats that views created from textures returned by\r",
                        "        {{GPUCanvasContext/getCurrentTexture()}} may use.\r",
                        "\r",
                        "    : <dfn>colorSpace</dfn>\r",
                        "    ::\r",
                        "        The color space that values written into textures returned by\r",
                        "        {{GPUCanvasContext/getCurrentTexture()}} should be displayed with.\r",
                        "\r",
                        "    : <dfn>alphaMode</dfn>\r",
                        "    ::\r",
                        "        Determines the effect that alpha values will have on the content of textures returned by\r",
                        "        {{GPUCanvasContext/getCurrentTexture()}} when read, displayed, or used as an image source.\r"
                    ]
                }
            ]
        ],
        [
            "GPUCanvasAlphaMode",
            [
                {
                    "target": "GPUCanvasAlphaMode",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"opaque\"</dfn>\r",
                        "    ::\r",
                        "        Read RGB as opaque and ignore alpha values.\r",
                        "        If the content is not already opaque, the alpha channel is cleared to 1.0\r",
                        "        in \"[$get a copy of the image contents of a context$]\".\r",
                        "\r",
                        "    : <dfn>\"premultiplied\"</dfn>\r",
                        "    ::\r",
                        "        Read RGBA as premultiplied: color values are premultiplied by their alpha value.\r",
                        "        100% red at 50% alpha is `[0.5, 0, 0, 0.5]`.\r",
                        "\r",
                        "        If [=out-of-gamut premultiplied RGBA values=] are output to the canvas, and the canvas is:\r",
                        "\r",
                        "        <dl class=switch>\r",
                        "            : [$get a copy of the image contents of a context|used as an image source$]\r",
                        "            :: Values are preserved, as described in [[#color-space-conversions|color space conversion]].\r",
                        "\r",
                        "            : displayed to the screen\r",
                        "            :: Compositing results are undefined.\r",
                        "                This is true even if color space conversion would produce in-gamut values before\r",
                        "                compositing, because the intermediate format for compositing is not specified.\r"
                    ]
                }
            ]
        ],
        [
            "GPUError",
            [
                {
                    "target": "GPUError",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>message</dfn>\r",
                        "    ::\r",
                        "        A human-readable, [=localizable text=] message providing information about the error that\r",
                        "        occurred.\r",
                        "\r",
                        "        Note: This message is generally intended for application developers to debug their\r",
                        "        applications and capture information for debug reports, not to be surfaced to end-users.\r",
                        "\r",
                        "        Note: User agents should not include potentially machine-parsable details in this message,\r",
                        "        such as free system memory on {{GPUErrorFilter/\"out-of-memory\"}} or other details about the\r",
                        "        conditions under which memory was exhausted.\r",
                        "\r",
                        "        Note: The {{GPUError/message}} should follow the [=best practices for language and\r",
                        "        direction information=]. This includes making use of any future standards which may emerge\r",
                        "        regarding the reporting of string language and direction metadata.\r",
                        "\r",
                        "        <p class=\"note editorial\"><span class=marker>Editorial note:</span>\r",
                        "        At the time of this writing, no language/direction recommendation is available that provides\r",
                        "        compatibility and consistency with legacy APIs, but when there is, adopt it formally.\r"
                    ]
                }
            ]
        ],
        [
            "GPUErrorFilter",
            [
                {
                    "target": "GPUErrorFilter",
                    "type": "enum-value",
                    "lines": [
                        "    : <dfn>\"validation\"</dfn>\r",
                        "    ::\r",
                        "        Indicates that the error scope will catch a {{GPUValidationError}}.\r",
                        "\r",
                        "    : <dfn>\"out-of-memory\"</dfn>\r",
                        "    ::\r",
                        "        Indicates that the error scope will catch a {{GPUOutOfMemoryError}}.\r",
                        "\r",
                        "    : <dfn>\"internal\"</dfn>\r",
                        "    ::\r",
                        "        Indicates that the error scope will catch a {{GPUInternalError}}.\r"
                    ]
                }
            ]
        ],
        [
            "GPUUncapturedErrorEvent",
            [
                {
                    "target": "GPUUncapturedErrorEvent",
                    "type": "attribute",
                    "lines": [
                        "    : <dfn>error</dfn>\r",
                        "    ::\r",
                        "        A [=slot-backed attribute=] holding an object representing the error that was uncaptured.\r",
                        "        This has the same type as errors returned by {{GPUDevice/popErrorScope()}}.\r"
                    ]
                }
            ]
        ],
        [
            "GPUColorDict",
            [
                {
                    "target": "GPUColorDict",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>r</dfn>\r",
                        "    ::\r",
                        "        The red channel value.\r",
                        "\r",
                        "    : <dfn>g</dfn>\r",
                        "    ::\r",
                        "        The green channel value.\r",
                        "\r",
                        "    : <dfn>b</dfn>\r",
                        "    ::\r",
                        "        The blue channel value.\r",
                        "\r",
                        "    : <dfn>a</dfn>\r",
                        "    ::\r",
                        "        The alpha channel value.\r"
                    ]
                }
            ]
        ],
        [
            "GPUExtent3DDict",
            [
                {
                    "target": "GPUExtent3DDict",
                    "type": "dict-member",
                    "lines": [
                        "    : <dfn>width</dfn>\r",
                        "    ::\r",
                        "        The width of the extent.\r",
                        "\r",
                        "    : <dfn>height</dfn>\r",
                        "    ::\r",
                        "        The height of the extent.\r",
                        "\r",
                        "    : <dfn>depthOrArrayLayers</dfn>\r",
                        "    ::\r",
                        "        The depth of the extent or the number of array layers it contains.\r",
                        "        If used with a {{GPUTexture}} with a {{GPUTextureDimension}} of {{GPUTextureDimension/\"3d\"}}\r",
                        "        defines the depth of the texture. If used with a {{GPUTexture}} with a {{GPUTextureDimension}}\r",
                        "        of {{GPUTextureDimension/\"2d\"}} defines the number of array layers in the texture.\r"
                    ]
                }
            ]
        ]
    ],
    "exposed": [
        "GPUSupportedLimits",
        "GPUSupportedFeatures",
        "WGSLLanguageFeatures",
        "GPUAdapterInfo",
        "GPU",
        "GPUAdapter",
        "GPUDevice",
        "GPUBuffer",
        "GPUBufferUsage",
        "GPUMapMode",
        "GPUTexture",
        "GPUTextureUsage",
        "GPUTextureView",
        "GPUExternalTexture",
        "GPUSampler",
        "GPUBindGroupLayout",
        "GPUShaderStage",
        "GPUBindGroup",
        "GPUPipelineLayout",
        "GPUShaderModule",
        "GPUCompilationMessage",
        "GPUCompilationInfo",
        "GPUPipelineError",
        "GPUComputePipeline",
        "GPURenderPipeline",
        "GPUColorWrite",
        "GPUCommandBuffer",
        "GPUCommandEncoder",
        "GPUComputePassEncoder",
        "GPURenderPassEncoder",
        "GPURenderBundle",
        "GPURenderBundleEncoder",
        "GPUQueue",
        "GPUQuerySet",
        "GPUCanvasContext",
        "GPUDeviceLostInfo",
        "GPUError",
        "GPUValidationError",
        "GPUOutOfMemoryError",
        "GPUInternalError",
        "GPUUncapturedErrorEvent"
    ]
}